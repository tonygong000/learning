import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,b as p,d as t,e as s}from"./app-D0cmWqTO.js";const i={},u=s(`<h2 id="二分图最大匹配" tabindex="-1"><a class="header-anchor" href="#二分图最大匹配"><span>二分图最大匹配</span></a></h2><h3 id="匈牙利算法" tabindex="-1"><a class="header-anchor" href="#匈牙利算法"><span>匈牙利算法</span></a></h3><p>将问题看成从N个男生寻找M个女生的对象</p><ol><li>遍历男生，首先遍历这一轮的男生a的潜在发展对象，</li><li>如果潜在女朋友有男朋友b，则劝说这个男朋友b能否换一个</li><li>遍历这个男朋友b的潜在女朋友，看是否能成功找一个空着的 <ul><li>如果可以，男生b则换新的女朋友</li><li>如果不行，男生a只能接着遍历之后的潜在女朋友</li></ul></li><li>遍历完所有都没有的话，就单身</li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> e <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
edges <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">:</span>
    s<span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    s<span class="token operator">-=</span><span class="token number">1</span>
    t<span class="token operator">-=</span><span class="token number">1</span>
    <span class="token keyword">if</span> s <span class="token keyword">not</span> <span class="token keyword">in</span> edges<span class="token punctuation">:</span>
        edges<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>t<span class="token punctuation">]</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        edges<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>
relation <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> m
visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n
time <span class="token operator">=</span> <span class="token number">0</span>
res <span class="token operator">=</span> <span class="token number">0</span>


<span class="token keyword">def</span> <span class="token function">hungry</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> visited<span class="token punctuation">,</span> time<span class="token punctuation">,</span> relation
    <span class="token keyword">if</span> visited<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">==</span> time<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
    visited<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> time
    <span class="token keyword">for</span> edge <span class="token keyword">in</span> edges<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> relation<span class="token punctuation">[</span>edge<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">or</span> hungry<span class="token punctuation">(</span>relation<span class="token punctuation">[</span>edge<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            relation<span class="token punctuation">[</span>edge<span class="token punctuation">]</span> <span class="token operator">=</span> s
            <span class="token keyword">return</span> <span class="token boolean">True</span>

    <span class="token keyword">return</span> <span class="token boolean">False</span>


<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    time <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">if</span> i <span class="token keyword">not</span> <span class="token keyword">in</span> edges<span class="token punctuation">:</span>
        <span class="token keyword">continue</span>
    <span class="token keyword">if</span> hungry<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
        res <span class="token operator">+=</span> <span class="token number">1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="最短路径" tabindex="-1"><a class="header-anchor" href="#最短路径"><span>最短路径</span></a></h2><h3 id="迪杰斯特拉算法" tabindex="-1"><a class="header-anchor" href="#迪杰斯特拉算法"><span>迪杰斯特拉算法</span></a></h3><p>dis代表从源点到各个点的最短距离，初始化为INF</p><p>v代表点是否遍历过</p><p>edge代表边和权重</p><ol><li>找到dis中值最小的点</li><li>通过这个点和edge数组来更新dis的值 <ul><li>进行松弛</li><li>记录这个点已经被遍历过</li></ul></li><li>直至遍历结束</li></ol><p>例题：</p>`,12),k={href:"https://leetcode.cn/problems/network-delay-time/description/",target:"_blank",rel:"noopener noreferrer"},r=s(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">networkDelayTime</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> times<span class="token punctuation">,</span> n<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        :type times: List[List[int]]
        :type n: int
        :type k: int
        :rtype: int
        &quot;&quot;&quot;</span>
        edges<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">for</span> time <span class="token keyword">in</span> times<span class="token punctuation">:</span>
            <span class="token keyword">if</span> time<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">not</span> <span class="token keyword">in</span> edges<span class="token punctuation">:</span>
                edges<span class="token punctuation">[</span>time<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span>time<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>time<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                edges<span class="token punctuation">[</span>time<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>time<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>time<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        INF<span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&#39;inf&#39;</span><span class="token punctuation">)</span>
        v<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>n
        dis<span class="token operator">=</span><span class="token punctuation">[</span>INF<span class="token punctuation">]</span><span class="token operator">*</span>n
        dis<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            currentMin<span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&quot;inf&quot;</span><span class="token punctuation">)</span>
            currentIndex<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>

            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
                    <span class="token keyword">continue</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    <span class="token keyword">if</span> currentMin<span class="token operator">&gt;</span>dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
                        currentIndex<span class="token operator">=</span>j
                        currentMin<span class="token operator">=</span>dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
            <span class="token keyword">if</span> currentIndex<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
                <span class="token keyword">continue</span>
            v<span class="token punctuation">[</span>currentIndex<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>
            <span class="token keyword">if</span> currentIndex <span class="token keyword">in</span> edges<span class="token punctuation">:</span>
                <span class="token keyword">for</span> edge <span class="token keyword">in</span> edges<span class="token punctuation">[</span>currentIndex<span class="token punctuation">]</span><span class="token punctuation">:</span>
                    dis<span class="token punctuation">[</span>edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token builtin">min</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dis<span class="token punctuation">[</span>currentIndex<span class="token punctuation">]</span><span class="token operator">+</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&#39;inf&#39;</span><span class="token punctuation">)</span> <span class="token keyword">in</span> dis<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="floyd算法" tabindex="-1"><a class="header-anchor" href="#floyd算法"><span>floyd算法</span></a></h3>`,2),d={href:"https://leetcode.cn/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/description/",target:"_blank",rel:"noopener noreferrer"},m=s(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">findTheCity</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">,</span> edges<span class="token punctuation">,</span> distanceThreshold<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        :type n: int
        :type edges: List[List[int]]
        :type distanceThreshold: int
        :rtype: int
        &quot;&quot;&quot;</span>
        dis <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&quot;inf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
        newedges<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&quot;inf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>

        <span class="token keyword">for</span> edge <span class="token keyword">in</span> edges<span class="token punctuation">:</span>

            dis<span class="token punctuation">[</span>edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>edge<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
            dis<span class="token punctuation">[</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>edge<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n
        <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            dis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>

        ansCity<span class="token operator">=</span>ansNum<span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&#39;inf&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            tempnum<span class="token operator">=</span><span class="token number">0</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span>distanceThreshold<span class="token punctuation">:</span>
                    tempnum<span class="token operator">+=</span><span class="token number">1</span>
            <span class="token keyword">if</span> tempnum<span class="token operator">&lt;=</span>ansNum<span class="token punctuation">:</span>
                ansNum<span class="token operator">=</span>tempnum
                ansCity<span class="token operator">=</span>i
        <span class="token keyword">return</span> ansCity
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function v(b,y){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("ol",null,[n("li",null,[n("a",k,[p("网络延迟"),t(a)])])]),r,n("p",null,[n("a",d,[p("阈值距离内邻居最少的城市"),t(a)])]),m])}const h=e(i,[["render",v],["__file","graph.html.vue"]]),f=JSON.parse(`{"path":"/cs-basics/algorithms/model/graph.html","title":"图论","lang":"zh-CN","frontmatter":{"title":"图论","category":"cs-basis","description":"二分图最大匹配 匈牙利算法 将问题看成从N个男生寻找M个女生的对象 遍历男生，首先遍历这一轮的男生a的潜在发展对象， 如果潜在女朋友有男朋友b，则劝说这个男朋友b能否换一个 遍历这个男朋友b的潜在女朋友，看是否能成功找一个空着的 如果可以，男生b则换新的女朋友 如果不行，男生a只能接着遍历之后的潜在女朋友 遍历完所有都没有的话，就单身 最短路径 迪杰斯...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/learning/cs-basics/algorithms/model/graph.html"}],["meta",{"property":"og:site_name","content":"Mua'dib Guide "}],["meta",{"property":"og:title","content":"图论"}],["meta",{"property":"og:description","content":"二分图最大匹配 匈牙利算法 将问题看成从N个男生寻找M个女生的对象 遍历男生，首先遍历这一轮的男生a的潜在发展对象， 如果潜在女朋友有男朋友b，则劝说这个男朋友b能否换一个 遍历这个男朋友b的潜在女朋友，看是否能成功找一个空着的 如果可以，男生b则换新的女朋友 如果不行，男生a只能接着遍历之后的潜在女朋友 遍历完所有都没有的话，就单身 最短路径 迪杰斯..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-02T14:29:03.000Z"}],["meta",{"property":"article:author","content":"Guide"}],["meta",{"property":"article:modified_time","content":"2024-09-02T14:29:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"图论\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-02T14:29:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Guide\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"二分图最大匹配","slug":"二分图最大匹配","link":"#二分图最大匹配","children":[{"level":3,"title":"匈牙利算法","slug":"匈牙利算法","link":"#匈牙利算法","children":[]}]},{"level":2,"title":"最短路径","slug":"最短路径","link":"#最短路径","children":[{"level":3,"title":"迪杰斯特拉算法","slug":"迪杰斯特拉算法","link":"#迪杰斯特拉算法","children":[]},{"level":3,"title":"floyd算法","slug":"floyd算法","link":"#floyd算法","children":[]}]}],"git":{"createdTime":1725287343000,"updatedTime":1725287343000,"contributors":[{"name":"tonygong","email":"280880907@163.com","commits":1}]},"readingTime":{"minutes":2.21,"words":664},"filePathRelative":"cs-basics/algorithms/model/graph.md","localizedDate":"2024年9月2日","excerpt":"<h2>二分图最大匹配</h2>\\n<h3>匈牙利算法</h3>\\n<p>将问题看成从N个男生寻找M个女生的对象</p>\\n<ol>\\n<li>遍历男生，首先遍历这一轮的男生a的潜在发展对象，</li>\\n<li>如果潜在女朋友有男朋友b，则劝说这个男朋友b能否换一个</li>\\n<li>遍历这个男朋友b的潜在女朋友，看是否能成功找一个空着的\\n<ul>\\n<li>如果可以，男生b则换新的女朋友</li>\\n<li>如果不行，男生a只能接着遍历之后的潜在女朋友</li>\\n</ul>\\n</li>\\n<li>遍历完所有都没有的话，就单身</li>\\n</ol>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code>n<span class=\\"token punctuation\\">,</span> m<span class=\\"token punctuation\\">,</span> e <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">map</span><span class=\\"token punctuation\\">(</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">input</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>split<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\nedges <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">for</span> i <span class=\\"token keyword\\">in</span> <span class=\\"token builtin\\">range</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    s<span class=\\"token punctuation\\">,</span> t <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">map</span><span class=\\"token punctuation\\">(</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">input</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>split<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    s<span class=\\"token operator\\">-=</span><span class=\\"token number\\">1</span>\\n    t<span class=\\"token operator\\">-=</span><span class=\\"token number\\">1</span>\\n    <span class=\\"token keyword\\">if</span> s <span class=\\"token keyword\\">not</span> <span class=\\"token keyword\\">in</span> edges<span class=\\"token punctuation\\">:</span>\\n        edges<span class=\\"token punctuation\\">[</span>s<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span>t<span class=\\"token punctuation\\">]</span>\\n    <span class=\\"token keyword\\">else</span><span class=\\"token punctuation\\">:</span>\\n        edges<span class=\\"token punctuation\\">[</span>s<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>append<span class=\\"token punctuation\\">(</span>t<span class=\\"token punctuation\\">)</span>\\nrelation <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">*</span> m\\nvisited <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">*</span> n\\ntime <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span>\\nres <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span>\\n\\n\\n<span class=\\"token keyword\\">def</span> <span class=\\"token function\\">hungry</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token keyword\\">global</span> visited<span class=\\"token punctuation\\">,</span> time<span class=\\"token punctuation\\">,</span> relation\\n    <span class=\\"token keyword\\">if</span> visited<span class=\\"token punctuation\\">[</span>s<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">==</span> time<span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">False</span>\\n    visited<span class=\\"token punctuation\\">[</span>s<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> time\\n    <span class=\\"token keyword\\">for</span> edge <span class=\\"token keyword\\">in</span> edges<span class=\\"token punctuation\\">[</span>s<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">if</span> relation<span class=\\"token punctuation\\">[</span>edge<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">==</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span> <span class=\\"token keyword\\">or</span> hungry<span class=\\"token punctuation\\">(</span>relation<span class=\\"token punctuation\\">[</span>edge<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n            relation<span class=\\"token punctuation\\">[</span>edge<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> s\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">True</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">False</span>\\n\\n\\n<span class=\\"token keyword\\">for</span> i <span class=\\"token keyword\\">in</span> <span class=\\"token builtin\\">range</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> n<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    time <span class=\\"token operator\\">+=</span> <span class=\\"token number\\">1</span>\\n    <span class=\\"token keyword\\">if</span> i <span class=\\"token keyword\\">not</span> <span class=\\"token keyword\\">in</span> edges<span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">continue</span>\\n    <span class=\\"token keyword\\">if</span> hungry<span class=\\"token punctuation\\">(</span>i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        res <span class=\\"token operator\\">+=</span> <span class=\\"token number\\">1</span>\\n<span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>res<span class=\\"token punctuation\\">)</span>\\n</code></pre></div>","autoDesc":true}`);export{h as comp,f as data};
