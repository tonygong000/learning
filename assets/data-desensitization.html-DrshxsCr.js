import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as i,c as l,a as n,d as a,w as u,b as s,e}from"./app-ChWUTpfW.js";const r={},d=n("img",{src:"https://oss.javaguide.cn/xingqiu/xingqiu.png",alt:"JavaGuide官方知识星球",tabindex:"0"},null,-1),k=n("figcaption",null,"JavaGuide官方知识星球",-1),m={href:"https://mp.weixin.qq.com/s/1qFWczesU50ndPPLtABHFg",target:"_blank",rel:"noopener noreferrer"},v=e('<h2 id="什么是数据脱敏" tabindex="-1"><a class="header-anchor" href="#什么是数据脱敏"><span>什么是数据脱敏</span></a></h2><h3 id="数据脱敏的定义" tabindex="-1"><a class="header-anchor" href="#数据脱敏的定义"><span>数据脱敏的定义</span></a></h3><p>数据脱敏百度百科中是这样定义的：</p><blockquote><p>数据脱敏，指对某些敏感信息通过脱敏规则进行数据的变形，实现敏感隐私数据的可靠保护。这样就可以在开发、测试和其它非生产环境以及外包环境中安全地使用脱敏后的真实数据集。在涉及客户安全数据或者一些商业性敏感数据的情况下，在不违反系统规则条件下，对真实数据进行改造并提供测试使用，如身份证号、手机号、卡号、客户号等个人信息都需要进行数据脱敏。是数据库安全技术之一。</p></blockquote><p>总的来说，数据脱敏是指对某些敏感信息通过脱敏规则进行数据的变形，实现敏感隐私数据的可靠保护。</p><p>在数据脱敏过程中，通常会采用不同的算法和技术，以根据不同的需求和场景对数据进行处理。例如，对于身份证号码，可以使用掩码算法（masking）将前几位数字保留，其他位用 “X” 或 &quot;*&quot; 代替；对于姓名，可以使用伪造（pseudonymization）算法，将真实姓名替换成随机生成的假名。</p><h3 id="常用脱敏规则" tabindex="-1"><a class="header-anchor" href="#常用脱敏规则"><span>常用脱敏规则</span></a></h3><p>常用脱敏规则是为了保护敏感数据的安全性，在处理和存储敏感数据时对其进行变换或修改。</p><p>下面是几种常见的脱敏规则：</p>',9),b=n("li",null,"替换(常用)：将敏感数据中的特定字符或字符序列替换为其他字符。例如，将信用卡号中的中间几位数字替换为星号（*）或其他字符。",-1),g=n("li",null,"删除：将敏感数据中的部分内容随机删除。比如，将电话号码的随机 3 位数字进行删除。",-1),h=n("li",null,"重排：将原始数据中的某些字符或字段的顺序打乱。例如，将身份证号码的随机位交错互换。",-1),y=n("li",null,"加噪：在数据中注入一些误差或者噪音，达到对数据脱敏的效果。例如，在敏感数据中添加一些随机生成的字符。",-1),f={href:"https://javaguide.cn/system-design/security/encryption-algorithms.html",target:"_blank",rel:"noopener noreferrer"},w=n("li",null,"……",-1),x=e(`<h2 id="常用脱敏工具" tabindex="-1"><a class="header-anchor" href="#常用脱敏工具"><span>常用脱敏工具</span></a></h2><h3 id="hutool" tabindex="-1"><a class="header-anchor" href="#hutool"><span>Hutool</span></a></h3><p>Hutool 一个 Java 基础工具类，对文件、流、加密解密、转码、正则、线程、XML 等 JDK 方法进行封装，组成各种 Util 工具类，同时提供以下组件：</p><table><thead><tr><th style="text-align:center;">模块</th><th style="text-align:center;">介绍</th></tr></thead><tbody><tr><td style="text-align:center;">hutool-aop</td><td style="text-align:center;">JDK 动态代理封装，提供非 IOC 下的切面支持</td></tr><tr><td style="text-align:center;">hutool-bloomFilter</td><td style="text-align:center;">布隆过滤，提供一些 Hash 算法的布隆过滤</td></tr><tr><td style="text-align:center;">hutool-cache</td><td style="text-align:center;">简单缓存实现</td></tr><tr><td style="text-align:center;">hutool-core</td><td style="text-align:center;">核心，包括 Bean 操作、日期、各种 Util 等</td></tr><tr><td style="text-align:center;">hutool-cron</td><td style="text-align:center;">定时任务模块，提供类 Crontab 表达式的定时任务</td></tr><tr><td style="text-align:center;">hutool-crypto</td><td style="text-align:center;">加密解密模块，提供对称、非对称和摘要算法封装</td></tr><tr><td style="text-align:center;">hutool-db</td><td style="text-align:center;">JDBC 封装后的数据操作，基于 ActiveRecord 思想</td></tr><tr><td style="text-align:center;">hutool-dfa</td><td style="text-align:center;">基于 DFA 模型的多关键字查找</td></tr><tr><td style="text-align:center;">hutool-extra</td><td style="text-align:center;">扩展模块，对第三方封装（模板引擎、邮件、Servlet、二维码、Emoji、FTP、分词等）</td></tr><tr><td style="text-align:center;">hutool-http</td><td style="text-align:center;">基于 HttpUrlConnection 的 Http 客户端封装</td></tr><tr><td style="text-align:center;">hutool-log</td><td style="text-align:center;">自动识别日志实现的日志门面</td></tr><tr><td style="text-align:center;">hutool-script</td><td style="text-align:center;">脚本执行封装，例如 Javascript</td></tr><tr><td style="text-align:center;">hutool-setting</td><td style="text-align:center;">功能更强大的 Setting 配置文件和 Properties 封装</td></tr><tr><td style="text-align:center;">hutool-system</td><td style="text-align:center;">系统参数调用封装（JVM 信息等）</td></tr><tr><td style="text-align:center;">hutool-json</td><td style="text-align:center;">JSON 实现</td></tr><tr><td style="text-align:center;">hutool-captcha</td><td style="text-align:center;">图片验证码实现</td></tr><tr><td style="text-align:center;">hutool-poi</td><td style="text-align:center;">针对 POI 中 Excel 和 Word 的封装</td></tr><tr><td style="text-align:center;">hutool-socket</td><td style="text-align:center;">基于 Java 的 NIO 和 AIO 的 Socket 封装</td></tr><tr><td style="text-align:center;">hutool-jwt</td><td style="text-align:center;">JSON Web Token (JWT) 封装实现</td></tr></tbody></table><p>可以根据需求对每个模块单独引入，也可以通过引入<code>hutool-all</code>方式引入所有模块，本文所使用的数据脱敏工具就是在 <code>hutool.core</code> 模块。</p><p>现阶段最新版本的 Hutool 支持的脱敏数据类型如下，基本覆盖了常见的敏感信息。</p><ol><li>用户 id</li><li>中文姓名</li><li>身份证号</li><li>座机号</li><li>手机号</li><li>地址</li><li>电子邮件</li><li>密码</li><li>中国大陆车牌，包含普通车辆、新能源车辆</li><li>银行卡</li></ol><h4 id="一行代码实现脱敏" tabindex="-1"><a class="header-anchor" href="#一行代码实现脱敏"><span>一行代码实现脱敏</span></a></h4><p>Hutool 提供的脱敏方法如下图所示：</p><figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/security/2023-08-01-10-2119fnVCIDozqHgRGx.png" alt="" tabindex="0"><figcaption></figcaption></figure><p>注意：Hutool 脱敏是通过 * 来代替敏感信息的，具体实现是在 StrUtil.hide 方法中，如果我们想要自定义隐藏符号，则可以把 Hutool 的源码拷出来，重新实现即可。</p><p>这里以手机号、银行卡号、身份证号、密码信息的脱敏为例，下面是对应的测试代码。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">DesensitizedUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">Spring</span> <span class="token class-name">BootTest</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 *
 * <span class="token keyword">@description</span>: Hutool实现数据脱敏
 */</span>
<span class="token annotation punctuation">@Spring</span> <span class="token class-name">BootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HuToolDesensitizationTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPhoneDesensitization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> phone<span class="token operator">=</span><span class="token string">&quot;13723231234&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">DesensitizedUtil</span><span class="token punctuation">.</span><span class="token function">mobilePhone</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出：137****1234</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBankCardDesensitization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> bankCard<span class="token operator">=</span><span class="token string">&quot;6217000130008255666&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">DesensitizedUtil</span><span class="token punctuation">.</span><span class="token function">bankCard</span><span class="token punctuation">(</span>bankCard<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出：6217 **** **** *** 5666</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testIdCardNumDesensitization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> idCardNum<span class="token operator">=</span><span class="token string">&quot;411021199901102321&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//只显示前4位和后2位</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">DesensitizedUtil</span><span class="token punctuation">.</span><span class="token function">idCardNum</span><span class="token punctuation">(</span>idCardNum<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出：4110************21</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPasswordDesensitization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> password<span class="token operator">=</span><span class="token string">&quot;www.jd.com_35711&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">DesensitizedUtil</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出：****************</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上就是使用 Hutool 封装好的工具类实现数据脱敏。</p><h4 id="配合-jackson-通过注解方式实现脱敏" tabindex="-1"><a class="header-anchor" href="#配合-jackson-通过注解方式实现脱敏"><span>配合 JackSon 通过注解方式实现脱敏</span></a></h4><p>现在有了数据脱敏工具类，如果前端需要显示数据数据的地方比较多，我们不可能在每个地方都调用一个工具类，这样就显得代码太冗余了，那我们如何通过注解的方式优雅的完成数据脱敏呢？</p><p>如果项目是基于 Spring Boot 的 web 项目，则可以利用 Spring Boot 自带的 jackson 自定义序列化实现。它的实现原理其实就是在 json 进行序列化渲染给前端时，进行脱敏。</p><p><strong>第一步：脱敏策略的枚举。</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span>
 * <span class="token keyword">@description</span>:脱敏策略枚举
 */</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">DesensitizationTypeEnum</span> <span class="token punctuation">{</span>
    <span class="token comment">//自定义</span>
    <span class="token constant">MY_RULE</span><span class="token punctuation">,</span>
    <span class="token comment">//用户id</span>
    <span class="token constant">USER_ID</span><span class="token punctuation">,</span>
    <span class="token comment">//中文名</span>
    <span class="token constant">CHINESE_NAME</span><span class="token punctuation">,</span>
    <span class="token comment">//身份证号</span>
    <span class="token constant">ID_CARD</span><span class="token punctuation">,</span>
    <span class="token comment">//座机号</span>
    <span class="token constant">FIXED_PHONE</span><span class="token punctuation">,</span>
    <span class="token comment">//手机号</span>
    <span class="token constant">MOBILE_PHONE</span><span class="token punctuation">,</span>
    <span class="token comment">//地址</span>
    <span class="token constant">ADDRESS</span><span class="token punctuation">,</span>
    <span class="token comment">//电子邮件</span>
    <span class="token constant">EMAIL</span><span class="token punctuation">,</span>
    <span class="token comment">//密码</span>
    <span class="token constant">PASSWORD</span><span class="token punctuation">,</span>
    <span class="token comment">//中国大陆车牌，包含普通车辆、新能源车辆</span>
    <span class="token constant">CAR_LICENSE</span><span class="token punctuation">,</span>
    <span class="token comment">//银行卡</span>
    <span class="token constant">BANK_CARD</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面表示支持的脱敏类型。</p><p><strong>第二步：定义一个用于脱敏的 Desensitization 注解。</strong></p><ul><li><code>@Retention (RetentionPolicy.RUNTIME)</code>：运行时生效。</li><li><code>@Target (ElementType.FIELD)</code>：可用在字段上。</li><li><code>@JacksonAnnotationsInside</code>：此注解可以点进去看一下是一个元注解，主要是用户打包其他注解一起使用。</li><li><code>@JsonSerialize</code>：上面说到过，该注解的作用就是可自定义序列化，可以用在注解上，方法上，字段上，类上，运行时生效等等，根据提供的序列化类里面的重写方法实现自定义序列化。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span>
 */</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@JacksonAnnotationsInside</span>
<span class="token annotation punctuation">@JsonSerialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> <span class="token class-name">DesensitizationSerialize</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Desensitization</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 脱敏数据类型，在MY_RULE的时候，startInclude和endExclude生效
     */</span>
    <span class="token class-name">DesensitizationTypeEnum</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">DesensitizationTypeEnum</span><span class="token punctuation">.</span><span class="token constant">MY_RULE</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 脱敏开始位置（包含）
     */</span>
    <span class="token keyword">int</span> <span class="token function">startInclude</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 脱敏结束位置（不包含）
     */</span>
    <span class="token keyword">int</span> <span class="token function">endExclude</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：只有使用了自定义的脱敏枚举 <code>MY_RULE</code> 的时候，开始位置和结束位置才生效。</p><p><strong>第三步：创建自定的序列化类</strong></p><p>这一步是我们实现数据脱敏的关键。自定义序列化类继承 <code>JsonSerializer</code>，实现 <code>ContextualSerializer</code> 接口，并重写两个方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span>
 * <span class="token keyword">@description</span>: 自定义序列化类
 */</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DesensitizationSerialize</span> <span class="token keyword">extends</span> <span class="token class-name">JsonSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">ContextualSerializer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">DesensitizationTypeEnum</span> type<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Integer</span> startInclude<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Integer</span> endExclude<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">JsonGenerator</span> jsonGenerator<span class="token punctuation">,</span> <span class="token class-name">SerializerProvider</span> serializerProvider<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 自定义类型脱敏</span>
            <span class="token keyword">case</span> <span class="token constant">MY_RULE</span><span class="token operator">:</span>
                jsonGenerator<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token class-name">CharSequenceUtil</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> startInclude<span class="token punctuation">,</span> endExclude<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token comment">// userId脱敏</span>
            <span class="token keyword">case</span> <span class="token constant">USER_ID</span><span class="token operator">:</span>
                jsonGenerator<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">DesensitizedUtil</span><span class="token punctuation">.</span><span class="token function">userId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token comment">// 中文姓名脱敏</span>
            <span class="token keyword">case</span> <span class="token constant">CHINESE_NAME</span><span class="token operator">:</span>
                jsonGenerator<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token class-name">DesensitizedUtil</span><span class="token punctuation">.</span><span class="token function">chineseName</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token comment">// 身份证脱敏</span>
            <span class="token keyword">case</span> <span class="token constant">ID_CARD</span><span class="token operator">:</span>
                jsonGenerator<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token class-name">DesensitizedUtil</span><span class="token punctuation">.</span><span class="token function">idCardNum</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token comment">// 固定电话脱敏</span>
            <span class="token keyword">case</span> <span class="token constant">FIXED_PHONE</span><span class="token operator">:</span>
                jsonGenerator<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token class-name">DesensitizedUtil</span><span class="token punctuation">.</span><span class="token function">fixedPhone</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token comment">// 手机号脱敏</span>
            <span class="token keyword">case</span> <span class="token constant">MOBILE_PHONE</span><span class="token operator">:</span>
                jsonGenerator<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token class-name">DesensitizedUtil</span><span class="token punctuation">.</span><span class="token function">mobilePhone</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token comment">// 地址脱敏</span>
            <span class="token keyword">case</span> <span class="token constant">ADDRESS</span><span class="token operator">:</span>
                jsonGenerator<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token class-name">DesensitizedUtil</span><span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token comment">// 邮箱脱敏</span>
            <span class="token keyword">case</span> <span class="token constant">EMAIL</span><span class="token operator">:</span>
                jsonGenerator<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token class-name">DesensitizedUtil</span><span class="token punctuation">.</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token comment">// 密码脱敏</span>
            <span class="token keyword">case</span> <span class="token constant">PASSWORD</span><span class="token operator">:</span>
                jsonGenerator<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token class-name">DesensitizedUtil</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token comment">// 中国车牌脱敏</span>
            <span class="token keyword">case</span> <span class="token constant">CAR_LICENSE</span><span class="token operator">:</span>
                jsonGenerator<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token class-name">DesensitizedUtil</span><span class="token punctuation">.</span><span class="token function">carLicense</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token comment">// 银行卡脱敏</span>
            <span class="token keyword">case</span> <span class="token constant">BANK_CARD</span><span class="token operator">:</span>
                jsonGenerator<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token class-name">DesensitizedUtil</span><span class="token punctuation">.</span><span class="token function">bankCard</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">JsonSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">createContextual</span><span class="token punctuation">(</span><span class="token class-name">SerializerProvider</span> serializerProvider<span class="token punctuation">,</span> <span class="token class-name">BeanProperty</span> beanProperty<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonMappingException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanProperty <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 判断数据类型是否为String类型</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>beanProperty<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRawClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 获取定义的注解</span>
                <span class="token class-name">Desensitization</span> desensitization <span class="token operator">=</span> beanProperty<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Desensitization</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 为null</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>desensitization <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    desensitization <span class="token operator">=</span> beanProperty<span class="token punctuation">.</span><span class="token function">getContextAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Desensitization</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 不为null</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>desensitization <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 创建定义的序列化类的实例并且返回，入参为注解定义的type,开始位置，结束位置。</span>
                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DesensitizationSerialize</span><span class="token punctuation">(</span>desensitization<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> desensitization<span class="token punctuation">.</span><span class="token function">startInclude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                            desensitization<span class="token punctuation">.</span><span class="token function">endExclude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> serializerProvider<span class="token punctuation">.</span><span class="token function">findValueSerializer</span><span class="token punctuation">(</span>beanProperty<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanProperty<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> serializerProvider<span class="token punctuation">.</span><span class="token function">findNullValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过上述三步，已经完成了通过注解实现数据脱敏了，下面我们来测试一下。</p><p>首先定义一个要测试的 pojo，对应的字段加入要脱敏的策略。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 *
 * <span class="token keyword">@description</span>:
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPojo</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Desensitization</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">DesensitizationTypeEnum</span><span class="token punctuation">.</span><span class="token constant">MOBILE_PHONE</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Desensitization</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">DesensitizationTypeEnum</span><span class="token punctuation">.</span><span class="token constant">PASSWORD</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Desensitization</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">DesensitizationTypeEnum</span><span class="token punctuation">.</span><span class="token constant">MY_RULE</span><span class="token punctuation">,</span> startInclude <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> endExclude <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来写一个测试的 controller</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">TestPojo</span> <span class="token function">testDesensitization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">TestPojo</span> testPojo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestPojo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        testPojo<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">&quot;我是用户名&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        testPojo<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">&quot;地球中国-北京市通州区京东总部2号楼&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        testPojo<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span><span class="token string">&quot;13782946666&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        testPojo<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;sunyangwei123123123.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>testPojo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> testPojo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/security/2023-08-02-16-497DdCBy8vbf2D69g.png" alt="" tabindex="0"><figcaption></figcaption></figure><p>可以看到我们成功实现了数据脱敏。</p><h3 id="apache-shardingsphere" tabindex="-1"><a class="header-anchor" href="#apache-shardingsphere"><span>Apache ShardingSphere</span></a></h3><p>ShardingSphere 是一套开源的分布式数据库中间件解决方案组成的生态圈，它由 Sharding-JDBC、Sharding-Proxy 和 Sharding-Sidecar（计划中）这 3 款相互独立的产品组成。 他们均提供标准化的数据分片、分布式事务和数据库治理功能 。</p><p>Apache ShardingSphere 下面存在一个数据脱敏模块，此模块集成的常用的数据脱敏的功能。其基本原理是对用户输入的 SQL 进行解析拦截，并依靠用户的脱敏配置进行 SQL 的改写，从而实现对原文字段的加密及加密字段的解密。最终实现对用户无感的加解密存储、查询。</p><p>通过 Apache ShardingSphere 可以自动化&amp;透明化数据脱敏过程，用户无需关注脱敏中间实现细节。并且，提供了多种内置、第三方(AKS)的脱敏策略，用户仅需简单配置即可使用。</p>`,38),S={href:"https://shardingsphere.apache.org/document/4.1.1/cn/features/orchestration/encrypt/",target:"_blank",rel:"noopener noreferrer"},_=n("h3",{id:"fastjson",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#fastjson"},[n("span",null,"FastJSON")])],-1),j=n("p",null,"平时开发 Web 项目的时候，除了默认的 Spring 自带的序列化工具，FastJson 也是一个很常用的 Spring Web Restful 接口序列化的工具。",-1),D=n("p",null,"FastJSON 实现数据脱敏的方式主要有两种：",-1),z=n("li",null,[s("基于注解 "),n("code",null,"@JSONField"),s(" 实现：需要自定义一个用于脱敏的序列化的类，然后在需要脱敏的字段上通过 "),n("code",null,"@JSONField"),s(" 中的 "),n("code",null,"serializeUsing"),s(" 指定为我们自定义的序列化类型即可。")],-1),E=n("code",null,"ValueFilter",-1),q=n("code",null,"process",-1),P={href:"https://juejin.cn/post/7067916686141161479",target:"_blank",rel:"noopener noreferrer"},A=e(`<h3 id="mybatis-mate" tabindex="-1"><a class="header-anchor" href="#mybatis-mate"><span>Mybatis-mate</span></a></h3><p>MybatisPlus 也提供了数据脱敏模块 mybatis-mate。mybatis-mate 为 MybatisPlus 企业级模块，使用之前需要配置授权码（付费），旨在更敏捷优雅处理数据。</p><p>配置内容如下所示：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment"># Mybatis Mate 配置</span>
<span class="token key atrule">mybatis-mate</span><span class="token punctuation">:</span>
  <span class="token key atrule">cert</span><span class="token punctuation">:</span>
    <span class="token key atrule">grant</span><span class="token punctuation">:</span> jxftsdfggggx
    <span class="token key atrule">license</span><span class="token punctuation">:</span> GKXP9r4MCJhGID/DTGigcBcLmZjb1YZGjE4GXaAoxbtGsPC20sxpEtiUr2F7Nb1ANTUekvF6Syo6DzraA4M4oacwoLVTglzfvaEfadfsd232485eLJK1QsskrSJmreMnEaNh9lsV7Lpbxy9JeGCeM0HPEbRvq8Y+8dUt5bQYLklsa3ZIBexir+4XykZY15uqn1pYIp4pEK0+aINTa57xjJNoWuBIqm7BdFIb4l1TAcPYMTsMXhF5hfMmKD2h391HxWTshJ6jbt4YqdKD167AgeoM+B+DE1jxlLjcpskY+kFs9piOS7RCcmKBBUOgX2BD/JxhR2gQ==
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),C={href:"https://gitee.com/baomidou/mybatis-mate-examples",target:"_blank",rel:"noopener noreferrer"},I=e(`<h3 id="mybatis-flex" tabindex="-1"><a class="header-anchor" href="#mybatis-flex"><span>MyBatis-Flex</span></a></h3><p>类似于 MybatisPlus，MyBatis-Flex 也是一个 MyBatis 增强框架。MyBatis-Flex 同样提供了数据脱敏功能，并且是可以免费使用的。</p><p>MyBatis-Flex 提供了 <code>@ColumnMask()</code> 注解，以及内置的 9 种脱敏规则，开箱即用：</p><ul><li>用户名脱敏</li><li>手机号脱敏</li><li>固定电话脱敏</li><li>身份证号脱敏</li><li>车牌号脱敏</li><li>地址脱敏</li><li>邮件脱敏</li><li>密码脱敏</li><li>银行卡号脱敏</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 内置的数据脱敏方式
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Masks</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 手机号脱敏
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">MOBILE</span> <span class="token operator">=</span> <span class="token string">&quot;mobile&quot;</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 固定电话脱敏
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">FIXED_PHONE</span> <span class="token operator">=</span> <span class="token string">&quot;fixed_phone&quot;</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 身份证号脱敏
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ID_CARD_NUMBER</span> <span class="token operator">=</span> <span class="token string">&quot;id_card_number&quot;</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 中文名脱敏
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">CHINESE_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;chinese_name&quot;</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 地址脱敏
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ADDRESS</span> <span class="token operator">=</span> <span class="token string">&quot;address&quot;</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 邮件脱敏
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">EMAIL</span> <span class="token operator">=</span> <span class="token string">&quot;email&quot;</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 密码脱敏
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PASSWORD</span> <span class="token operator">=</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 车牌号脱敏
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">CAR_LICENSE</span> <span class="token operator">=</span> <span class="token string">&quot;car_license&quot;</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 银行卡号脱敏
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">BANK_CARD_NUMBER</span> <span class="token operator">=</span> <span class="token string">&quot;bank_card_number&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span><span class="token string">&quot;tb_account&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Id</span><span class="token punctuation">(</span>keyType <span class="token operator">=</span> <span class="token class-name">KeyType<span class="token punctuation">.</span>Auto</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ColumnMask</span><span class="token punctuation">(</span><span class="token class-name">Masks</span><span class="token punctuation">.</span><span class="token constant">CHINESE_NAME</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ColumnMask</span><span class="token punctuation">(</span><span class="token class-name">Masks</span><span class="token punctuation">.</span><span class="token constant">EMAIL</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果这些内置的脱敏规则不满足你的要求的话，你还可以自定义脱敏规则。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>本文主要介绍了数据脱敏的相关内容，首先介绍了数据脱敏的概念，在此基础上介绍了常用的数据脱敏规则；随后介绍了本文的重点 Hutool 工具及其使用方法，在此基础上进行了实操，分别演示了使用 DesensitizedUtil 工具类、配合 Jackson 通过注解的方式完成数据脱敏；最后，介绍了一些常见的数据脱敏方法，并附上了对应的教程链接供大家参考，本文内容如有不当之处，还请大家批评指正。</p><h2 id="推荐阅读" tabindex="-1"><a class="header-anchor" href="#推荐阅读"><span>推荐阅读</span></a></h2>`,11),N={href:"https://mp.weixin.qq.com/s/59osrnjyPJ7BV070x6ABwQ",target:"_blank",rel:"noopener noreferrer"},M={href:"https://mp.weixin.qq.com/s/_Dgekk1AJsIx0TTlnH6kUA",target:"_blank",rel:"noopener noreferrer"},T=n("h2",{id:"参考",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考"},[n("span",null,"参考")])],-1),J={href:"https://hutool.cn/docs/#/",target:"_blank",rel:"noopener noreferrer"},R={href:"https://juejin.cn/post/7046567603971719204",target:"_blank",rel:"noopener noreferrer"},O={href:"https://juejin.cn/post/7067916686141161479",target:"_blank",rel:"noopener noreferrer"},B=n("figure",null,[n("img",{src:"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png",alt:"JavaGuide 官方公众号",tabindex:"0"}),n("figcaption",null,"JavaGuide 官方公众号")],-1);function U(H,L){const o=p("RouteLink"),t=p("ExternalLinkIcon");return i(),l("div",null,[n("figure",null,[a(o,{to:"/about-the-author/zhishixingqiu-two-years.html"},{default:u(()=>[d]),_:1}),k]),n("blockquote",null,[n("p",null,[s("本文转载完善自"),n("a",m,[s("Hutool：一行代码搞定数据脱敏 - 京东云开发者"),a(t)]),s("。")])]),v,n("ul",null,[b,g,h,y,n("li",null,[s("加密（常用）：使用加密算法将敏感数据转换为密文。例如，将银行卡号用 MD5 或 SHA-256 等哈希函数进行散列。常见加密算法总结可以参考这篇文章："),n("a",f,[s("https://javaguide.cn/system-design/security/encryption-algorithms.html"),a(t)]),s(" 。")]),w]),x,n("p",null,[s("官方文档地址："),n("a",S,[s("https://shardingsphere.apache.org/document/4.1.1/cn/features/orchestration/encrypt/"),a(t)]),s(" 。")]),_,j,D,n("ul",null,[z,n("li",null,[s("基于序列化过滤器：需要实现 "),E,s(" 接口，重写 "),q,s(" 方法完成自定义脱敏，然后在 JSON 转换时使用自定义的转换策略。具体实现可参考这篇文章： "),n("a",P,[s("https://juejin.cn/post/7067916686141161479"),a(t)]),s("。")])]),A,n("p",null,[s("具体实现可参考 baomidou 提供的如下代码："),n("a",C,[s("https://gitee.com/baomidou/mybatis-mate-examples"),a(t)]),s(" 。")]),I,n("ul",null,[n("li",null,[n("a",N,[s("Spring Boot 日志、配置文件、接口数据如何脱敏？老鸟们都是这样玩的！"),a(t)])]),n("li",null,[n("a",M,[s("大厂也在用的 6 种数据脱敏方案，严防泄露数据的“内鬼”"),a(t)])])]),T,n("ul",null,[n("li",null,[s("Hutool 工具官网： "),n("a",J,[s("https://hutool.cn/docs/#/"),a(t)])]),n("li",null,[s("聊聊如何自定义数据脱敏："),n("a",R,[s("https://juejin.cn/post/7046567603971719204"),a(t)])]),n("li",null,[s("FastJSON 实现数据脱敏："),n("a",O,[s("https://juejin.cn/post/7067916686141161479"),a(t)])])]),B])}const V=c(r,[["render",U],["__file","data-desensitization.html.vue"]]),Y=JSON.parse(`{"path":"/system-design/security/data-desensitization.html","title":"数据脱敏方案总结","lang":"zh-CN","frontmatter":{"title":"数据脱敏方案总结","category":"系统设计","tag":["安全"],"gitInclude":["../../snippets/article-header.snippet.md","../../snippets/article-footer.snippet.md"],"description":"JavaGuide官方知识星球 本文转载完善自Hutool：一行代码搞定数据脱敏 - 京东云开发者。 什么是数据脱敏 数据脱敏的定义 数据脱敏百度百科中是这样定义的： 数据脱敏，指对某些敏感信息通过脱敏规则进行数据的变形，实现敏感隐私数据的可靠保护。这样就可以在开发、测试和其它非生产环境以及外包环境中安全地使用脱敏后的真实数据集。在涉及客户安全数据或者...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/learning/system-design/security/data-desensitization.html"}],["meta",{"property":"og:site_name","content":"Mua'dib Guide "}],["meta",{"property":"og:title","content":"数据脱敏方案总结"}],["meta",{"property":"og:description","content":"JavaGuide官方知识星球 本文转载完善自Hutool：一行代码搞定数据脱敏 - 京东云开发者。 什么是数据脱敏 数据脱敏的定义 数据脱敏百度百科中是这样定义的： 数据脱敏，指对某些敏感信息通过脱敏规则进行数据的变形，实现敏感隐私数据的可靠保护。这样就可以在开发、测试和其它非生产环境以及外包环境中安全地使用脱敏后的真实数据集。在涉及客户安全数据或者..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://oss.javaguide.cn/github/javaguide/system-design/security/2023-08-01-10-2119fnVCIDozqHgRGx.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-31T05:42:06.000Z"}],["meta",{"property":"article:author","content":"Guide"}],["meta",{"property":"article:tag","content":"安全"}],["meta",{"property":"article:modified_time","content":"2024-08-31T05:42:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据脱敏方案总结\\",\\"image\\":[\\"https://oss.javaguide.cn/github/javaguide/system-design/security/2023-08-01-10-2119fnVCIDozqHgRGx.png\\",\\"https://oss.javaguide.cn/github/javaguide/system-design/security/2023-08-02-16-497DdCBy8vbf2D69g.png\\"],\\"dateModified\\":\\"2024-08-31T05:42:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Guide\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"什么是数据脱敏","slug":"什么是数据脱敏","link":"#什么是数据脱敏","children":[{"level":3,"title":"数据脱敏的定义","slug":"数据脱敏的定义","link":"#数据脱敏的定义","children":[]},{"level":3,"title":"常用脱敏规则","slug":"常用脱敏规则","link":"#常用脱敏规则","children":[]}]},{"level":2,"title":"常用脱敏工具","slug":"常用脱敏工具","link":"#常用脱敏工具","children":[{"level":3,"title":"Hutool","slug":"hutool","link":"#hutool","children":[]},{"level":3,"title":"Apache ShardingSphere","slug":"apache-shardingsphere","link":"#apache-shardingsphere","children":[]},{"level":3,"title":"FastJSON","slug":"fastjson","link":"#fastjson","children":[]},{"level":3,"title":"Mybatis-mate","slug":"mybatis-mate","link":"#mybatis-mate","children":[]},{"level":3,"title":"MyBatis-Flex","slug":"mybatis-flex","link":"#mybatis-flex","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"推荐阅读","slug":"推荐阅读","link":"#推荐阅读","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1725082926000,"updatedTime":1725082926000,"contributors":[{"name":"Tony Gong","email":"a280880907@163.com","commits":1}]},"readingTime":{"minutes":11.44,"words":3431},"filePathRelative":"system-design/security/data-desensitization.md","localizedDate":"2024年8月31日","excerpt":"<figure><a href=\\"/learning/about-the-author/zhishixingqiu-two-years.html\\" target=\\"_blank\\"><img src=\\"https://oss.javaguide.cn/xingqiu/xingqiu.png\\" alt=\\"JavaGuide官方知识星球\\" tabindex=\\"0\\"></a><figcaption>JavaGuide官方知识星球</figcaption></figure>\\n<blockquote>\\n<p>本文转载完善自<a href=\\"https://mp.weixin.qq.com/s/1qFWczesU50ndPPLtABHFg\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Hutool：一行代码搞定数据脱敏 - 京东云开发者</a>。</p>\\n</blockquote>","autoDesc":true}`);export{V as comp,Y as data};
