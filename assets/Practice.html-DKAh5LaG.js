import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as i,c,a as n,b as s,d as e,e as t}from"./app-ChWUTpfW.js";const l={},r=n("h2",{id:"leetcode",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#leetcode"},[n("span",null,"LeetCode")])],-1),u=n("p",null,[n("strong",null,"以下是出自LeetCode题目，为作者个人练习记录使用，非商业目的")],-1),d={href:"https://leetcode.cn/problems/text-justification/description/?envType=study-plan-v2&envId=top-interview-150",target:"_blank",rel:"noopener noreferrer"},k=n("blockquote",null,[n("p",null,[s("hard"),n("br"),s(" 思路：模拟")])],-1),v=t(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">fullJustify</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> words<span class="token punctuation">,</span> maxWidth<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        :type words: List[str]
        :type maxWidth: int
        :rtype: List[str]
        &quot;&quot;&quot;</span>
        templen<span class="token operator">=</span><span class="token number">0</span>
        index1<span class="token operator">=</span><span class="token number">0</span>
        index2<span class="token operator">=</span><span class="token number">0</span>
        res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">while</span> index2<span class="token operator">&lt;</span><span class="token builtin">len</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">:</span>
            word<span class="token operator">=</span>words<span class="token punctuation">[</span>index2<span class="token punctuation">]</span>
            templen<span class="token operator">+=</span><span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span>
            <span class="token keyword">if</span> templen<span class="token operator">+</span><span class="token punctuation">(</span>index2<span class="token operator">-</span>index1<span class="token punctuation">)</span><span class="token operator">&lt;=</span>maxWidth<span class="token punctuation">:</span>
                index2<span class="token operator">+=</span><span class="token number">1</span>
                <span class="token keyword">if</span> index2<span class="token operator">==</span><span class="token builtin">len</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    index2<span class="token operator">-=</span><span class="token number">1</span>
                    redundant<span class="token operator">=</span>maxWidth<span class="token operator">-</span><span class="token punctuation">(</span>templen<span class="token operator">+</span>index2<span class="token operator">-</span>index1<span class="token punctuation">)</span>
                    space_allot<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
                    <span class="token keyword">if</span> index2<span class="token operator">==</span>index1<span class="token punctuation">:</span>
                        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>words<span class="token punctuation">[</span>index1<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">&quot; &quot;</span><span class="token operator">*</span><span class="token punctuation">(</span>redundant<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">else</span><span class="token punctuation">:</span>
                        str_temp<span class="token operator">=</span><span class="token string">&quot;&quot;</span>
                        str_temp<span class="token operator">+=</span>words<span class="token punctuation">[</span>index1<span class="token punctuation">]</span>
                        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>index1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>index2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                            str_temp<span class="token operator">+=</span><span class="token string">&quot; &quot;</span><span class="token operator">+</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                        str_temp<span class="token operator">+=</span><span class="token string">&quot; &quot;</span><span class="token operator">*</span>redundant
                        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>str_temp<span class="token punctuation">)</span>
                    index2<span class="token operator">=</span>index2<span class="token operator">+</span><span class="token number">1</span>
                    index1<span class="token operator">=</span>index2
                    templen<span class="token operator">=</span><span class="token number">0</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                index2<span class="token operator">-=</span><span class="token number">1</span>
                templen<span class="token operator">-=</span><span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span>
                redundant<span class="token operator">=</span>maxWidth<span class="token operator">-</span><span class="token punctuation">(</span>templen<span class="token operator">+</span>index2<span class="token operator">-</span>index1<span class="token punctuation">)</span>
                space_allot<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
                <span class="token keyword">if</span> index2<span class="token operator">==</span>index1<span class="token punctuation">:</span>
                    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>words<span class="token punctuation">[</span>index1<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">&quot; &quot;</span><span class="token operator">*</span><span class="token punctuation">(</span>redundant<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    quotient<span class="token operator">=</span>redundant<span class="token operator">//</span><span class="token punctuation">(</span>index2<span class="token operator">-</span>index1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>
                    remainder<span class="token operator">=</span>redundant<span class="token operator">%</span><span class="token punctuation">(</span>index2<span class="token operator">-</span>index1<span class="token punctuation">)</span>
                    str_temp<span class="token operator">=</span><span class="token string">&quot;&quot;</span>
                    str_temp<span class="token operator">+=</span>words<span class="token punctuation">[</span>index1<span class="token punctuation">]</span>
                    <span class="token keyword">if</span> remainder<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>
                        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>index1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>index2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                            str_temp<span class="token operator">+=</span><span class="token string">&quot; &quot;</span><span class="token operator">*</span>quotient<span class="token operator">+</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>str_temp<span class="token punctuation">)</span>
                    <span class="token keyword">else</span><span class="token punctuation">:</span>
                        temp_remain<span class="token operator">=</span><span class="token number">1</span>
                        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>index1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>index2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                            <span class="token keyword">if</span> temp_remain<span class="token operator">&lt;=</span>remainder<span class="token punctuation">:</span>
                                str_temp<span class="token operator">+=</span><span class="token string">&quot; &quot;</span><span class="token operator">*</span><span class="token punctuation">(</span>quotient<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                                temp_remain<span class="token operator">+=</span><span class="token number">1</span>
                            <span class="token keyword">else</span><span class="token punctuation">:</span>
                                str_temp<span class="token operator">+=</span><span class="token string">&quot; &quot;</span><span class="token operator">*</span>quotient<span class="token operator">+</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>str_temp<span class="token punctuation">)</span>
                index2<span class="token operator">=</span>index2<span class="token operator">+</span><span class="token number">1</span>
                index1<span class="token operator">=</span>index2
                templen<span class="token operator">=</span><span class="token number">0</span>
        <span class="token keyword">return</span> res

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),m={start:"2"},b={href:"https://leetcode.cn/problems/substring-with-concatenation-of-all-words/description/?envType=study-plan-v2&envId=top-interview-150",target:"_blank",rel:"noopener noreferrer"},w=n("blockquote",null,[n("p",null,"滑动窗口")],-1),y=t(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">findSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> words<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        :type s: str
        :type words: List[str]
        :rtype: List[int]
        &quot;&quot;&quot;</span>
        slide<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        left<span class="token operator">=</span><span class="token number">0</span>
        right<span class="token operator">=</span>left<span class="token operator">+</span>slide<span class="token operator">-</span><span class="token number">1</span>
        res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>

        oridiffer<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

        <span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>
            <span class="token keyword">if</span> word <span class="token keyword">in</span> oridiffer<span class="token punctuation">:</span>
                oridiffer<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                oridiffer<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>

        differ<span class="token operator">=</span>self<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>oridiffer<span class="token punctuation">)</span>
        <span class="token keyword">while</span> right<span class="token operator">&lt;</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>

            temp_word<span class="token operator">=</span>s<span class="token punctuation">[</span>right<span class="token operator">-</span>slide<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
            <span class="token keyword">if</span> temp_word <span class="token keyword">in</span> differ<span class="token punctuation">:</span>
                differ<span class="token punctuation">[</span>temp_word<span class="token punctuation">]</span><span class="token operator">-=</span><span class="token number">1</span>
                <span class="token keyword">if</span> differ<span class="token punctuation">[</span>temp_word<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>
                    <span class="token keyword">del</span> differ<span class="token punctuation">[</span>temp_word<span class="token punctuation">]</span>
                <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>differ<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>
                    differ<span class="token operator">=</span>self<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>oridiffer<span class="token punctuation">)</span>
                    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>left<span class="token punctuation">)</span>
                    left<span class="token operator">+=</span><span class="token number">1</span>
                    right<span class="token operator">=</span>left<span class="token operator">+</span>slide<span class="token operator">-</span><span class="token number">1</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    right<span class="token operator">+=</span>slide
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                differ<span class="token operator">=</span>self<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>oridiffer<span class="token punctuation">)</span>
                left<span class="token operator">+=</span><span class="token number">1</span>
                right<span class="token operator">=</span>left<span class="token operator">+</span>slide<span class="token operator">-</span><span class="token number">1</span>
        <span class="token keyword">return</span> res
    <span class="token keyword">def</span> <span class="token function">deepcopy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>lst<span class="token punctuation">)</span><span class="token punctuation">:</span>
        res<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">for</span> key <span class="token keyword">in</span> lst<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            res<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">=</span>lst<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
        <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),f={start:"3"},h={href:"https://leetcode.cn/problems/word-ladder/?envType=study-plan-v2&envId=top-interview-150",target:"_blank",rel:"noopener noreferrer"},g=t(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">ladderLength</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> beginWord<span class="token punctuation">,</span> endWord<span class="token punctuation">,</span> wordList<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: int
        &quot;&quot;&quot;</span>

        <span class="token keyword">if</span> endWord <span class="token keyword">not</span> <span class="token keyword">in</span> wordList<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span>
        wordList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>beginWord<span class="token punctuation">)</span>
        wordList<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
        n<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>wordList<span class="token punctuation">)</span>
        parent <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n
        depth<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n
        word_len<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>beginWord<span class="token punctuation">)</span>
        edges<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
                differ <span class="token operator">=</span> <span class="token number">0</span>
                <span class="token keyword">for</span> z <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>word_len<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">if</span> wordList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token operator">!=</span>wordList<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">:</span>
                        differ<span class="token operator">+=</span><span class="token number">1</span>
                        <span class="token keyword">if</span> differ<span class="token operator">&gt;=</span><span class="token number">2</span><span class="token punctuation">:</span>
                            <span class="token keyword">break</span>
                <span class="token keyword">if</span> differ<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>
                    edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>
                    edges<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>
        beginindex<span class="token operator">=</span>wordList<span class="token punctuation">.</span>index<span class="token punctuation">(</span>beginWord<span class="token punctuation">)</span>
        endindex<span class="token operator">=</span>wordList<span class="token punctuation">.</span>index<span class="token punctuation">(</span>endWord<span class="token punctuation">)</span>
        depth<span class="token punctuation">[</span>beginindex<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>

        visited<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
        tovisit<span class="token operator">=</span><span class="token punctuation">[</span>beginindex<span class="token punctuation">]</span>
        <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tovisit<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>
            currentindex<span class="token operator">=</span>tovisit<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

            <span class="token keyword">if</span> currentindex<span class="token operator">==</span>endindex<span class="token punctuation">:</span>
                <span class="token keyword">return</span> depth<span class="token punctuation">[</span>currentindex<span class="token punctuation">]</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> edges<span class="token punctuation">[</span>currentindex<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span> <span class="token keyword">and</span> i <span class="token keyword">not</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span>
                    parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>currentindex
                    depth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>depth<span class="token punctuation">[</span>currentindex<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span>
                    tovisit<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
                    visited<span class="token punctuation">.</span>append<span class="token punctuation">(</span>currentindex<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>单词之间的关系可以建立图分析<br> 例如对于单词 hit，我们创建三个虚拟节点 *it、h*t、hi*，并让 hit 向这三个虚拟节点分别连一条边即可.<br> 用这些虚拟节点和word节点连接</p></blockquote>`,2);function x(_,q){const a=o("ExternalLinkIcon");return i(),c("div",null,[r,u,n("ol",null,[n("li",null,[n("a",d,[s("文本左右对齐"),e(a)]),k])]),v,n("ol",m,[n("li",null,[n("a",b,[s("串联所有单词的子串"),e(a)]),w])]),y,n("ol",f,[n("li",null,[n("a",h,[s("单词接龙"),e(a)])])]),g])}const j=p(l,[["render",x],["__file","Practice.html.vue"]]),C=JSON.parse(`{"path":"/cs-basics/algorithms/Practice.html","title":"算法训练","lang":"zh-CN","frontmatter":{"title":"算法训练","category":"计算机基础","tag":["算法"],"description":"LeetCode 以下是出自LeetCode题目，为作者个人练习记录使用，非商业目的 文本左右对齐 hard 思路：模拟 串联所有单词的子串 滑动窗口 单词接龙 单词之间的关系可以建立图分析 例如对于单词 hit，我们创建三个虚拟节点 *it、h*t、hi*，并让 hit 向这三个虚拟节点分别连一条边即可. 用这些虚拟节点和word节点连接","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/learning/cs-basics/algorithms/Practice.html"}],["meta",{"property":"og:site_name","content":"Mua'dib Guide "}],["meta",{"property":"og:title","content":"算法训练"}],["meta",{"property":"og:description","content":"LeetCode 以下是出自LeetCode题目，为作者个人练习记录使用，非商业目的 文本左右对齐 hard 思路：模拟 串联所有单词的子串 滑动窗口 单词接龙 单词之间的关系可以建立图分析 例如对于单词 hit，我们创建三个虚拟节点 *it、h*t、hi*，并让 hit 向这三个虚拟节点分别连一条边即可. 用这些虚拟节点和word节点连接"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-31T05:42:06.000Z"}],["meta",{"property":"article:author","content":"Guide"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:modified_time","content":"2024-08-31T05:42:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"算法训练\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-31T05:42:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Guide\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"LeetCode","slug":"leetcode","link":"#leetcode","children":[]}],"git":{"createdTime":1725082926000,"updatedTime":1725082926000,"contributors":[{"name":"Tony Gong","email":"a280880907@163.com","commits":1}]},"readingTime":{"minutes":2.07,"words":620},"filePathRelative":"cs-basics/algorithms/Practice.md","localizedDate":"2024年8月31日","excerpt":"<h2>LeetCode</h2>\\n<p><strong>以下是出自LeetCode题目，为作者个人练习记录使用，非商业目的</strong></p>\\n<ol>\\n<li><a href=\\"https://leetcode.cn/problems/text-justification/description/?envType=study-plan-v2&amp;envId=top-interview-150\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">文本左右对齐</a>\\n<blockquote>\\n<p>hard<br>\\n思路：模拟</p>\\n</blockquote>\\n</li>\\n</ol>","autoDesc":true}`);export{j as comp,C as data};
