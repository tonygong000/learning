import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-Dl67cLp_.js";const p={},e=t(`<h2 id="表达式树" tabindex="-1"><a class="header-anchor" href="#表达式树"><span>表达式树</span></a></h2><p>表达式树由一系列表达式节点（Expression Node）组成，每个节点表示代码中的一个操作或值。这些节点有不同的类型，例如：</p><h2 id="查询表达式" tabindex="-1"><a class="header-anchor" href="#查询表达式"><span>查询表达式</span></a></h2><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name">IQueryable<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> <span class="token function">SearchObjects</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> funcName<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> objs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AppException</span><span class="token punctuation">(</span><span class="token string">&quot;未设置数据库连接上下文&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>searchDic<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>funcName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AppException</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;未能找到 </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">funcName</span><span class="token punctuation">}</span></span><span class="token string"> 查询函数&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> objQuery <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InterceptWith</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">InjectArrayVisitor</span><span class="token punctuation">(</span>objs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InjectConditionVisitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>DelDate <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">OrderByDescending</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>CreateDate<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> searchDic<span class="token punctuation">[</span>funcName<span class="token punctuation">]</span><span class="token punctuation">(</span>objQuery<span class="token punctuation">,</span> objs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义的表达式访问器" tabindex="-1"><a class="header-anchor" href="#自定义的表达式访问器"><span>自定义的表达式访问器</span></a></h3><p>主要作用是在表达式树中找到特定类型的表达式节点，并替换这些节点的值。具体来说，它用于处理数组索引表达式，并将这些索引表达式替换为数组中的实际值。</p><p>作用：</p><ul><li><p>动态生成查询：在一些场景中，你可能需要动态生成或修改查询。使用表达式访问器可以在运行时对查询进行复杂的修改，而不是在编译时决定查询的所有细节。</p></li><li><p>通用方法：如果有很多类似的查询需要执行，使用表达式访问器可以封装和复用查询修改逻辑。这样可以避免在每个查询中重复相同的代码。</p></li><li><p>复杂条件注入：当查询条件不仅仅是简单的数组索引获取，而是包含更多复杂的逻辑时，表达式访问器可以帮助你处理这些复杂的逻辑。</p></li><li><p>分层结构的查询：在分层结构或多个层次的查询中，访问器可以用于在表达式树的不同层次进行操作和修改。</p></li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">namespace</span> <span class="token namespace">HiSys<span class="token punctuation">.</span>Utitlizes</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InjectArrayVisitor</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ExpressionVisitor</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> parameters<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">Expression</span> parentExp<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token function">InjectArrayVisitor</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> pamas<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            parameters <span class="token operator">=</span> pamas<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token function">InjectArrayVisitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            parameters <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">Expression</span> <span class="token function">VisitUnary</span><span class="token punctuation">(</span><span class="token class-name">UnaryExpression</span> node<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>NodeType <span class="token operator">==</span> ExpressionType<span class="token punctuation">.</span>Convert<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> ex <span class="token operator">=</span> node<span class="token punctuation">.</span>Operand <span class="token keyword">as</span> <span class="token class-name">BinaryExpression</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>ex<span class="token punctuation">.</span>NodeType <span class="token operator">==</span> ExpressionType<span class="token punctuation">.</span>ArrayIndex <span class="token operator">&amp;&amp;</span> ex<span class="token punctuation">.</span>Right<span class="token punctuation">.</span>NodeType <span class="token operator">==</span> ExpressionType<span class="token punctuation">.</span>Constant <span class="token operator">&amp;&amp;</span> ex<span class="token punctuation">.</span>Right<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;Int32&quot;</span> <span class="token operator">&amp;&amp;</span> ex<span class="token punctuation">.</span>Left<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;Object[]&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>Right <span class="token keyword">as</span> <span class="token class-name">ConstantExpression</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> parameters<span class="token punctuation">.</span>Length<span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        <span class="token class-name"><span class="token keyword">var</span></span> val <span class="token operator">=</span> parameters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                        <span class="token class-name"><span class="token keyword">var</span></span> valueProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValueProviderResult</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> val<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CultureInfo<span class="token punctuation">.</span>CurrentCulture<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">return</span> Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span>valueProvider<span class="token punctuation">.</span><span class="token function">ConvertTo</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>Type<span class="token punctuation">)</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>Type<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span>
                        <span class="token keyword">return</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">VisitUnary</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">VisitUnary</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//遍历表达式树，查找所有的类型转换操作（ExpressionType.Convert）。</span>
        <span class="token comment">//检查被转换的表达式是否是数组索引操作（如 (decimal)parameters[0]）。</span>
        <span class="token comment">//获取数组索引的值，并从 parameters 数组中提取相应的参数值。</span>
        <span class="token comment">//使用提取的参数值创建一个新的常量表达式，并替换原始的数组索引表达式。</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="搜索方法" tabindex="-1"><a class="header-anchor" href="#搜索方法"><span>搜索方法</span></a></h2><h3 id="条件搜索" tabindex="-1"><a class="header-anchor" href="#条件搜索"><span>条件搜索</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name">IQueryable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">SearchObjects</span><span class="token punctuation">(</span><span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> condition<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AppException</span><span class="token punctuation">(</span><span class="token string">&quot;未设置数据库连接上下文&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> objQuery <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span>
            objQuery<span class="token operator">=</span>objQuery<span class="token punctuation">.</span><span class="token function">InterceptWith</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">InjectConditionVisitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">BaseEntity</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsAssignableFrom</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                objQuery <span class="token operator">=</span> objQuery<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>DelDate <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> objQuery<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="委托类型" tabindex="-1"><a class="header-anchor" href="#委托类型"><span>委托类型</span></a></h2><p>作用：</p><ol><li><p>动态查询<br> 委托类型允许在运行时动态定义和更改查询逻辑。这样可以根据具体需求动态生成查询，而不需要在编译时确定所有可能的查询方式。</p></li><li><p>可扩展性<br> 通过使用委托，可以轻松地添加新的查询逻辑，而不需要修改现有代码结构。只需创建新的委托并将其添加到字典中即可，这样新功能可以与旧功能共存。</p></li><li><p>高度可重用性<br> 委托类型使得查询逻辑可以被重用。不同的查询逻辑可以在不同的上下文中被复用，而不需要重复代码。这样减少了代码冗余并提高了代码的可维护性。</p></li><li><p>松耦合<br> 使用委托使得方法之间的耦合度降低。调用方和具体的实现逻辑之间通过委托进行解耦，这样调用方不需要知道具体的实现细节，只需要知道如何调用委托。</p></li><li><p>灵活性<br> 委托类型提供了极大的灵活性，可以根据需要传递不同的参数、执行不同的逻辑。比如，在搜索功能中，可以传递不同的参数来改变搜索的行为，而不需要修改方法签名。</p></li></ol><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddSearchFunc</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> funcName<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>IQueryable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> IQueryable<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> funcBody<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>funcName <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> funcBody <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>searchDic<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>funcName<span class="token punctuation">)</span><span class="token punctuation">)</span>
                searchDic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>funcName<span class="token punctuation">,</span> funcBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
 <span class="token class-name">Func<span class="token punctuation">&lt;</span>IQueryable<span class="token punctuation">&lt;</span>Product<span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> IQueryable<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> searchByName <span class="token operator">=</span> <span class="token punctuation">(</span>query<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">string</span></span> name <span class="token operator">=</span> parameters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token class-name"><span class="token keyword">string</span></span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> query<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Cast</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","WebAPI.html.vue"]]),d=JSON.parse(`{"path":"/projects/WebAPI.html","title":"大创项目","lang":"zh-CN","frontmatter":{"title":"大创项目","description":"表达式树 表达式树由一系列表达式节点（Expression Node）组成，每个节点表示代码中的一个操作或值。这些节点有不同的类型，例如： 查询表达式 自定义的表达式访问器 主要作用是在表达式树中找到特定类型的表达式节点，并替换这些节点的值。具体来说，它用于处理数组索引表达式，并将这些索引表达式替换为数组中的实际值。 作用： 动态生成查询：在一些场景中...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/learning/projects/WebAPI.html"}],["meta",{"property":"og:site_name","content":"Mua'dib Guide "}],["meta",{"property":"og:title","content":"大创项目"}],["meta",{"property":"og:description","content":"表达式树 表达式树由一系列表达式节点（Expression Node）组成，每个节点表示代码中的一个操作或值。这些节点有不同的类型，例如： 查询表达式 自定义的表达式访问器 主要作用是在表达式树中找到特定类型的表达式节点，并替换这些节点的值。具体来说，它用于处理数组索引表达式，并将这些索引表达式替换为数组中的实际值。 作用： 动态生成查询：在一些场景中..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-01T15:53:32.000Z"}],["meta",{"property":"article:author","content":"Guide"}],["meta",{"property":"article:modified_time","content":"2024-07-01T15:53:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"大创项目\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-01T15:53:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Guide\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"表达式树","slug":"表达式树","link":"#表达式树","children":[]},{"level":2,"title":"查询表达式","slug":"查询表达式","link":"#查询表达式","children":[{"level":3,"title":"自定义的表达式访问器","slug":"自定义的表达式访问器","link":"#自定义的表达式访问器","children":[]}]},{"level":2,"title":"搜索方法","slug":"搜索方法","link":"#搜索方法","children":[{"level":3,"title":"条件搜索","slug":"条件搜索","link":"#条件搜索","children":[]}]},{"level":2,"title":"委托类型","slug":"委托类型","link":"#委托类型","children":[]}],"git":{"createdTime":1719846129000,"updatedTime":1719849212000,"contributors":[{"name":"tonygong","email":"280880907@163.com","commits":3}]},"readingTime":{"minutes":3.51,"words":1054},"filePathRelative":"projects/WebAPI.md","localizedDate":"2024年7月1日","excerpt":"<h2>表达式树</h2>\\n<p>表达式树由一系列表达式节点（Expression Node）组成，每个节点表示代码中的一个操作或值。这些节点有不同的类型，例如：</p>\\n<h2>查询表达式</h2>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\">IQueryable<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">object</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">SearchObjects</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> funcName<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">params</span> <span class=\\"token class-name\\"><span class=\\"token keyword\\">object</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span></span> objs<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>context <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">AppException</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"未设置数据库连接上下文\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>searchDic<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ContainsKey</span><span class=\\"token punctuation\\">(</span>funcName<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">AppException</span><span class=\\"token punctuation\\">(</span><span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"未能找到 </span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">funcName</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\"> 查询函数\\"</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> objQuery <span class=\\"token operator\\">=</span> context<span class=\\"token punctuation\\">.</span><span class=\\"token generic-method\\"><span class=\\"token function\\">Set</span><span class=\\"token generic class-name\\"><span class=\\"token punctuation\\">&lt;</span>T<span class=\\"token punctuation\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">InterceptWith</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">InjectArrayVisitor</span><span class=\\"token punctuation\\">(</span>objs<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">InjectConditionVisitor</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n                        <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Where</span><span class=\\"token punctuation\\">(</span>x <span class=\\"token operator\\">=&gt;</span> x<span class=\\"token punctuation\\">.</span>DelDate <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span>\\n                        <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">OrderByDescending</span><span class=\\"token punctuation\\">(</span>x <span class=\\"token operator\\">=&gt;</span> x<span class=\\"token punctuation\\">.</span>CreateDate<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">return</span> searchDic<span class=\\"token punctuation\\">[</span>funcName<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">(</span>objQuery<span class=\\"token punctuation\\">,</span> objs<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre></div>","autoDesc":true}`);export{r as comp,d as data};
