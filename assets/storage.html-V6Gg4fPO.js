import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as s,e}from"./app-ChWUTpfW.js";const t={},o=e(`<h2 id="localstorage和sessionstorage" tabindex="-1"><a class="header-anchor" href="#localstorage和sessionstorage"><span>localStorage和sessionStorage</span></a></h2><p>Web 存储对象 localStorage 和 sessionStorage 允许我们在浏览器上保存键/值对。</p><p>它们有趣的是，在页面刷新后（对于 sessionStorage）甚至浏览器完全重启（对于 localStorage）后，数据仍然保留在浏览器中。我们很快就会看到。</p><h3 id="我们已经有了-cookie。为什么还要其他存储对象呢" tabindex="-1"><a class="header-anchor" href="#我们已经有了-cookie。为什么还要其他存储对象呢"><span>我们已经有了 cookie。为什么还要其他存储对象呢？</span></a></h3><p>与 cookie 不同，Web 存储对象不会随每个请求被发送到服务器。因此，我们可以保存更多数据。大多数现代浏览器都允许保存至少 5MB 的数据（或更多），并且具有用于配置数据的设置。</p><p>还有一点和 cookie 不同，服务器无法通过 HTTP header 操纵存储对象。一切都是在 JavaScript 中完成的。</p><p>存储绑定到源（域/协议/端口三者）。也就是说，不同协议或子域对应不同的存储对象，它们之间无法访问彼此数据。</p><h3 id="方法和属性" tabindex="-1"><a class="header-anchor" href="#方法和属性"><span>方法和属性</span></a></h3><ul><li>setItem(key, value) —— 存储键/值对。</li><li>getItem(key) —— 按照键获取值。</li><li>removeItem(key) —— 删除键及其对应的值。</li><li>clear() —— 删除所有数据。</li><li>key(index) —— 获取该索引下的键名。</li><li>length —— 存储的内容的长度。</li></ul><h2 id="localstorage" tabindex="-1"><a class="header-anchor" href="#localstorage"><span>localStorage</span></a></h2><ul><li>在同源的所有标签页和窗口之间共享数据。</li><li>数据不会过期。它在浏览器重启甚至系统重启后仍然存在。</li></ul><h3 id="遍历键" tabindex="-1"><a class="header-anchor" href="#遍历键"><span>遍历键</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> localStorage<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> key <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sessionstorage" tabindex="-1"><a class="header-anchor" href="#sessionstorage"><span>sessionStorage</span></a></h2><ul><li>sessionStorage 的数据只存在于当前浏览器标签页。 <ul><li>具有相同页面的另一个标签页中将会有不同的存储。</li><li>但是，它在同一标签页下的 iframe 之间是共享的（假如它们来自相同的源）。</li></ul></li><li>数据在页面刷新后仍然保留，但在关闭/重新打开浏览器标签页后不会被保留。 <blockquote><p>Vue组件之间可以共享sessionStorage中的数据。<br> sessionStorage是存储在浏览器中的，可以在同一浏览器窗口tab会话期间被所有的组件访问和共享</p></blockquote></li></ul><h2 id="storage事件" tabindex="-1"><a class="header-anchor" href="#storage事件"><span>Storage事件</span></a></h2><p>当 localStorage 或 sessionStorage 中的数据更新后，storage 事件就会触发，它具有以下属性：</p><ul><li>key —— 发生更改的数据的 key（如果调用的是 .clear() 方法，则为 null）。</li><li>oldValue —— 旧值（如果是新增数据，则为 null）。</li><li>newValue —— 新值（如果是删除数据，则为 null）。</li><li>url —— 发生数据更新的文档的 url。</li><li>storageArea —— 发生数据更新的 localStorage 或 sessionStorage 对象。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 在其他文档对同一存储进行更新时触发</span>
window<span class="token punctuation">.</span><span class="token function-variable function">onstorage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 也可以使用 window.addEventListener(&#39;storage&#39;, event =&gt; {</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>key <span class="token operator">!=</span> <span class="token string">&quot;now&quot;</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>key <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> event<span class="token punctuation">.</span>newValue <span class="token operator">+</span> <span class="token string">&quot; at &quot;</span> <span class="token operator">+</span> event<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&quot;now&quot;</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>window是浏览器的全局对象</p><ul><li>全局变量和方法: 你可以像在普通的JavaScript中一样使用window对象来访问全局变量和方法，比如window.alert()。</li><li>事件监听器: 你可以使用window.addEventListener()来添加全局的事件监听器，比如监听resize事件。</li><li>浏览器API: 一些浏览器提供的API也是通过window对象访问的，比如<strong>window.localStorage</strong>和<strong>window.sessionStorage</strong>用于访问本地存储和会话存储。</li></ul></blockquote>`,20),l=[o];function i(p,c){return n(),s("div",null,l)}const d=a(t,[["render",i],["__file","storage.html.vue"]]),g=JSON.parse(`{"path":"/system-design/framework/vue/storage.html","title":"vue中storage解析","lang":"zh-CN","frontmatter":{"title":"vue中storage解析","category":"vue","description":"localStorage和sessionStorage Web 存储对象 localStorage 和 sessionStorage 允许我们在浏览器上保存键/值对。 它们有趣的是，在页面刷新后（对于 sessionStorage）甚至浏览器完全重启（对于 localStorage）后，数据仍然保留在浏览器中。我们很快就会看到。 我们已经有了 cook...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/learning/system-design/framework/vue/storage.html"}],["meta",{"property":"og:site_name","content":"Mua'dib Guide "}],["meta",{"property":"og:title","content":"vue中storage解析"}],["meta",{"property":"og:description","content":"localStorage和sessionStorage Web 存储对象 localStorage 和 sessionStorage 允许我们在浏览器上保存键/值对。 它们有趣的是，在页面刷新后（对于 sessionStorage）甚至浏览器完全重启（对于 localStorage）后，数据仍然保留在浏览器中。我们很快就会看到。 我们已经有了 cook..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-31T05:42:06.000Z"}],["meta",{"property":"article:author","content":"Guide"}],["meta",{"property":"article:modified_time","content":"2024-08-31T05:42:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"vue中storage解析\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-31T05:42:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Guide\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"localStorage和sessionStorage","slug":"localstorage和sessionstorage","link":"#localstorage和sessionstorage","children":[{"level":3,"title":"我们已经有了 cookie。为什么还要其他存储对象呢？","slug":"我们已经有了-cookie。为什么还要其他存储对象呢","link":"#我们已经有了-cookie。为什么还要其他存储对象呢","children":[]},{"level":3,"title":"方法和属性","slug":"方法和属性","link":"#方法和属性","children":[]}]},{"level":2,"title":"localStorage","slug":"localstorage","link":"#localstorage","children":[{"level":3,"title":"遍历键","slug":"遍历键","link":"#遍历键","children":[]}]},{"level":2,"title":"sessionStorage","slug":"sessionstorage","link":"#sessionstorage","children":[]},{"level":2,"title":"Storage事件","slug":"storage事件","link":"#storage事件","children":[]}],"git":{"createdTime":1725082926000,"updatedTime":1725082926000,"contributors":[{"name":"Tony Gong","email":"a280880907@163.com","commits":1}]},"readingTime":{"minutes":2.61,"words":782},"filePathRelative":"system-design/framework/vue/storage.md","localizedDate":"2024年8月31日","excerpt":"<h2>localStorage和sessionStorage</h2>\\n<p>Web 存储对象 localStorage 和 sessionStorage 允许我们在浏览器上保存键/值对。</p>\\n<p>它们有趣的是，在页面刷新后（对于 sessionStorage）甚至浏览器完全重启（对于 localStorage）后，数据仍然保留在浏览器中。我们很快就会看到。</p>\\n<h3>我们已经有了 cookie。为什么还要其他存储对象呢？</h3>\\n<p>与 cookie 不同，Web 存储对象不会随每个请求被发送到服务器。因此，我们可以保存更多数据。大多数现代浏览器都允许保存至少 5MB 的数据（或更多），并且具有用于配置数据的设置。</p>","autoDesc":true}`);export{d as comp,g as data};
