import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c,a as s,b as n,d as p,e}from"./app-C4hTQQaE.js";const i={},u=e(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>近几年针对 Redis 面试时会涉及常见数据结构的底层设计，其中就有这么一道比较有意思的面试题：“Redis 的有序集合底层为什么要用跳表，而不用平衡树、红黑树或者 B+树？”。</p><p>本文就以这道大厂常问的面试题为切入点，带大家详细了解一下跳表这个数据结构。</p><p>本文整体脉络如下图所示，笔者会从有序集合的基本使用到跳表的源码分析和实现，让你会对 Redis 的有序集合底层实现的跳表有着更深刻的理解和掌握。</p><figure><img src="https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005468.png" alt="" tabindex="0"><figcaption></figcaption></figure><h2 id="跳表在-redis-中的运用" tabindex="-1"><a class="header-anchor" href="#跳表在-redis-中的运用"><span>跳表在 Redis 中的运用</span></a></h2><p>这里我们需要先了解一下 Redis 用到跳表的数据结构有序集合的使用，Redis 有个比较常用的数据结构叫<strong>有序集合(sorted set，简称 zset)</strong>，正如其名它是一个可以保证有序且元素唯一的集合，所以它经常用于排行榜等需要进行统计排列的场景。</p><p>这里我们通过命令行的形式演示一下排行榜的实现，可以看到笔者分别输入 3 名用户：<strong>xiaoming</strong>、<strong>xiaohong</strong>、<strong>xiaowang</strong>，它们的<strong>score</strong>分别是 60、80、60，最终按照成绩升级降序排列。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zadd rankList <span class="token number">60</span> xiaoming
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zadd rankList <span class="token number">80</span> xiaohong
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zadd rankList <span class="token number">60</span> xiaowang
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>

<span class="token comment"># 返回有序集中指定区间内的成员，通过索引，分数从高到低</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZREVRANGE rankList <span class="token number">0</span> <span class="token number">100</span> WITHSCORES
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;xiaohong&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;80&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;xiaowang&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;60&quot;</span>
<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">&quot;xiaoming&quot;</span>
<span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">&quot;60&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时我们通过 <code>object</code> 指令查看 zset 的数据结构，可以看到当前有序集合存储的还是是<strong>ziplist(压缩列表)</strong>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> object encoding rankList
<span class="token string">&quot;ziplist&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>因为设计者考虑到 Redis 数据存放于内存，为了节约宝贵的内存空间在有序集合在元素小于 64 字节且个数小于 128 的时候，会使用 ziplist，而这个阈值的默认值的设置就来自下面这两个配置项。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>zset-max-ziplist-value <span class="token number">64</span>
zset-max-ziplist-entries <span class="token number">128</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>一旦有序集合中的某个元素超出这两个其中的一个阈值它就会转为 <strong>skiplist</strong>（实际是 dict+skiplist，还会借用字典来提高获取指定元素的效率）。</p><p>我们不妨在添加一个大于 64 字节的元素，可以看到有序集合的底层存储转为 skiplist。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zadd rankList <span class="token number">90</span> yigemingzihuichaoguo64zijiedeyonghumingchengyongyuceshitiaobiaodeshijiyunyong
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>

<span class="token comment"># 超过阈值，转为跳表</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> object encoding rankList
<span class="token string">&quot;skiplist&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，ZSet 有两种不同的实现，分别是 ziplist 和 skiplist，具体使用哪种结构进行存储的规则如下：</p><ul><li>当有序集合对象同时满足以下两个条件时，使用 ziplist： <ol><li>ZSet 保存的键值对数量少于 128 个；</li><li>每个元素的长度小于 64 字节。</li></ol></li><li>如果不满足上述两个条件，那么使用 skiplist 。</li></ul><h2 id="手写一个跳表" tabindex="-1"><a class="header-anchor" href="#手写一个跳表"><span>手写一个跳表</span></a></h2><p>为了更好的回答上述问题以及更好的理解和掌握跳表，这里可以通过手写一个简单的跳表的形式来帮助读者理解跳表这个数据结构。</p><p>我们都知道有序链表在添加、查询、删除的平均时间复杂都都是<strong>O(n)<strong>即线性增长，所以一旦节点数量达到一定体量后其性能表现就会非常差劲。而跳表我们完全可以理解为在原始链表基础上，建立多级索引，通过多级索引检索定位将增删改查的时间复杂度变为</strong>O(log n)</strong>。</p><p>可能这里说的有些抽象，我们举个例子，以下图跳表为例，其原始链表存储按序存储 1-10，有 2 级索引，每级索引的索引个数都是基于下层元素个数的一半。</p><figure><img src="https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005436.png" alt="" tabindex="0"><figcaption></figcaption></figure><p>假如我们需要查询元素 6，其工作流程如下：</p><ol><li>从 2 级索引开始，先来到节点 4。</li><li>查看 4 的后继节点，是 8 的 2 级索引，这个值大于 6，说明 2 级索引后续的索引都是大于 6 的，没有再往后搜寻的必要，我们索引向下查找。</li><li>来到 4 的 1 级索引，比对其后继节点为 6，查找结束。</li></ol><p>相较于原始有序链表需要 6 次，我们的跳表通过建立多级索引，我们只需两次就直接定位到了目标元素，其查寻的复杂度被直接优化为<strong>O(log n)</strong>。</p><figure><img src="https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005524.png" alt="" tabindex="0"><figcaption></figcaption></figure><p>对应的添加也是一个道理，假如我们需要在这个有序集合中添加一个元素 7，那么我们就需要通过跳表找到<strong>小于元素 7 的最大值</strong>，也就是下图元素 6 的位置，将其插入到元素 6 的后面，让元素 6 的索引指向新插入的节点 7，其工作流程如下：</p><ol><li>从 2 级索引开始定位到了元素 4 的索引。</li><li>查看索引 4 的后继索引为 8，索引向下推进。</li><li>来到 1 级索引，发现索引 4 后继索引为 6，小于插入元素 7，指针推进到索引 6 位置。</li><li>继续比较 6 的后继节点为索引 8，大于元素 7，索引继续向下。</li><li>最终我们来到 6 的原始节点，发现其后继节点为 7，指针没有继续向下的空间，自此我们可知元素 6 就是小于插入元素 7 的最大值，于是便将元素 7 插入。</li></ol><figure><img src="https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005480.png" alt="" tabindex="0"><figcaption></figcaption></figure><p>这里我们又面临一个问题，我们是否需要为元素 7 建立索引，索引多高合适？</p><p>我们上文提到，理想情况是每一层索引是下一层元素个数的二分之一，假设我们的总共有 16 个元素，对应各级索引元素个数应该是：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">1</span>. 一级索引:16/2<span class="token operator">=</span><span class="token number">8</span>
<span class="token number">2</span>. 二级索引:8/2 <span class="token operator">=</span><span class="token number">4</span>
<span class="token number">3</span>. 三级索引:4/2<span class="token operator">=</span><span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由此我们用数学归纳法可知：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">1</span>. 一级索引:16/2<span class="token operator">=</span><span class="token number">16</span>/2^1<span class="token operator">=</span><span class="token number">8</span>
<span class="token number">2</span>. 二级索引:8/2 <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">16</span>/2^2 <span class="token operator">=</span><span class="token number">4</span>
<span class="token number">3</span>. 三级索引:4/2<span class="token operator">=</span><span class="token operator">&gt;</span><span class="token number">16</span>/2^3<span class="token operator">=</span><span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设元素个数为 n，那么对应 k 层索引的元素个数 r 计算公式为:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">r</span><span class="token operator">=</span>n/2^k
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同理我们再来推断以下索引的最大高度，一般来说最高级索引的元素个数为 2，我们设元素总个数为 n，索引高度为 h，代入上述公式可得：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">2</span><span class="token operator">=</span> n/2^h
<span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">2</span>*2^h<span class="token operator">=</span>n
<span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">2</span>^<span class="token punctuation">(</span>h+1<span class="token punctuation">)</span><span class="token operator">=</span>n
<span class="token operator">=</span><span class="token operator">&gt;</span> h+1<span class="token operator">=</span>log2^n
<span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token assign-left variable">h</span><span class="token operator">=</span>log2^n <span class="token parameter variable">-1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而 Redis 又是内存数据库，我们假设元素最大个数是<strong>65536</strong>，我们把<strong>65536</strong>代入上述公式可知最大高度为 16。所以我们建议添加一个元素后为其建立的索引高度不超过 16。</p><p>因为我们要求尽可能保证每一个上级索引都是下级索引的一半，在实现高度生成算法时，我们可以这样设计：</p><ol><li>跳表的高度计算从原始链表开始，即默认情况下插入的元素的高度为 1，代表没有索引，只有元素节点。</li><li>设计一个为插入元素生成节点索引高度 level 的方法。</li><li>进行一次随机运算，随机数值范围为 0-1 之间。</li><li>如果随机数大于 0.5 则为当前元素添加一级索引，自此我们保证生成一级索引的概率为<strong>50%</strong>，这也就保证了 1 级索引理想情况下只有一半的元素会生成索引。</li><li>同理后续每次随机算法得到的值大于 0.5 时，我们的索引高度就加 1，这样就可以保证节点生成的 2 级索引概率为<strong>25%</strong>，3 级索引为<strong>12.5%</strong>……</li></ol><p>我们回过头，上述插入 7 之后，我们通过随机算法得到 2，即要为其建立 1 级索引：</p><figure><img src="https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005505.png" alt="" tabindex="0"><figcaption></figcaption></figure><p>最后我们再来说说删除，假设我们这里要删除元素 10，我们必须定位到当前跳表<strong>各层</strong>元素小于 10 的最大值，索引执行步骤为：</p><ol><li>2 级索引 4 的后继节点为 8，指针推进。</li><li>索引 8 无后继节点，该层无要删除的元素，指针直接向下。</li><li>1 级索引 8 后继节点为 10，说明 1 级索引 8 在进行删除时需要将自己的指针和 1 级索引 10 断开联系，将 10 删除。</li><li>1 级索引完成定位后，指针向下，后继节点为 9，指针推进。</li><li>9 的后继节点为 10，同理需要让其指向 null，将 10 删除。</li></ol><figure><img src="https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005503.png" alt="" tabindex="0"><figcaption></figcaption></figure><h3 id="模板定义" tabindex="-1"><a class="header-anchor" href="#模板定义"><span>模板定义</span></a></h3><p>有了整体的思路之后，我们可以开始实现一个跳表了，首先定义一下跳表中的节点<strong>Node</strong>，从上文的演示中可以看出每一个<strong>Node</strong>它都包含以下几个元素：</p><ol><li>存储的<strong>value</strong>值。</li><li>后继节点的地址。</li><li>多级索引。</li></ol><p>为了更方便统一管理<strong>Node</strong>后继节点地址和多级索引指向的元素地址，笔者在<strong>Node</strong>中设置了一个<strong>forwards</strong>数组，用于记录原始链表节点的后继节点和多级索引的后继节点指向。</p><p>以下图为例，我们<strong>forwards</strong>数组长度为 5，其中<strong>索引 0</strong>记录的是原始链表节点的后继节点地址，而其余自底向上表示从 1 级索引到 4 级索引的后继节点指向。</p><figure><img src="https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005347.png" alt="" tabindex="0"><figcaption></figcaption></figure><p>于是我们的就有了这样一个代码定义，可以看出笔者对于数组的长度设置为固定的 16**(上文的推算最大高度建议是 16)<strong>，默认</strong>data<strong>为-1，节点最大高度</strong>maxLevel<strong>初始化为 1，注意这个</strong>maxLevel**的值代表原始链表加上索引的总高度。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 跳表索引最大高度为16
 */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_LEVEL</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> data <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> forwards <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token constant">MAX_LEVEL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> maxLevel <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="元素添加" tabindex="-1"><a class="header-anchor" href="#元素添加"><span>元素添加</span></a></h3><p>定义好节点之后，我们先实现以下元素的添加，添加元素时首先自然是设置<strong>data</strong>这一步我们直接根据将传入的<strong>value</strong>设置到<strong>data</strong>上即可。</p><p>然后就是高度<strong>maxLevel</strong>的设置 ，我们在上文也已经给出了思路，默认高度为 1，即只有一个原始链表节点，通过随机算法每次大于 0.5 索引高度加 1，由此我们得出高度计算的算法<code>randomLevel()</code>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 理论来讲，一级索引中元素个数应该占原始数据的 50%，二级索引中元素个数占 25%，三级索引12.5% ，一直到最顶层。
 * 因为这里每一层的晋升概率是 50%。对于每一个新插入的节点，都需要调用 randomLevel 生成一个合理的层数。
 * 该 randomLevel 方法会随机生成 1~MAX_LEVEL 之间的数，且 ：
 * 50%的概率返回 1
 * 25%的概率返回 2
 *  12.5%的概率返回 3 ...
 * <span class="token keyword">@return</span>
 */</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">randomLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> level <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token constant">PROB</span> <span class="token operator">&amp;&amp;</span> level <span class="token operator">&lt;</span> <span class="token constant">MAX_LEVEL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">++</span>level<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> level<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再设置当前要插入的<strong>Node</strong>和<strong>Node</strong>索引的后继节点地址，这一步稍微复杂一点，我们假设当前节点的高度为 4，即 1 个节点加 3 个索引，所以我们创建一个长度为 4 的数组<strong>maxOfMinArr</strong> ，遍历各级索引节点中小于当前<strong>value</strong>的最大值。</p><p>假设我们要插入的<strong>value</strong>为 5，我们的数组查找结果当前节点的前驱节点和 1 级索引、2 级索引的前驱节点都为 4，三级索引为空。</p><figure><img src="https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005299.png" alt="" tabindex="0"><figcaption></figcaption></figure><p>然后我们基于这个数组<strong>maxOfMinArr</strong> 定位到各级的后继节点，让插入的元素 5 指向这些后继节点，而<strong>maxOfMinArr</strong>指向 5，结果如下图：</p><figure><img src="https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005369.png" alt="" tabindex="0"><figcaption></figcaption></figure><p>转化成代码就是下面这个形式，是不是很简单呢？我们继续：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 默认情况下的高度为1，即只有自己一个节点
 */</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> levelCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 跳表最底层的节点，即头节点
 */</span>
<span class="token keyword">private</span> <span class="token class-name">Node</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">//随机生成高度</span>
    <span class="token keyword">int</span> level <span class="token operator">=</span> <span class="token function">randomLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Node</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    newNode<span class="token punctuation">.</span>data <span class="token operator">=</span> value<span class="token punctuation">;</span>
    newNode<span class="token punctuation">.</span>maxLevel <span class="token operator">=</span> level<span class="token punctuation">;</span>

    <span class="token comment">//创建一个node数组，用于记录小于当前value的最大值</span>
    <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> maxOfMinArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>level<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//默认情况下指向头节点</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> level<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        maxOfMinArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//基于上述结果拿到当前节点的后继节点</span>
    <span class="token class-name">Node</span> p <span class="token operator">=</span> h<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> level <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            p <span class="token operator">=</span> p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        maxOfMinArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//更新前驱节点的后继节点为当前节点newNode</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> level<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        newNode<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> maxOfMinArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        maxOfMinArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//如果当前newNode高度大于跳表最高高度则更新levelCount</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>levelCount <span class="token operator">&lt;</span> level<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        levelCount <span class="token operator">=</span> level<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="元素查询" tabindex="-1"><a class="header-anchor" href="#元素查询"><span>元素查询</span></a></h3><p>查询逻辑比较简单，从跳表最高级的索引开始定位找到小于要查的 value 的最大值，以下图为例，我们希望查找到节点 8：</p><ol><li>跳表的 3 级索引首先找找到 5 的索引，5 的 3 级索引**forwards[3]**指向空，索引直接向下。</li><li>来到 5 的 2 级索引，其后继**forwards[2]**指向 8，继续向下。</li><li>5 的 1 级索引**forwards[1]**指向索引 6，继续向前。</li><li>索引 6 的**forwards[1]**指向索引 8，继续向下。</li><li>我们在原始节点向前找到节点 7。</li><li>节点 7 后续就是节点 8，继续向前为节点 8，无法继续向下，结束搜寻。</li><li>判断 7 的前驱，等于 8，查找结束。</li></ol><figure><img src="https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005323.png" alt="" tabindex="0"><figcaption></figcaption></figure><p>所以我们的代码实现也很上述步骤差不多，从最高级索引开始向前查找，如果不为空且小于要查找的值，则继续向前搜寻，遇到不小于的节点则继续向下，如此往复，直到得到当前跳表中小于查找值的最大节点，查看其前驱是否等于要查找的值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span> p <span class="token operator">=</span> h<span class="token punctuation">;</span>
    <span class="token comment">//找到小于value的最大值</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> levelCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            p <span class="token operator">=</span> p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//如果p的前驱节点等于value则直接返回</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="元素删除" tabindex="-1"><a class="header-anchor" href="#元素删除"><span>元素删除</span></a></h3><p>最后是删除逻辑，需要查找各层级小于要删除节点的最大值，假设我们要删除 10：</p><ol><li>3 级索引得到小于 10 的最大值为 5，继续向下。</li><li>2 级索引从索引 5 开始查找，发现小于 10 的最大值为 8，继续向下。</li><li>同理 1 级索引得到 8，继续向下。</li><li>原始节点找到 9。</li><li>从最高级索引开始，查看每个小于 10 的节点后继节点是否为 10，如果等于 10，则让这个节点指向 10 的后继节点，将节点 10 及其索引交由 GC 回收。</li></ol><figure><img src="https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005350.png" alt="" tabindex="0"><figcaption></figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 删除
 *
 * <span class="token keyword">@param</span> <span class="token parameter">value</span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span> p <span class="token operator">=</span> h<span class="token punctuation">;</span>
    <span class="token comment">//找到各级节点小于value的最大值</span>
    <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> updateArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>levelCount<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> levelCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            p <span class="token operator">=</span> p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        updateArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//查看原始层节点前驱是否等于value，若等于则说明存在要删除的值</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//从最高级索引开始查看其前驱是否等于value，若等于则将当前节点指向value节点的后继节点</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> levelCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>updateArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> updateArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                updateArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> updateArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//从最高级开始查看是否有一级索引为空，若为空则层级减1</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>levelCount <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>levelCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        levelCount<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="完整代码以及测试" tabindex="-1"><a class="header-anchor" href="#完整代码以及测试"><span>完整代码以及测试</span></a></h3><p>完整代码如下，读者可自行参阅:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SkipList</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 跳表索引最大高度为16
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_LEVEL</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 每个节点添加一层索引高度的概率为二分之一
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token constant">PROB</span> <span class="token operator">=</span> <span class="token number">0.5</span> f<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 默认情况下的高度为1，即只有自己一个节点
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> levelCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 跳表最底层的节点，即头节点
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Node</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SkipList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> data <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         *
         */</span>
        <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> forwards <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token constant">MAX_LEVEL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> maxLevel <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;Node{&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;data=&quot;</span> <span class="token operator">+</span> data <span class="token operator">+</span>
                <span class="token string">&quot;, maxLevel=&quot;</span> <span class="token operator">+</span> maxLevel <span class="token operator">+</span>
                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">//随机生成高度</span>
        <span class="token keyword">int</span> level <span class="token operator">=</span> <span class="token function">randomLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Node</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        newNode<span class="token punctuation">.</span>data <span class="token operator">=</span> value<span class="token punctuation">;</span>
        newNode<span class="token punctuation">.</span>maxLevel <span class="token operator">=</span> level<span class="token punctuation">;</span>

        <span class="token comment">//创建一个node数组，用于记录小于当前value的最大值</span>
        <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> maxOfMinArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>level<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">//默认情况下指向头节点</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> level<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            maxOfMinArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//基于上述结果拿到当前节点的后继节点</span>
        <span class="token class-name">Node</span> p <span class="token operator">=</span> h<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> level <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                p <span class="token operator">=</span> p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            maxOfMinArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//更新前驱节点的后继节点为当前节点newNode</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> level<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            newNode<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> maxOfMinArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            maxOfMinArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//如果当前newNode高度大于跳表最高高度则更新levelCount</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>levelCount <span class="token operator">&lt;</span> level<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            levelCount <span class="token operator">=</span> level<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 理论来讲，一级索引中元素个数应该占原始数据的 50%，二级索引中元素个数占 25%，三级索引12.5% ，一直到最顶层。
     * 因为这里每一层的晋升概率是 50%。对于每一个新插入的节点，都需要调用 randomLevel 生成一个合理的层数。
     * 该 randomLevel 方法会随机生成 1~MAX_LEVEL 之间的数，且 ：
     * 50%的概率返回 1
     * 25%的概率返回 2
     *  12.5%的概率返回 3 ...
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">randomLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> level <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token constant">PROB</span> <span class="token operator">&amp;&amp;</span> level <span class="token operator">&lt;</span> <span class="token constant">MAX_LEVEL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token operator">++</span>level<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> level<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span> p <span class="token operator">=</span> h<span class="token punctuation">;</span>
        <span class="token comment">//找到小于value的最大值</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> levelCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                p <span class="token operator">=</span> p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//如果p的前驱节点等于value则直接返回</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 删除
     *
     * <span class="token keyword">@param</span> <span class="token parameter">value</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span> p <span class="token operator">=</span> h<span class="token punctuation">;</span>
        <span class="token comment">//找到各级节点小于value的最大值</span>
        <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> updateArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>levelCount<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> levelCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                p <span class="token operator">=</span> p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            updateArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//查看原始层节点前驱是否等于value，若等于则说明存在要删除的值</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//从最高级索引开始查看其前驱是否等于value，若等于则将当前节点指向value节点的后继节点</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> levelCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>updateArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> updateArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    updateArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> updateArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//从最高级开始查看是否有一级索引为空，若为空则层级减1</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>levelCount <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span>levelCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            levelCount<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span> p <span class="token operator">=</span> h<span class="token punctuation">;</span>
        <span class="token comment">//基于最底层的非索引层进行遍历，只要后继节点不为空，则速速出当前节点，并移动到后继节点</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            p <span class="token operator">=</span> p<span class="token punctuation">.</span>forwards<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应测试代码和输出结果如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SkipList</span> skipList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SkipList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            skipList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;**********输出添加结果**********&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        skipList<span class="token punctuation">.</span><span class="token function">printAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">SkipList<span class="token punctuation">.</span>Node</span> node <span class="token operator">=</span> skipList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;**********查询结果:&quot;</span> <span class="token operator">+</span> node<span class="token operator">+</span><span class="token string">&quot; **********&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        skipList<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;**********删除结果**********&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        skipList<span class="token punctuation">.</span><span class="token function">printAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>**********输出添加结果**********
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">3</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">4</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">5</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">6</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">7</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">8</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">9</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">10</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">11</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">12</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">13</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">14</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">15</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">16</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">17</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">18</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">19</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">20</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">21</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">22</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">23</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>
**********查询结果:Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">22</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span> **********
**********删除结果**********
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">3</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">4</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">5</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">6</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">7</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">8</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">9</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">10</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">11</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">12</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">13</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">14</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">15</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">16</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">17</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">18</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">19</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">20</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">21</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">}</span>
Node<span class="token punctuation">{</span>data<span class="token operator">=</span><span class="token number">23</span>, <span class="token assign-left variable">maxLevel</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="和其余三种数据结构的比较" tabindex="-1"><a class="header-anchor" href="#和其余三种数据结构的比较"><span>和其余三种数据结构的比较</span></a></h2><p>最后，我们再来回答一下文章开头的那道面试题: “Redis 的有序集合底层为什么要用跳表，而不用平衡树、红黑树或者 B+树？”。</p><h3 id="平衡树-vs-跳表" tabindex="-1"><a class="header-anchor" href="#平衡树-vs-跳表"><span>平衡树 vs 跳表</span></a></h3><p>先来说说它和平衡树的比较，平衡树我们又会称之为 <strong>AVL 树</strong>，是一个严格的平衡二叉树，平衡条件必须满足（所有节点的左右子树高度差不超过 1，即平衡因子为范围为 <code>[-1,1]</code>）。平衡树的插入、删除和查询的时间复杂度和跳表一样都是 <strong>O(log n)</strong>。</p><p>对于范围查询来说，它也可以通过中序遍历的方式达到和跳表一样的效果。但是它的每一次插入或者删除操作都需要保证整颗树左右节点的绝对平衡，只要不平衡就要通过旋转操作来保持平衡，这个过程是比较耗时的。</p><figure><img src="https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005312.png" alt="" tabindex="0"><figcaption></figcaption></figure>`,90),r={href:"https://15721.courses.cs.cmu.edu/spring2018/papers/08-oltpindexes1/pugh-skiplists-cacm1990.pdf",target:"_blank",rel:"noopener noreferrer"},k=e(`<figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/skiplist-a-probabilistic-alternative-to-balanced-trees.png" alt="" tabindex="0"><figcaption></figcaption></figure><blockquote><p>Skip lists are a data structure that can be used in place of balanced trees. Skip lists use probabilistic balancing rather than strictly enforced balancing and as a result the algorithms for insertion and deletion in skip lists are much simpler and significantly faster than equivalent algorithms for balanced trees.</p><p>跳表是一种可以用来代替平衡树的数据结构。跳表使用概率平衡而不是严格强制的平衡，因此，跳表中的插入和删除算法比平衡树的等效算法简单得多，速度也快得多。</p></blockquote><p>笔者这里也贴出了 AVL 树插入操作的核心代码，可以看出每一次添加操作都需要进行一次递归定位插入位置，然后还需要根据回溯到根节点检查沿途的各层节点是否失衡，再通过旋转节点的方式进行调整。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 向二分搜索树中添加新的元素(key, value)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    root <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 向以node为根的二分搜索树中插入元素(key, value)，递归算法</span>
<span class="token comment">// 返回插入新节点后二分搜索树的根</span>
<span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        size<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token comment">// key.compareTo(node.key) == 0</span>
        node<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>

    node<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> balanceFactor <span class="token operator">=</span> <span class="token function">getBalanceFactor</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// LL型需要右旋</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>balanceFactor <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">getBalanceFactor</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//RR型失衡需要左旋</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>balanceFactor <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">getBalanceFactor</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//LR需要先左旋成LL型，然后再右旋</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>balanceFactor <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">getBalanceFactor</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//RL</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>balanceFactor <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">getBalanceFactor</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="红黑树-vs-跳表" tabindex="-1"><a class="header-anchor" href="#红黑树-vs-跳表"><span>红黑树 vs 跳表</span></a></h3><p>红黑树（Red Black Tree）也是一种自平衡二叉查找树，它的查询性能略微逊色于 AVL 树，但插入和删除效率更高。红黑树的插入、删除和查询的时间复杂度和跳表一样都是 <strong>O(log n)</strong>。</p>`,6),d=s("strong",null,"黑平衡树",-1),v={href:"https://javaguide.cn/cs-basics/data-structure/red-black-tree.html",target:"_blank",rel:"noopener noreferrer"},m=e(`<p>相比较于红黑树来说，跳表的实现也更简单一些。并且，按照区间来查找数据这个操作，红黑树的效率没有跳表高。</p><figure><img src="https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005709.png" alt="" tabindex="0"><figcaption></figcaption></figure><p>对应红黑树添加的核心代码如下，读者可自行参阅理解：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token generics"><span class="token punctuation">&lt;</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span> <span class="token punctuation">&gt;</span></span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Node</span> <span class="token generics"><span class="token punctuation">&lt;</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span> <span class="token punctuation">&gt;</span></span> node<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        size<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        node<span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//左节点不为红，右节点为红，左旋</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isRed</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node <span class="token operator">=</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//左链右旋</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isRed</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node <span class="token operator">=</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//颜色翻转</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isRed</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">flipColors</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="b-树-vs-跳表" tabindex="-1"><a class="header-anchor" href="#b-树-vs-跳表"><span>B+树 vs 跳表</span></a></h3><p>想必使用 MySQL 的读者都知道 B+树这个数据结构，B+树是一种常用的数据结构，具有以下特点：</p><ol><li><strong>多叉树结构</strong>：它是一棵多叉树，每个节点可以包含多个子节点，减小了树的高度，查询效率高。</li><li><strong>存储效率高</strong>:其中非叶子节点存储多个 key，叶子节点存储 value，使得每个节点更够存储更多的键，根据索引进行范围查询时查询效率更高。-</li><li><strong>平衡性</strong>：它是绝对的平衡，即树的各个分支高度相差不大，确保查询和插入时间复杂度为<strong>O(log n)</strong>。</li><li><strong>顺序访问</strong>：叶子节点间通过链表指针相连，范围查询表现出色。</li><li><strong>数据均匀分布</strong>：B+树插入时可能会导致数据重新分布，使得数据在整棵树分布更加均匀，保证范围查询和删除效率。</li></ol><figure><img src="https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005649.png" alt="" tabindex="0"><figcaption></figcaption></figure><p>所以，B+树更适合作为数据库和文件系统中常用的索引结构之一，它的核心思想是通过可能少的 IO 定位到尽可能多的索引来获得查询数据。对于 Redis 这种内存数据库来说，它对这些并不感冒，因为 Redis 作为内存数据库它不可能存储大量的数据，所以对于索引不需要通过 B+树这种方式进行维护，只需按照概率进行随机维护即可，节约内存。而且使用跳表实现 zset 时相较前者来说更简单一些，在进行插入时只需通过索引将数据插入到链表中合适的位置再随机维护一定高度的索引即可，也不需要像 B+树那样插入时发现失衡时还需要对节点分裂与合并。</p><h3 id="redis-作者给出的理由" tabindex="-1"><a class="header-anchor" href="#redis-作者给出的理由"><span>Redis 作者给出的理由</span></a></h3><p>当然我们也可以通过 Redis 的作者自己给出的理由:</p><blockquote><p>There are a few reasons:<br> 1、They are not very memory intensive. It&#39;s up to you basically. Changing parameters about the probability of a node to have a given number of levels will make then less memory intensive than btrees.<br> 2、A sorted set is often target of many ZRANGE or ZREVRANGE operations, that is, traversing the skip list as a linked list. With this operation the cache locality of skip lists is at least as good as with other kind of balanced trees.<br> 3、They are simpler to implement, debug, and so forth. For instance thanks to the skip list simplicity I received a patch (already in Redis master) with augmented skip lists implementing ZRANK in O(log(N)). It required little changes to the code.</p></blockquote><p>翻译过来的意思就是:</p><blockquote><p>有几个原因：</p><p>1、它们不是很占用内存。这主要取决于你。改变节点拥有给定层数的概率的参数，会使它们比 B 树更节省内存。</p><p>2、有序集合经常是许多 ZRANGE 或 ZREVRANGE 操作的目标，也就是说，以链表的方式遍历跳表。通过这种操作，跳表的缓存局部性至少和其他类型的平衡树一样好。</p><p>3、它们更容易实现、调试等等。例如，由于跳表的简单性，我收到了一个补丁（已经在 Redis 主分支中），用增强的跳表实现了 O(log(N))的 ZRANK。它只需要对代码做很少的修改。</p></blockquote><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>本文通过大量篇幅介绍跳表的工作原理和实现，帮助读者更进一步的熟悉跳表这一数据结构的优劣，最后再结合各个数据结构操作的特点进行比对，从而帮助读者更好的理解这道面试题，建议读者实现理解跳表时，尽可能配合执笔模拟来了解跳表的增删改查详细过程。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,17),b={href:"https://www.zhihu.com/question/20202931/answer/16086538",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.jianshu.com/p/9d8296562806",target:"_blank",rel:"noopener noreferrer"},f={href:"https://blog.csdn.net/shark_chili3007/article/details/104171986",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.runoob.com/redis/redis-sorted-sets.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://zhuanlan.zhihu.com/p/576984787",target:"_blank",rel:"noopener noreferrer"},y={href:"https://blog.csdn.net/f80407515/article/details/129136998",target:"_blank",rel:"noopener noreferrer"};function x(N,L){const a=o("ExternalLinkIcon");return l(),c("div",null,[u,s("p",null,[n("跳表诞生的初衷就是为了克服平衡树的一些缺点，跳表的发明者在论文"),s("a",r,[n("《Skip lists: a probabilistic alternative to balanced trees》"),p(a)]),n("中有详细提到：")]),k,s("p",null,[n("红黑树是一个"),d,n("，即从任意节点到另外一个叶子叶子节点，它所经过的黑节点是一样的。当对它进行插入操作时，需要通过旋转和染色（红黑变换）来保证黑平衡。不过，相较于 AVL 树为了维持平衡的开销要小一些。关于红黑树的详细介绍，可以查看这篇文章："),s("a",v,[n("红黑树"),p(a)]),n("。")]),m,s("ul",null,[s("li",null,[n("为啥 redis 使用跳表(skiplist)而不是使用 red-black？:"),s("a",b,[n("https://www.zhihu.com/question/20202931/answer/16086538"),p(a)])]),s("li",null,[n("Skip List--跳表（全网最详细的跳表文章没有之一）:"),s("a",g,[n("https://www.jianshu.com/p/9d8296562806"),p(a)])]),s("li",null,[n("Redis 对象与底层数据结构详解:"),s("a",f,[n("https://blog.csdn.net/shark_chili3007/article/details/104171986"),p(a)])]),s("li",null,[n("Redis 有序集合(sorted set):"),s("a",h,[n("https://www.runoob.com/redis/redis-sorted-sets.html"),p(a)])]),s("li",null,[n("红黑树和跳表比较:"),s("a",w,[n("https://zhuanlan.zhihu.com/p/576984787"),p(a)])]),s("li",null,[n("为什么 redis 的 zset 用跳跃表而不用 b+ tree？:"),s("a",y,[n("https://blog.csdn.net/f80407515/article/details/129136998"),p(a)])])])])}const _=t(i,[["render",x],["__file","redis-skiplist.html.vue"]]),A=JSON.parse(`{"path":"/database/redis/redis-skiplist.html","title":"Redis为什么用跳表实现有序集合","lang":"zh-CN","frontmatter":{"title":"Redis为什么用跳表实现有序集合","category":"数据库","tag":["Redis"],"description":"前言 近几年针对 Redis 面试时会涉及常见数据结构的底层设计，其中就有这么一道比较有意思的面试题：“Redis 的有序集合底层为什么要用跳表，而不用平衡树、红黑树或者 B+树？”。 本文就以这道大厂常问的面试题为切入点，带大家详细了解一下跳表这个数据结构。 本文整体脉络如下图所示，笔者会从有序集合的基本使用到跳表的源码分析和实现，让你会对 Redi...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/learning/database/redis/redis-skiplist.html"}],["meta",{"property":"og:site_name","content":"Mua'dib Guide "}],["meta",{"property":"og:title","content":"Redis为什么用跳表实现有序集合"}],["meta",{"property":"og:description","content":"前言 近几年针对 Redis 面试时会涉及常见数据结构的底层设计，其中就有这么一道比较有意思的面试题：“Redis 的有序集合底层为什么要用跳表，而不用平衡树、红黑树或者 B+树？”。 本文就以这道大厂常问的面试题为切入点，带大家详细了解一下跳表这个数据结构。 本文整体脉络如下图所示，笔者会从有序集合的基本使用到跳表的源码分析和实现，让你会对 Redi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005468.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-31T05:10:55.000Z"}],["meta",{"property":"article:author","content":"Guide"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:modified_time","content":"2024-08-31T05:10:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis为什么用跳表实现有序集合\\",\\"image\\":[\\"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005468.png\\",\\"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005436.png\\",\\"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005524.png\\",\\"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005480.png\\",\\"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005505.png\\",\\"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005503.png\\",\\"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005347.png\\",\\"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005299.png\\",\\"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005369.png\\",\\"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005323.png\\",\\"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005350.png\\",\\"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005312.png\\",\\"https://oss.javaguide.cn/github/javaguide/database/redis/skiplist-a-probabilistic-alternative-to-balanced-trees.png\\",\\"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005709.png\\",\\"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005649.png\\"],\\"dateModified\\":\\"2024-08-31T05:10:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Guide\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"跳表在 Redis 中的运用","slug":"跳表在-redis-中的运用","link":"#跳表在-redis-中的运用","children":[]},{"level":2,"title":"手写一个跳表","slug":"手写一个跳表","link":"#手写一个跳表","children":[{"level":3,"title":"模板定义","slug":"模板定义","link":"#模板定义","children":[]},{"level":3,"title":"元素添加","slug":"元素添加","link":"#元素添加","children":[]},{"level":3,"title":"元素查询","slug":"元素查询","link":"#元素查询","children":[]},{"level":3,"title":"元素删除","slug":"元素删除","link":"#元素删除","children":[]},{"level":3,"title":"完整代码以及测试","slug":"完整代码以及测试","link":"#完整代码以及测试","children":[]}]},{"level":2,"title":"和其余三种数据结构的比较","slug":"和其余三种数据结构的比较","link":"#和其余三种数据结构的比较","children":[{"level":3,"title":"平衡树 vs 跳表","slug":"平衡树-vs-跳表","link":"#平衡树-vs-跳表","children":[]},{"level":3,"title":"红黑树 vs 跳表","slug":"红黑树-vs-跳表","link":"#红黑树-vs-跳表","children":[]},{"level":3,"title":"B+树 vs 跳表","slug":"b-树-vs-跳表","link":"#b-树-vs-跳表","children":[]},{"level":3,"title":"Redis 作者给出的理由","slug":"redis-作者给出的理由","link":"#redis-作者给出的理由","children":[]}]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1725081055000,"updatedTime":1725081055000,"contributors":[{"name":"tonygong","email":"280880907@163.com","commits":1}]},"readingTime":{"minutes":23.95,"words":7184},"filePathRelative":"database/redis/redis-skiplist.md","localizedDate":"2024年8月31日","excerpt":"<h2>前言</h2>\\n<p>近几年针对 Redis 面试时会涉及常见数据结构的底层设计，其中就有这么一道比较有意思的面试题：“Redis 的有序集合底层为什么要用跳表，而不用平衡树、红黑树或者 B+树？”。</p>\\n<p>本文就以这道大厂常问的面试题为切入点，带大家详细了解一下跳表这个数据结构。</p>\\n<p>本文整体脉络如下图所示，笔者会从有序集合的基本使用到跳表的源码分析和实现，让你会对 Redis 的有序集合底层实现的跳表有着更深刻的理解和掌握。</p>\\n<figure><img src=\\"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005468.png\\" alt=\\"\\" tabindex=\\"0\\"><figcaption></figcaption></figure>","autoDesc":true}`);export{_ as comp,A as data};
