import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as l,c as r,a as e,b as a,d as p,e as s}from"./app-Dl67cLp_.js";const h={},o=e("p",null,[e("strong",null,"推荐语"),a("：Kaito 大佬的一篇文章，很实用的建议！")],-1),c=e("strong",null,"原文地址：",-1),d={href:"https://mp.weixin.qq.com/s/6hUU6SZsxGPWAIIByq93Rw",target:"_blank",rel:"noopener noreferrer"},_=s('<p>我想你肯定遇到过这样一类程序员：<strong>他们无论是写代码，还是写文档，又或是和别人沟通，都显得特别专业</strong>。每次遇到这类人，我都在想，他们到底是怎么做到的？</p><p>随着工作时间的增长，渐渐地我也总结出一些经验，他们身上都保持着一些看似很微小的优秀习惯，但正是因为这些习惯，体现出了一个优秀程序员的基本素养。</p><p>但今天我们来换个角度，来看看一个糟糕程序员有哪些坏习惯？只要我们都能避开这些问题，就可以逐渐向一个优秀程序员靠近。</p><h2 id="_1、技术名词拼写不规范" tabindex="-1"><a class="header-anchor" href="#_1、技术名词拼写不规范"><span>1、技术名词拼写不规范</span></a></h2><p>无论是个人简历，还是技术文档，我经常看到拼写不规范的技术名词，例如 JAVA、javascript、python、MySql、Hbase、restful。</p><p>正确的拼写应该是 Java、JavaScript、Python、MySQL、HBase、RESTful，不要小看这个问题，很多面试官很有可能因为这一点刷掉你的简历。</p><h2 id="_2、写文档-中英文混排不规范" tabindex="-1"><a class="header-anchor" href="#_2、写文档-中英文混排不规范"><span>2、写文档，中英文混排不规范</span></a></h2><p>中文描述使用英文标点符号，英文和数字使用了全角字符，中文与英文、数字之间没有空格等等。</p><p>其中很多人会忽视中文和英文、数字之间加一个「空格」，这样排版阅读起来会更舒服。之前我的文章排版，都是遵循了这些细节。</p><h2 id="_3、重要逻辑不写注释-或写得很拖沓" tabindex="-1"><a class="header-anchor" href="#_3、重要逻辑不写注释-或写得很拖沓"><span>3、重要逻辑不写注释，或写得很拖沓</span></a></h2><p>复杂且重要的逻辑代码，很多程序员不写注释，除了自己能看懂代码逻辑，其他人根本看不懂。或者是注释虽然写了，但写得很拖沓，没有逻辑可言。</p><p>重要的逻辑不止要写注释，还要写得简洁、清晰。如果是一眼就能读懂的简单代码，可以不加注释。</p><h2 id="_4、写复杂冗长的函数" tabindex="-1"><a class="header-anchor" href="#_4、写复杂冗长的函数"><span>4、写复杂冗长的函数</span></a></h2><p>一个函数几百行，一个文件上千行代码，复杂函数不做拆分，导致代码变得越来越难维护，最后谁也不敢动。</p><p>基本的设计模式还是要遵守的，例如单一职责，一个函数只做一件事，开闭原则，对扩展开放，对修改关闭。</p><p>如果函数逻辑确实复杂，也至少要保证主干逻辑足够清晰。</p><h2 id="_5、不看官方文档-只看垃圾博客" tabindex="-1"><a class="header-anchor" href="#_5、不看官方文档-只看垃圾博客"><span>5、不看官方文档，只看垃圾博客</span></a></h2><p>很多人遇到问题不先去看官方文档，而是热衷于去看垃圾博客，这些博客的内容都是互相抄袭，错误百出。</p><p>其实很多软件官方文档写得已经非常好了，常见问题都能找到答案，认真读一读官方文档，比看垃圾博客强一百倍，要养成看官方文档的好习惯。</p><h2 id="_6、宣扬内功无用论" tabindex="-1"><a class="header-anchor" href="#_6、宣扬内功无用论"><span>6、宣扬内功无用论</span></a></h2><p>有些人天天追求日新月异的开源项目和框架，却不肯花时间去啃一啃底层原理，常见问题虽然可以解决，但遇到稍微深一点的问题就束手无策。</p><p>很多高大上的架构设计，思路其实都源于底层。想一想，像计算机体系结构、操作系统、网络协议这些东西，经过多少年演进才变为现在的样子，演进过程中遇到的复杂问题比比皆是，理解了解决这些问题的思路，再看上层技术会变得很简单。</p><h2 id="_7、乐于炫技" tabindex="-1"><a class="header-anchor" href="#_7、乐于炫技"><span>7、乐于炫技</span></a></h2><p>有些人天天把「高大上」的技术名词挂在嘴边，生怕别人不知道自己学了什么高深技术，嘴上乐于炫技，但别人一问他细节就会哑口无言。</p><h2 id="_8、不接受质疑" tabindex="-1"><a class="header-anchor" href="#_8、不接受质疑"><span>8、不接受质疑</span></a></h2><p>自己设计的方案，别人提出疑问时只会回怼，而不是理性分析利弊，抱着学习的心态交流。</p><p>这些人学了点东西就觉得自己很有本事，殊不知只是自己见识太少。</p><h2 id="_9、接口协议不规范" tabindex="-1"><a class="header-anchor" href="#_9、接口协议不规范"><span>9、接口协议不规范</span></a></h2><p>和别人定 API 协议全靠口头沟通，不给规范的文档说明，甚至到了测试联调时会发现，竟然和协商的还不一样，或者改协议了却不通知对接方，合作体验极差。</p><h2 id="_10、遇到问题自己死磕" tabindex="-1"><a class="header-anchor" href="#_10、遇到问题自己死磕"><span>10、遇到问题自己死磕</span></a></h2><p>很初级程序员容易犯的问题，遇到问题只会自己死磕，拖到 deadline 也没有产出，领导来问才知道有问题解决不了。</p><p>有问题及时反馈才是对自己负责，对团队负责。</p><h2 id="_11、一说就会-一写就废" tabindex="-1"><a class="header-anchor" href="#_11、一说就会-一写就废"><span>11、一说就会，一写就废</span></a></h2><p>平时技术方案吹得天花乱坠，一让他写代码就废，典型的眼高手低选手。</p><h2 id="_12、表达没有逻辑-不站在对方角度看问题" tabindex="-1"><a class="header-anchor" href="#_12、表达没有逻辑-不站在对方角度看问题"><span>12、表达没有逻辑，不站在对方角度看问题</span></a></h2><p>讨论问题不交代背景，上来就说自己的方案，别人听得云里雾里，让你从头描述你又讲不明白。</p><p>学会沟通和表达，是合作的基础。</p><h2 id="_13、不主动思考-伸手党" tabindex="-1"><a class="header-anchor" href="#_13、不主动思考-伸手党"><span>13、不主动思考，伸手党</span></a></h2><p>遇到问题不去 google，不做思考就向别人提问，喜欢做伸手党。</p><p>每个人的时间都很宝贵，大家都更喜欢你带着自己的思考来提问，一来可以规避很多低级问题，二来可以提高交流质量。</p><h2 id="_14、经常犯重复的错误" tabindex="-1"><a class="header-anchor" href="#_14、经常犯重复的错误"><span>14、经常犯重复的错误</span></a></h2><p>出问题后说下次会注意，但下次问题依旧，对自己不负责任，说到底是态度问题。</p><h2 id="_15、加功能不考虑扩展性" tabindex="-1"><a class="header-anchor" href="#_15、加功能不考虑扩展性"><span>15、加功能不考虑扩展性</span></a></h2><p>加新功能只关注某一小块业务，不考虑系统整体的扩展性，堆代码行为严重。</p><p>要学会分析需求和未来可能发生的变化，设计更通用的解决方案，降低后期开发成本。</p><h2 id="_16、接口不自测-出问题不打日志" tabindex="-1"><a class="header-anchor" href="#_16、接口不自测-出问题不打日志"><span>16、接口不自测，出问题不打日志</span></a></h2><p>自己开发的接口不自测就和别人联调，出了问题又说没打日志，协作效率极低。</p><h2 id="_17、提交代码不规范" tabindex="-1"><a class="header-anchor" href="#_17、提交代码不规范"><span>17、提交代码不规范</span></a></h2><p>很多人提交代码不写描述，或者写的是无意义的描述，尤其是修改很少代码时，这种情况会导致回溯问题成本变高。</p><p>制定代码提交规范，能让你在每一次提交代码时，不会做太随意的代码修改。</p><h2 id="_18、手动修改生产环境数据库" tabindex="-1"><a class="header-anchor" href="#_18、手动修改生产环境数据库"><span>18、手动修改生产环境数据库</span></a></h2><p>直连生产环境数据库修改数据，更有 UPDATE / DELETE SQL 忘写 WHERE 条件的情况，产生数据事故。</p><p>修改生产环境数据库一定要谨慎再谨慎，建议操作前先找同事 review 代码再操作。</p><h2 id="_19、没理清需求就直接写代码" tabindex="-1"><a class="header-anchor" href="#_19、没理清需求就直接写代码"><span>19、没理清需求就直接写代码</span></a></h2><p>很多程序员接到需求后，不怎么思考就开始写代码，需求和自己理解的有偏差，造成无意义返工。</p><p>多花些时间梳理需求，能规避很多不合理的问题。</p><h2 id="_20、重要设计不写文档" tabindex="-1"><a class="header-anchor" href="#_20、重要设计不写文档"><span>20、重要设计不写文档</span></a></h2><p>重要的设计没有文档输出，和别人交接系统时只做口头描述，丢失关键信息。</p><p>有时候理解一个设计方案，一个好的文档要比看几百行代码更高效。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>以上这些不良习惯，你命中几个呢？或者你身边有没有碰到这样的人？</p><p>我认为提早规避这些问题，是成为一个优秀程序员必须要做的。这些习惯总结起来大致分为这 4 个方面：</p><ul><li>良好的编程修养</li><li>谦虚的学习心态</li><li>良好的沟通和表达</li><li>注重团队协作</li></ul><p>优秀程序员的专业技能，我们可能很难在短时间内学会，但这些基本的职业素养，是可以在短期内做到的。</p><p>希望你我可以有则改之，无则加勉。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png" alt="JavaGuide 官方公众号" tabindex="0"><figcaption>JavaGuide 官方公众号</figcaption></figure>',66);function m(g,u){const t=i("ExternalLinkIcon");return l(),r("div",null,[e("blockquote",null,[o,e("p",null,[c,a(),e("a",d,[a("https://mp.weixin.qq.com/s/6hUU6SZsxGPWAIIByq93Rw"),p(t)])])]),_])}const x=n(h,[["render",m],["__file","20-bad-habits-of-bad-programmers.html.vue"]]),v=JSON.parse(`{"path":"/high-quality-technical-articles/advanced-programmer/20-bad-habits-of-bad-programmers.html","title":"糟糕程序员的 20 个坏习惯","lang":"zh-CN","frontmatter":{"title":"糟糕程序员的 20 个坏习惯","category":"技术文章精选集","author":"Kaito","tag":["练级攻略"],"gitInclude":["../../snippets/article-footer.snippet.md"],"description":"推荐语：Kaito 大佬的一篇文章，很实用的建议！ 原文地址： https://mp.weixin.qq.com/s/6hUU6SZsxGPWAIIByq93Rw 我想你肯定遇到过这样一类程序员：他们无论是写代码，还是写文档，又或是和别人沟通，都显得特别专业。每次遇到这类人，我都在想，他们到底是怎么做到的？ 随着工作时间的增长，渐渐地我也总结出一些经验...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/learning/high-quality-technical-articles/advanced-programmer/20-bad-habits-of-bad-programmers.html"}],["meta",{"property":"og:site_name","content":"Mua'dib Guide "}],["meta",{"property":"og:title","content":"糟糕程序员的 20 个坏习惯"}],["meta",{"property":"og:description","content":"推荐语：Kaito 大佬的一篇文章，很实用的建议！ 原文地址： https://mp.weixin.qq.com/s/6hUU6SZsxGPWAIIByq93Rw 我想你肯定遇到过这样一类程序员：他们无论是写代码，还是写文档，又或是和别人沟通，都显得特别专业。每次遇到这类人，我都在想，他们到底是怎么做到的？ 随着工作时间的增长，渐渐地我也总结出一些经验..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-30T09:14:13.000Z"}],["meta",{"property":"article:author","content":"Kaito"}],["meta",{"property":"article:tag","content":"练级攻略"}],["meta",{"property":"article:modified_time","content":"2023-12-30T09:14:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"糟糕程序员的 20 个坏习惯\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-30T09:14:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kaito\\"}]}"]]},"headers":[{"level":2,"title":"1、技术名词拼写不规范","slug":"_1、技术名词拼写不规范","link":"#_1、技术名词拼写不规范","children":[]},{"level":2,"title":"2、写文档，中英文混排不规范","slug":"_2、写文档-中英文混排不规范","link":"#_2、写文档-中英文混排不规范","children":[]},{"level":2,"title":"3、重要逻辑不写注释，或写得很拖沓","slug":"_3、重要逻辑不写注释-或写得很拖沓","link":"#_3、重要逻辑不写注释-或写得很拖沓","children":[]},{"level":2,"title":"4、写复杂冗长的函数","slug":"_4、写复杂冗长的函数","link":"#_4、写复杂冗长的函数","children":[]},{"level":2,"title":"5、不看官方文档，只看垃圾博客","slug":"_5、不看官方文档-只看垃圾博客","link":"#_5、不看官方文档-只看垃圾博客","children":[]},{"level":2,"title":"6、宣扬内功无用论","slug":"_6、宣扬内功无用论","link":"#_6、宣扬内功无用论","children":[]},{"level":2,"title":"7、乐于炫技","slug":"_7、乐于炫技","link":"#_7、乐于炫技","children":[]},{"level":2,"title":"8、不接受质疑","slug":"_8、不接受质疑","link":"#_8、不接受质疑","children":[]},{"level":2,"title":"9、接口协议不规范","slug":"_9、接口协议不规范","link":"#_9、接口协议不规范","children":[]},{"level":2,"title":"10、遇到问题自己死磕","slug":"_10、遇到问题自己死磕","link":"#_10、遇到问题自己死磕","children":[]},{"level":2,"title":"11、一说就会，一写就废","slug":"_11、一说就会-一写就废","link":"#_11、一说就会-一写就废","children":[]},{"level":2,"title":"12、表达没有逻辑，不站在对方角度看问题","slug":"_12、表达没有逻辑-不站在对方角度看问题","link":"#_12、表达没有逻辑-不站在对方角度看问题","children":[]},{"level":2,"title":"13、不主动思考，伸手党","slug":"_13、不主动思考-伸手党","link":"#_13、不主动思考-伸手党","children":[]},{"level":2,"title":"14、经常犯重复的错误","slug":"_14、经常犯重复的错误","link":"#_14、经常犯重复的错误","children":[]},{"level":2,"title":"15、加功能不考虑扩展性","slug":"_15、加功能不考虑扩展性","link":"#_15、加功能不考虑扩展性","children":[]},{"level":2,"title":"16、接口不自测，出问题不打日志","slug":"_16、接口不自测-出问题不打日志","link":"#_16、接口不自测-出问题不打日志","children":[]},{"level":2,"title":"17、提交代码不规范","slug":"_17、提交代码不规范","link":"#_17、提交代码不规范","children":[]},{"level":2,"title":"18、手动修改生产环境数据库","slug":"_18、手动修改生产环境数据库","link":"#_18、手动修改生产环境数据库","children":[]},{"level":2,"title":"19、没理清需求就直接写代码","slug":"_19、没理清需求就直接写代码","link":"#_19、没理清需求就直接写代码","children":[]},{"level":2,"title":"20、重要设计不写文档","slug":"_20、重要设计不写文档","link":"#_20、重要设计不写文档","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1655691494000,"updatedTime":1703927653000,"contributors":[{"name":"Mr.Hope","email":"mister-hope@outlook.com","commits":5},{"name":"Guide","email":"koushuangbwcx@163.com","commits":3},{"name":"Erzbir","email":"2978086497@qq.com","commits":1},{"name":"guide","email":"koushuangbwcx@163.com","commits":1}]},"readingTime":{"minutes":6.73,"words":2018},"filePathRelative":"high-quality-technical-articles/advanced-programmer/20-bad-habits-of-bad-programmers.md","localizedDate":"2022年6月20日","excerpt":"<blockquote>\\n<p><strong>推荐语</strong>：Kaito 大佬的一篇文章，很实用的建议！</p>\\n<p><strong>原文地址：</strong> <a href=\\"https://mp.weixin.qq.com/s/6hUU6SZsxGPWAIIByq93Rw\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://mp.weixin.qq.com/s/6hUU6SZsxGPWAIIByq93Rw</a></p>\\n</blockquote>\\n<p>我想你肯定遇到过这样一类程序员：<strong>他们无论是写代码，还是写文档，又或是和别人沟通，都显得特别专业</strong>。每次遇到这类人，我都在想，他们到底是怎么做到的？</p>","copyright":{"author":"Kaito"},"autoDesc":true}`);export{x as comp,v as data};
