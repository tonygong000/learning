import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as i,c,a as n,b as s,d as t,e}from"./app-C4hTQQaE.js";const l={},r=e('<p>系统需要对用户输入的文本进行敏感词过滤如色情、政治、暴力相关的词汇。</p><p>敏感词过滤用的使用比较多的 <strong>Trie 树算法</strong> 和 <strong>DFA 算法</strong>。</p><h2 id="算法实现" tabindex="-1"><a class="header-anchor" href="#算法实现"><span>算法实现</span></a></h2><h3 id="trie-树" tabindex="-1"><a class="header-anchor" href="#trie-树"><span>Trie 树</span></a></h3><p><strong>Trie 树</strong> 也称为字典树、单词查找树，哈希树的一种变种，通常被用于字符串匹配，用来解决在一组字符串集合中快速查找某个字符串的问题。像浏览器搜索的关键词提示就可以基于 Trie 树来做的。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/security/brower-trie.png" alt="浏览器 Trie 树效果展示" tabindex="0"><figcaption>浏览器 Trie 树效果展示</figcaption></figure><p>假如我们的敏感词库中有以下敏感词：</p><ul><li>高清视频</li><li>高清 CV</li><li>东京冷</li><li>东京热</li></ul><p>我们构造出来的敏感词 Trie 树就是下面这样的：</p><figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/security/sensitive-word-trie.png" alt="敏感词 Trie 树" tabindex="0"><figcaption>敏感词 Trie 树</figcaption></figure><p>当我们要查找对应的字符串“东京热”的话，我们会把这个字符串切割成单个的字符“东”、“京”、“热”，然后我们从 Trie 树的根节点开始匹配。</p><p>可以看出， <strong>Trie 树的核心原理其实很简单，就是通过公共前缀来提高字符串匹配效率。</strong></p>',12),u={href:"https://mvnrepository.com/artifact/org.apache.commons/commons-collections4",target:"_blank",rel:"noopener noreferrer"},d=e(`<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/security/common-collections-trie.png" alt="Apache Commons Collections 中的 Trie 树实现" tabindex="0"><figcaption>Apache Commons Collections 中的 Trie 树实现</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Trie</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> trie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PatriciaTrie</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
trie<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Abigail&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
trie<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Abi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;doctor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
trie<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Annabel&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;teacher&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
trie<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Christina&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
trie<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Chris&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;doctor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>trie<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">&quot;Abigail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;{Abi=doctor, Abigail=student}&quot;</span><span class="token punctuation">,</span> trie<span class="token punctuation">.</span><span class="token function">prefixMap</span><span class="token punctuation">(</span><span class="token string">&quot;Abi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;{Chris=doctor, Christina=student}&quot;</span><span class="token punctuation">,</span> trie<span class="token punctuation">.</span><span class="token function">prefixMap</span><span class="token punctuation">(</span><span class="token string">&quot;Chr&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Trie 树是一种利用空间换时间的数据结构，占用的内存会比较大。也正是因为这个原因，实际工程项目中都是使用的改进版 Trie 树例如双数组 Trie 树（Double-Array Trie，DAT）。</p>`,3),k={href:"https://www.co-ding.com/assets/pdf/dat.pdf",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/komiya-atsushi/darts-java/blob/e2986a55e648296cc0a6244ae4a2e457cd89fb82/src/main/java/darts/DoubleArrayTrie.java",target:"_blank",rel:"noopener noreferrer"},h=n("h3",{id:"ac-自动机",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ac-自动机"},[n("span",null,"AC 自动机")])],-1),m=n("p",null,"Aho-Corasick（AC）自动机是一种建立在 Trie 树上的一种改进算法，是一种多模式匹配算法，由贝尔实验室的研究人员 Alfred V. Aho 和 Margaret J.Corasick 发明。",-1),v={href:"https://zhuanlan.zhihu.com/p/146369212",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/hankcs/AhoCorasickDoubleArrayTrie",target:"_blank",rel:"noopener noreferrer"},b=n("h3",{id:"dfa",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#dfa"},[n("span",null,"DFA")])],-1),T=n("p",null,[n("strong",null,"DFA"),s("（Deterministic Finite Automata)即确定有穷自动机，与之对应的是 NFA（Non-Deterministic Finite Automata，不确定有穷自动机)。")],-1),_={href:"https://zhuanlan.zhihu.com/p/30009083",target:"_blank",rel:"noopener noreferrer"},A={href:"https://hutool.cn/docs/#/dfa/%E6%A6%82%E8%BF%B0",target:"_blank",rel:"noopener noreferrer"},y=e(`<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/security/hutool-dfa.png" alt="Hutool 的 DFA 算法" tabindex="0"><figcaption>Hutool 的 DFA 算法</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">WordTree</span> wordTree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WordTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
wordTree<span class="token punctuation">.</span><span class="token function">addWord</span><span class="token punctuation">(</span><span class="token string">&quot;大&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
wordTree<span class="token punctuation">.</span><span class="token function">addWord</span><span class="token punctuation">(</span><span class="token string">&quot;大憨憨&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
wordTree<span class="token punctuation">.</span><span class="token function">addWord</span><span class="token punctuation">(</span><span class="token string">&quot;憨憨&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token string">&quot;那人真是个大憨憨！&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 获得第一个匹配的关键字</span>
<span class="token class-name">String</span> matchStr <span class="token operator">=</span> wordTree<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matchStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 标准匹配，匹配到最短关键词，并跳过已经匹配的关键词</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> matchStrList <span class="token operator">=</span> wordTree<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matchStrList<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//匹配到最长关键词，跳过已经匹配的关键词</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> matchStrList2 <span class="token operator">=</span> wordTree<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matchStrList2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>大
[大, 憨憨]
[大, 大憨憨]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="开源项目" tabindex="-1"><a class="header-anchor" href="#开源项目"><span>开源项目</span></a></h2>`,5),j={href:"https://github.com/toolgood/ToolGood.Words",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/hooj0/sensitive-words-filter",target:"_blank",rel:"noopener noreferrer"},x=n("h2",{id:"论文",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#论文"},[n("span",null,"论文")])],-1),D={href:"https://patents.google.com/patent/CN101964000B",target:"_blank",rel:"noopener noreferrer"},C={href:"https://patents.google.com/patent/CN103714160A/zh",target:"_blank",rel:"noopener noreferrer"},w=n("figure",null,[n("img",{src:"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png",alt:"JavaGuide 官方公众号",tabindex:"0"}),n("figcaption",null,"JavaGuide 官方公众号")],-1);function S(F,N){const a=p("ExternalLinkIcon");return i(),c("div",null,[r,n("p",null,[n("a",u,[s("Apache Commons Collections"),t(a)]),s(" 这个库中就有 Trie 树实现：")]),d,n("p",null,[s("DAT 的设计者是日本的 Aoe Jun-ichi，Mori Akira 和 Sato Takuya，他们在 1989 年发表了一篇论文"),n("a",k,[s("《An Efficient Implementation of Trie Structures》"),t(a)]),s("，详细介绍了 DAT 的构造和应用，原作者写的示例代码地址："),n("a",g,[s("https://github.com/komiya-atsushi/darts-java/blob/e2986a55e648296cc0a6244ae4a2e457cd89fb82/src/main/java/darts/DoubleArrayTrie.java"),t(a)]),s("。相比较于 Trie 树，DAT 的内存占用极低，可以达到 Trie 树内存的 1%左右。DAT 在中文分词、自然语言处理、信息检索等领域有广泛的应用，是一种非常优秀的数据结构。")]),h,m,n("p",null,[s("AC 自动机算法使用 Trie 树来存放模式串的前缀，通过失败匹配指针（失配指针）来处理匹配失败的跳转。关于 AC 自动机的详细介绍，可以查看这篇文章："),n("a",v,[s("地铁十分钟 | AC 自动机"),t(a)]),s("。")]),n("p",null,[s("如果使用上面提到的 DAT 来表示 AC 自动机 ，就可以兼顾两者的优点，得到一种高效的多模式匹配算法。Github 上已经有了开源 Java 实现版本："),n("a",f,[s("https://github.com/hankcs/AhoCorasickDoubleArrayTrie"),t(a)]),s(" 。")]),b,T,n("p",null,[s("关于 DFA 的详细介绍可以看这篇文章："),n("a",_,[s("有穷自动机 DFA&NFA (学习笔记) - 小蜗牛的文章 - 知乎"),t(a)]),s(" 。")]),n("p",null,[n("a",A,[s("Hutool"),t(a)]),s(" 提供了 DFA 算法的实现：")]),y,n("ul",null,[n("li",null,[n("a",j,[s("ToolGood.Words"),t(a)]),s("：一款高性能敏感词(非法词/脏字)检测过滤组件，附带繁体简体互换，支持全角半角互换，汉字转拼音，模糊搜索等功能。")]),n("li",null,[n("a",q,[s("sensitive-words-filter"),t(a)]),s("：敏感词过滤项目，提供 TTMP、DFA、DAT、hash bucket、Tire 算法支持过滤。可以支持文本的高亮、过滤、判词、替换的接口支持。")])]),x,n("ul",null,[n("li",null,[n("a",D,[s("一种敏感词自动过滤管理系统"),t(a)])]),n("li",null,[n("a",C,[s("一种网络游戏中敏感词过滤方法及系统"),t(a)])])]),w])}const G=o(l,[["render",S],["__file","sentive-words-filter.html.vue"]]),L=JSON.parse(`{"path":"/system-design/security/sentive-words-filter.html","title":"敏感词过滤方案总结","lang":"zh-CN","frontmatter":{"title":"敏感词过滤方案总结","category":"系统设计","tag":["安全"],"gitInclude":["../../snippets/article-footer.snippet.md"],"description":"系统需要对用户输入的文本进行敏感词过滤如色情、政治、暴力相关的词汇。 敏感词过滤用的使用比较多的 Trie 树算法 和 DFA 算法。 算法实现 Trie 树 Trie 树 也称为字典树、单词查找树，哈希树的一种变种，通常被用于字符串匹配，用来解决在一组字符串集合中快速查找某个字符串的问题。像浏览器搜索的关键词提示就可以基于 Trie 树来做的。 浏览...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/learning/system-design/security/sentive-words-filter.html"}],["meta",{"property":"og:site_name","content":"Mua'dib Guide "}],["meta",{"property":"og:title","content":"敏感词过滤方案总结"}],["meta",{"property":"og:description","content":"系统需要对用户输入的文本进行敏感词过滤如色情、政治、暴力相关的词汇。 敏感词过滤用的使用比较多的 Trie 树算法 和 DFA 算法。 算法实现 Trie 树 Trie 树 也称为字典树、单词查找树，哈希树的一种变种，通常被用于字符串匹配，用来解决在一组字符串集合中快速查找某个字符串的问题。像浏览器搜索的关键词提示就可以基于 Trie 树来做的。 浏览..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://oss.javaguide.cn/github/javaguide/system-design/security/brower-trie.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-31T05:10:55.000Z"}],["meta",{"property":"article:author","content":"Guide"}],["meta",{"property":"article:tag","content":"安全"}],["meta",{"property":"article:modified_time","content":"2024-08-31T05:10:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"敏感词过滤方案总结\\",\\"image\\":[\\"https://oss.javaguide.cn/github/javaguide/system-design/security/brower-trie.png\\",\\"https://oss.javaguide.cn/github/javaguide/system-design/security/sensitive-word-trie.png\\",\\"https://oss.javaguide.cn/github/javaguide/system-design/security/common-collections-trie.png\\",\\"https://oss.javaguide.cn/github/javaguide/system-design/security/hutool-dfa.png\\"],\\"dateModified\\":\\"2024-08-31T05:10:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Guide\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"算法实现","slug":"算法实现","link":"#算法实现","children":[{"level":3,"title":"Trie 树","slug":"trie-树","link":"#trie-树","children":[]},{"level":3,"title":"AC 自动机","slug":"ac-自动机","link":"#ac-自动机","children":[]},{"level":3,"title":"DFA","slug":"dfa","link":"#dfa","children":[]}]},{"level":2,"title":"开源项目","slug":"开源项目","link":"#开源项目","children":[]},{"level":2,"title":"论文","slug":"论文","link":"#论文","children":[]}],"git":{"createdTime":1725081055000,"updatedTime":1725081055000,"contributors":[{"name":"tonygong","email":"280880907@163.com","commits":1}]},"readingTime":{"minutes":3.7,"words":1109},"filePathRelative":"system-design/security/sentive-words-filter.md","localizedDate":"2024年8月31日","excerpt":"<p>系统需要对用户输入的文本进行敏感词过滤如色情、政治、暴力相关的词汇。</p>\\n<p>敏感词过滤用的使用比较多的 <strong>Trie 树算法</strong> 和 <strong>DFA 算法</strong>。</p>\\n<h2>算法实现</h2>\\n<h3>Trie 树</h3>\\n<p><strong>Trie 树</strong> 也称为字典树、单词查找树，哈希树的一种变种，通常被用于字符串匹配，用来解决在一组字符串集合中快速查找某个字符串的问题。像浏览器搜索的关键词提示就可以基于 Trie 树来做的。</p>\\n<figure><img src=\\"https://oss.javaguide.cn/github/javaguide/system-design/security/brower-trie.png\\" alt=\\"浏览器 Trie 树效果展示\\" tabindex=\\"0\\"><figcaption>浏览器 Trie 树效果展示</figcaption></figure>","autoDesc":true}`);export{G as comp,L as data};
