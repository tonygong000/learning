import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,e as t}from"./app-C4hTQQaE.js";const s={},o=t(`<h2 id="chunk-error" tabindex="-1"><a class="header-anchor" href="#chunk-error"><span>Chunk Error</span></a></h2><h3 id="basis-knowledge" tabindex="-1"><a class="header-anchor" href="#basis-knowledge"><span>Basis knowledge</span></a></h3><p>The way React, Vue, Angular and similar frameworks work is by <strong>downloading JavaScript files and using them to render websites</strong> on the browser. Whenever a project is built, two types of files are created:</p><ul><li>Main entry file - The file to which the script tag in index.html points to</li><li>Other helper files - The files which are imported by the main entry file whenever required.</li></ul><p>Most of the time, if you have a small project, a single entry file is enough.<br> You can store all the JavaScript code into the same file.</p><p>But, for faster loading and better user experience, the JavaScript code can also be broken down into multiple files<br> when it&#39;s built and these files(which is <strong>Other helper files</strong>) are dynamically fetched by the main entry file whenever required.</p><p>Now, whenever there’s an <strong>error observed in fetching these other helper JavaScript files</strong>, a ChunkLoad Error is thrown.</p><blockquote><p>The multiple JavaScript files used are also known as chunks, and hence the name of the error.</p></blockquote><h3 id="reason-for-the-error" tabindex="-1"><a class="header-anchor" href="#reason-for-the-error"><span>Reason for the error</span></a></h3><ul><li><p>The checksum validation for the JavaScript file failed</p><p>This can occur when the checksum of the received file does not match the integrity attribute of the script tag. (For more information on why this is important and how it’s done you can refer to Subresource Integrity - Web security | MDN).</p><p>A possible reason for this is that you have antivirus, browser extensions, proxies, or ad blocking software that may be modifying the file contents, resulting in it not matching the checksum.</p><blockquote><p>Subresource Integrity (SRI) 是一种安全特性，它允许网页的开发者通过提供资源的哈希值来确保他们加载的资源未被篡改。使用 SRI 时，开发者在 script 或 link 标签中添加 integrity 属性和 crossorigin 属性。示例如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>&lt;script src=&quot;https://example.com/script.js&quot; integrity=&quot;sha384-oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K/uxfqhmWp7vjKhp+nIVf3Yg6ZkZ9bD4w&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>工作原理：</p><ol><li>获取文件: 浏览器从指定的 URL 获取文件。</li><li>计算校验和: 浏览器计算获取到的文件的校验和。</li><li>校验和对比: 浏览器将计算得到的校验和与 integrity 属性中提供的校验和进行对比。</li><li>校验成功: 如果校验和匹配，浏览器将执行文件。</li><li>校验失败: 如果校验和不匹配，浏览器将拒绝加载文件并抛出错误。</li></ol></blockquote></li><li><p>The relevant chunk files can not be found or are outdated<br> Again, this can occur because your browser is not able to find and/or download the chunk file, maybe because the file does not exist, but also because of the hundreds of reasons for internet failure (proxies, firewalls, outages etc.).</p><p>It can also occur if the browser is able to download the chunk file, but the downloaded file is an outdated one.</p></li></ul><h3 id="example-of-the-chunk-load-error" tabindex="-1"><a class="header-anchor" href="#example-of-the-chunk-load-error"><span>Example of the Chunk Load Error</span></a></h3><p>Assume a user is using your app, he has downloaded the main entrypoint file which is, in turn, going to download chunk1.js, chunk2.js, chunk3.js, … whenever required. At the same time, you push a critical bug fix and redeploy the application.</p><p>This causes the previous chunks to be deleted and be replaced by new ones, say chunkA.js, chunkB.js, chunkC.js, … Now for the user, whenever his entrypoint file tries to download the file chunk2.js it’ll give a chunk load error since the file does not exist.</p><p>An extension of this use case is when, due to some caching in between the user and your server, the user is served an older entrypoint file, even though you’ve redeployed the application long back. This causes the browser to try and fetch older non-existent files, resulting in a Chunk Load Error.</p><h3 id="reproducing-the-error" tabindex="-1"><a class="header-anchor" href="#reproducing-the-error"><span>Reproducing the Error</span></a></h3><p>You are most likely already stuck on this error, but here’s a simple way to reproduce the Chunk Load Error.</p><p>Let’s say you have a App.jsx which looks like this:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Suspense <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> OtherComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;./OtherComponent&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Suspense fallback<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>OtherComponent <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And an OtherComponent.jsx which contains -</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">OtherComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Hello World<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> OtherComponent<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Building this project should create multiple chunks, which you can see in your build folder. You can now serve this build folder, and delete one of the chunks created. Now, since the browser is trying to fetch a chunk, but is unable to fetch it since it doesn’t exist, it’ll throw a chunk load error.</p><blockquote><p>在构建时，上述代码中的 React.lazy 和 Suspense 都会引入代码分割（code splitting）的概念，以优化应用程序的加载性能。</p><p>React.lazy 和 import()： React.lazy 是 React 提供的一个动态导入组件的方式，它接受一个返回 import() 函数的函数作为参数，该函数动态地加载组件。在这个例子中，OtherComponent 被异步加载，只有当需要渲染时才会加载，而不是在应用程序初始化时立即加载。</p><p>Suspense 组件： Suspense 是 React 提供的一个组件，用于在异步加载组件时显示加载中的占位符。当 OtherComponent 还在加载中时，Suspense 会渲染它的 fallback 属性中指定的内容，以提供用户一个加载状态的提示。</p><p>在构建时，由于 React.lazy 和 Suspense 的存在，Webpack 会生成一个单独的 chunk 文件来包含被动态导入的组件。在本例中，OtherComponent 会被打包成一个独立的 chunk 文件，并且在需要时被异步加载。</p><p>因此，在构建时会生成至少两个 chunk 文件：</p><ul><li>主 chunk 文件（通常名为 main.js 或类似的名字），其中包含了应用程序的主要代码。</li><li>懒加载的 chunk 文件（通常根据模块的名称或路径来命名），其中包含了被 React.lazy 异步加载的 OtherComponent 组件的代码。</li></ul></blockquote>`,22),r=[o];function i(p,l){return n(),a("div",null,r)}const h=e(s,[["render",i],["__file","javascript-extension.html.vue"]]),d=JSON.parse(`{"path":"/web/javascript/javascript-extension.html","title":"JavaScript扩展","lang":"zh-CN","frontmatter":{"title":"JavaScript扩展","category":"web","tag":["javascript"],"description":"Chunk Error Basis knowledge The way React, Vue, Angular and similar frameworks work is by downloading JavaScript files and using them to render websites on the browser. Whenever...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/learning/web/javascript/javascript-extension.html"}],["meta",{"property":"og:site_name","content":"Mua'dib Guide "}],["meta",{"property":"og:title","content":"JavaScript扩展"}],["meta",{"property":"og:description","content":"Chunk Error Basis knowledge The way React, Vue, Angular and similar frameworks work is by downloading JavaScript files and using them to render websites on the browser. Whenever..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-31T05:10:55.000Z"}],["meta",{"property":"article:author","content":"Guide"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:modified_time","content":"2024-08-31T05:10:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript扩展\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-31T05:10:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Guide\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"Chunk Error","slug":"chunk-error","link":"#chunk-error","children":[{"level":3,"title":"Basis knowledge","slug":"basis-knowledge","link":"#basis-knowledge","children":[]},{"level":3,"title":"Reason for the error","slug":"reason-for-the-error","link":"#reason-for-the-error","children":[]},{"level":3,"title":"Example of the Chunk Load Error","slug":"example-of-the-chunk-load-error","link":"#example-of-the-chunk-load-error","children":[]},{"level":3,"title":"Reproducing the Error","slug":"reproducing-the-error","link":"#reproducing-the-error","children":[]}]}],"git":{"createdTime":1725081055000,"updatedTime":1725081055000,"contributors":[{"name":"tonygong","email":"280880907@163.com","commits":1}]},"readingTime":{"minutes":3.89,"words":1166},"filePathRelative":"web/javascript/javascript-extension.md","localizedDate":"2024年8月31日","excerpt":"<h2>Chunk Error</h2>\\n<h3>Basis knowledge</h3>\\n<p>The way React, Vue, Angular and similar frameworks work is by <strong>downloading JavaScript files and using them to render websites</strong> on the browser. Whenever a project is built, two types of files are created:</p>\\n<ul>\\n<li>Main entry file - The file to which the script tag in index.html points to</li>\\n<li>Other helper files - The files which are imported by the main entry file whenever required.</li>\\n</ul>","autoDesc":true}`);export{h as comp,d as data};
