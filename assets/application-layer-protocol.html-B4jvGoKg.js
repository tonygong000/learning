import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o as r,c as l,a as e,b as t,d as i,e as o}from"./app-D0cmWqTO.js";const p={},c=o('<h2 id="http-超文本传输协议" tabindex="-1"><a class="header-anchor" href="#http-超文本传输协议"><span>HTTP:超文本传输协议</span></a></h2><p><strong>超文本传输协议（HTTP，HyperText Transfer Protocol)</strong> 是一种用于传输超文本和多媒体内容的协议，主要是为 Web 浏览器与 Web 服务器之间的通信而设计的。当我们使用浏览器浏览网页的时候，我们网页就是通过 HTTP 请求进行加载的。</p><p>HTTP 使用客户端-服务器模型，客户端向服务器发送 HTTP Request（请求），服务器响应请求并返回 HTTP Response（响应），整个过程如下图所示。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/450px-HTTP-Header.png" alt="" tabindex="0"><figcaption></figcaption></figure><p>HTTP 协议基于 TCP 协议，发送 HTTP 请求之前首先要建立 TCP 连接也就是要经历 3 次握手。目前使用的 HTTP 协议大部分都是 1.1。在 1.1 的协议里面，默认是开启了 Keep-Alive 的，这样的话建立的连接就可以在多次请求中被复用了。</p><p>另外， HTTP 协议是”无状态”的协议，它无法记录客户端用户的状态，一般我们都是通过 Session 来记录客户端用户的状态。</p><h2 id="websocket-全双工通信协议" tabindex="-1"><a class="header-anchor" href="#websocket-全双工通信协议"><span>Websocket：全双工通信协议</span></a></h2><p>WebSocket 是一种基于 TCP 连接的全双工通信协议，即客户端和服务器可以同时发送和接收数据。</p><p>WebSocket 协议在 2008 年诞生，2011 年成为国际标准，几乎所有主流较新版本的浏览器都支持该协议。不过，WebSocket 不只能在基于浏览器的应用程序中使用，很多编程语言、框架和服务器都提供了 WebSocket 支持。</p><p>WebSocket 协议本质上是应用层的协议，用于弥补 HTTP 协议在持久通信能力上的不足。客户端和服务器仅需一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000042192394.png" alt="Websocket 示意图" tabindex="0"><figcaption>Websocket 示意图</figcaption></figure><p>下面是 WebSocket 的常见应用场景：</p>',12),g=e("li",null,"视频弹幕",-1),h={href:"https://javaguide.cn/system-design/web-real-time-message-push.html",target:"_blank",rel:"noopener noreferrer"},d=e("li",null,"实时游戏对战",-1),T=e("li",null,"多用户协同编辑",-1),u=e("li",null,"社交聊天",-1),P=e("li",null,"……",-1),m=o('<p>WebSocket 的工作过程可以分为以下几个步骤：</p><ol><li>客户端向服务器发送一个 HTTP 请求，请求头中包含 <code>Upgrade: websocket</code> 和 <code>Sec-WebSocket-Key</code> 等字段，表示要求升级协议为 WebSocket；</li><li>服务器收到这个请求后，会进行升级协议的操作，如果支持 WebSocket，它将回复一个 HTTP 101 状态码，响应头中包含 ，<code>Connection: Upgrade</code>和 <code>Sec-WebSocket-Accept: xxx</code> 等字段、表示成功升级到 WebSocket 协议。</li><li>客户端和服务器之间建立了一个 WebSocket 连接，可以进行双向的数据传输。数据以帧（frames）的形式进行传送，WebSocket 的每条消息可能会被切分成多个数据帧（最小单位）。发送端会将消息切割成多个帧发送给接收端，接收端接收消息帧，并将关联的帧重新组装成完整的消息。</li><li>客户端或服务器可以主动发送一个关闭帧，表示要断开连接。另一方收到后，也会回复一个关闭帧，然后双方关闭 TCP 连接。</li></ol><p>另外，建立 WebSocket 连接之后，通过心跳机制来保持 WebSocket 连接的稳定性和活跃性。</p><h2 id="smtp-简单邮件传输-发送-协议" tabindex="-1"><a class="header-anchor" href="#smtp-简单邮件传输-发送-协议"><span>SMTP:简单邮件传输(发送)协议</span></a></h2><p><strong>简单邮件传输(发送)协议（SMTP，Simple Mail Transfer Protocol）</strong> 基于 TCP 协议，是一种用于发送电子邮件的协议</p><figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/what-is-smtp.png" alt="SMTP 协议" tabindex="0"><figcaption>SMTP 协议</figcaption></figure><p>注意 ⚠️：<strong>接受邮件的协议不是 SMTP 而是 POP3 协议。</strong></p><p>SMTP 协议这块涉及的内容比较多，下面这两个问题比较重要：</p><ol><li>电子邮件的发送过程</li><li>如何判断邮箱是真正存在的？</li></ol><p><strong>电子邮件的发送过程？</strong></p><p>比如我的邮箱是“<a href="mailto:dabai@cszhinan.com">dabai@cszhinan.com</a>”，我要向“<a href="mailto:xiaoma@qq.com">xiaoma@qq.com</a>”发送邮件，整个过程可以简单分为下面几步：</p><ol><li>通过 <strong>SMTP</strong> 协议，我将我写好的邮件交给 163 邮箱服务器（邮局）。</li><li>163 邮箱服务器发现我发送的邮箱是 qq 邮箱，然后它使用 SMTP 协议将我的邮件转发到 qq 邮箱服务器。</li><li>qq 邮箱服务器接收邮件之后就通知邮箱为“<a href="mailto:xiaoma@qq.com">xiaoma@qq.com</a>”的用户来收邮件，然后用户就通过 <strong>POP3/IMAP</strong> 协议将邮件取出。</li></ol><p><strong>如何判断邮箱是真正存在的？</strong></p><p>很多场景(比如邮件营销)下面我们需要判断我们要发送的邮箱地址是否真的存在，这个时候我们可以利用 SMTP 协议来检测：</p><ol><li>查找邮箱域名对应的 SMTP 服务器地址</li><li>尝试与服务器建立连接</li><li>连接成功后尝试向需要验证的邮箱发送邮件</li><li>根据返回结果判定邮箱地址的真实性</li></ol><p>推荐几个在线邮箱是否有效检测工具：</p>',16),b={href:"https://verify-email.org/",target:"_blank",rel:"noopener noreferrer"},f={href:"http://tool.chacuo.net/mailverify",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.emailcamel.com/",target:"_blank",rel:"noopener noreferrer"},v=o('<h2 id="pop3-imap-邮件接收的协议" tabindex="-1"><a class="header-anchor" href="#pop3-imap-邮件接收的协议"><span>POP3/IMAP:邮件接收的协议</span></a></h2><p>这两个协议没必要多做阐述，只需要了解 <strong>POP3 和 IMAP 两者都是负责邮件接收的协议</strong> 即可（二者也是基于 TCP 协议）。另外，需要注意不要将这两者和 SMTP 协议搞混淆了。<strong>SMTP 协议只负责邮件的发送，真正负责接收的协议是 POP3/IMAP。</strong></p><p>IMAP 协议是比 POP3 更新的协议，它在功能和性能上都更加强大。IMAP 支持邮件搜索、标记、分类、归档等高级功能，而且可以在多个设备之间同步邮件状态。几乎所有现代电子邮件客户端和服务器都支持 IMAP。</p><h2 id="ftp-文件传输协议" tabindex="-1"><a class="header-anchor" href="#ftp-文件传输协议"><span>FTP:文件传输协议</span></a></h2><p><strong>FTP 协议</strong> 基于 TCP 协议，是一种用于在计算机之间传输文件的协议，可以屏蔽操作系统和文件存储方式。</p><p>FTP 是基于客户—服务器（C/S）模型而设计的，在客户端与 FTP 服务器之间建立两个连接。如果我们要基于 FTP 协议开发一个文件传输的软件的话，首先需要搞清楚 FTP 的原理。关于 FTP 的原理，很多书籍上已经描述的非常详细了：</p><blockquote><p>FTP 的独特的优势同时也是与其它客户服务器程序最大的不同点就在于它在两台通信的主机之间使用了两条 TCP 连接（其它客户服务器应用程序一般只有一条 TCP 连接）：</p><ol><li>控制连接：用于传送控制信息（命令和响应）</li><li>数据连接：用于数据传送；</li></ol><p>这种将命令和数据分开传送的思想大大提高了 FTP 的效率。</p></blockquote><figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/ftp.png" alt="FTP工作过程" tabindex="0"><figcaption>FTP工作过程</figcaption></figure><p>注意 ⚠️：FTP 是一种不安全的协议，因为它在传输过程中不会对数据进行加密。因此，FTP 传输的文件可能会被窃听或篡改。建议在传输敏感数据时使用更安全的协议，如 SFTP（一种基于 SSH 协议的安全文件传输协议，用于在网络上安全地传输文件）。</p><h2 id="telnet-远程登陆协议" tabindex="-1"><a class="header-anchor" href="#telnet-远程登陆协议"><span>Telnet:远程登陆协议</span></a></h2><p><strong>Telnet 协议</strong> 基于 TCP 协议，用于通过一个终端登陆到其他服务器。Telnet 协议的最大缺点之一是所有数据（包括用户名和密码）均以明文形式发送，这有潜在的安全风险。这就是为什么如今很少使用 Telnet，而是使用一种称为 SSH 的非常安全的网络传输协议的主要原因。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/Telnet_is_vulnerable_to_eavesdropping-2.png" alt="Telnet:远程登陆协议" tabindex="0"><figcaption>Telnet:远程登陆协议</figcaption></figure><h2 id="ssh-安全的网络传输协议" tabindex="-1"><a class="header-anchor" href="#ssh-安全的网络传输协议"><span>SSH:安全的网络传输协议</span></a></h2><p><strong>SSH（Secure Shell）</strong> 基于 TCP 协议，通过加密和认证机制实现安全的访问和文件传输等业务。</p><p>SSH 的经典用途是登录到远程电脑中执行命令。除此之外，SSH 也支持隧道协议、端口映射和 X11 连接。借助 SFTP 或 SCP 协议，SSH 还可以传输文件。</p><p>SSH 使用客户端-服务器模型，默认端口是 22。SSH 是一个守护进程，负责实时监听客户端请求，并进行处理。大多数现代操作系统都提供了 SSH。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/ssh-client-server.png" alt="SSH:安全的网络传输协议" tabindex="0"><figcaption>SSH:安全的网络传输协议</figcaption></figure><h2 id="rtp-实时传输协议" tabindex="-1"><a class="header-anchor" href="#rtp-实时传输协议"><span>RTP:实时传输协议</span></a></h2><p>RTP（Real-time Transport Protocol，实时传输协议）通常基于 UDP 协议，但也支持 TCP 协议。它提供了端到端的实时传输数据的功能，但不包含资源预留存、不保证实时传输质量，这些功能由 WebRTC 实现。</p><p>RTP 协议分为两种子协议：</p><ul><li><strong>RTP（Real-time Transport Protocol，实时传输协议）</strong>：传输具有实时特性的数据。</li><li><strong>RTCP（RTP Control Protocol，RTP 控制协议）</strong>：提供实时传输过程中的统计信息（如网络延迟、丢包率等），WebRTC 正是根据这些信息处理丢包</li></ul><h2 id="dns-域名系统" tabindex="-1"><a class="header-anchor" href="#dns-域名系统"><span>DNS:域名系统</span></a></h2><p>DNS（Domain Name System，域名管理系统）基于 UDP 协议，用于解决域名和 IP 地址的映射问题。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/dns-overview.png" alt="DNS:域名系统" tabindex="0"><figcaption>DNS:域名系统</figcaption></figure><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>',25),_=e("li",null,"《计算机网络自顶向下方法》（第七版）",-1),k={href:"https://mthli.xyz/rtp-introduction/",target:"_blank",rel:"noopener noreferrer"},H=e("figure",null,[e("img",{src:"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png",alt:"JavaGuide 官方公众号",tabindex:"0"}),e("figcaption",null,"JavaGuide 官方公众号")],-1);function x(j,y){const a=s("ExternalLinkIcon");return r(),l("div",null,[c,e("ul",null,[g,e("li",null,[t("实时消息推送，详见"),e("a",h,[t("Web 实时消息推送详解"),i(a)]),t("这篇文章")]),d,T,u,P]),m,e("ol",null,[e("li",null,[e("a",b,[t("https://verify-email.org/"),i(a)])]),e("li",null,[e("a",f,[t("http://tool.chacuo.net/mailverify"),i(a)])]),e("li",null,[e("a",S,[t("https://www.emailcamel.com/"),i(a)])])]),v,e("ul",null,[_,e("li",null,[t("RTP 协议介绍:"),e("a",k,[t("https://mthli.xyz/rtp-introduction/"),i(a)])])]),H])}const M=n(p,[["render",x],["__file","application-layer-protocol.html.vue"]]),C=JSON.parse(`{"path":"/cs-basics/network/application-layer-protocol.html","title":"应用层常见协议总结（应用层）","lang":"zh-CN","frontmatter":{"title":"应用层常见协议总结（应用层）","category":"计算机基础","tag":["计算机网络"],"gitInclude":["../../snippets/article-footer.snippet.md"],"description":"HTTP:超文本传输协议 超文本传输协议（HTTP，HyperText Transfer Protocol) 是一种用于传输超文本和多媒体内容的协议，主要是为 Web 浏览器与 Web 服务器之间的通信而设计的。当我们使用浏览器浏览网页的时候，我们网页就是通过 HTTP 请求进行加载的。 HTTP 使用客户端-服务器模型，客户端向服务器发送 HTTP ...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/learning/cs-basics/network/application-layer-protocol.html"}],["meta",{"property":"og:site_name","content":"Mua'dib Guide "}],["meta",{"property":"og:title","content":"应用层常见协议总结（应用层）"}],["meta",{"property":"og:description","content":"HTTP:超文本传输协议 超文本传输协议（HTTP，HyperText Transfer Protocol) 是一种用于传输超文本和多媒体内容的协议，主要是为 Web 浏览器与 Web 服务器之间的通信而设计的。当我们使用浏览器浏览网页的时候，我们网页就是通过 HTTP 请求进行加载的。 HTTP 使用客户端-服务器模型，客户端向服务器发送 HTTP ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://oss.javaguide.cn/github/javaguide/450px-HTTP-Header.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-02T14:29:03.000Z"}],["meta",{"property":"article:author","content":"Guide"}],["meta",{"property":"article:tag","content":"计算机网络"}],["meta",{"property":"article:modified_time","content":"2024-09-02T14:29:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"应用层常见协议总结（应用层）\\",\\"image\\":[\\"https://oss.javaguide.cn/github/javaguide/450px-HTTP-Header.png\\",\\"https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000042192394.png\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/what-is-smtp.png\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/ftp.png\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/Telnet_is_vulnerable_to_eavesdropping-2.png\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/ssh-client-server.png\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/network/dns-overview.png\\"],\\"dateModified\\":\\"2024-09-02T14:29:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Guide\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"HTTP:超文本传输协议","slug":"http-超文本传输协议","link":"#http-超文本传输协议","children":[]},{"level":2,"title":"Websocket：全双工通信协议","slug":"websocket-全双工通信协议","link":"#websocket-全双工通信协议","children":[]},{"level":2,"title":"SMTP:简单邮件传输(发送)协议","slug":"smtp-简单邮件传输-发送-协议","link":"#smtp-简单邮件传输-发送-协议","children":[]},{"level":2,"title":"POP3/IMAP:邮件接收的协议","slug":"pop3-imap-邮件接收的协议","link":"#pop3-imap-邮件接收的协议","children":[]},{"level":2,"title":"FTP:文件传输协议","slug":"ftp-文件传输协议","link":"#ftp-文件传输协议","children":[]},{"level":2,"title":"Telnet:远程登陆协议","slug":"telnet-远程登陆协议","link":"#telnet-远程登陆协议","children":[]},{"level":2,"title":"SSH:安全的网络传输协议","slug":"ssh-安全的网络传输协议","link":"#ssh-安全的网络传输协议","children":[]},{"level":2,"title":"RTP:实时传输协议","slug":"rtp-实时传输协议","link":"#rtp-实时传输协议","children":[]},{"level":2,"title":"DNS:域名系统","slug":"dns-域名系统","link":"#dns-域名系统","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1725287343000,"updatedTime":1725287343000,"contributors":[{"name":"tonygong","email":"280880907@163.com","commits":1}]},"readingTime":{"minutes":7.74,"words":2322},"filePathRelative":"cs-basics/network/application-layer-protocol.md","localizedDate":"2024年9月2日","excerpt":"<h2>HTTP:超文本传输协议</h2>\\n<p><strong>超文本传输协议（HTTP，HyperText Transfer Protocol)</strong> 是一种用于传输超文本和多媒体内容的协议，主要是为 Web 浏览器与 Web 服务器之间的通信而设计的。当我们使用浏览器浏览网页的时候，我们网页就是通过 HTTP 请求进行加载的。</p>\\n<p>HTTP 使用客户端-服务器模型，客户端向服务器发送 HTTP Request（请求），服务器响应请求并返回 HTTP Response（响应），整个过程如下图所示。</p>\\n<figure><img src=\\"https://oss.javaguide.cn/github/javaguide/450px-HTTP-Header.png\\" alt=\\"\\" tabindex=\\"0\\"><figcaption></figcaption></figure>","autoDesc":true}`);export{M as comp,C as data};
