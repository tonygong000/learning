import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,e}from"./app-BlHhf7HR.js";const t={},i=e(`<h2 id="配置github源代码" tabindex="-1"><a class="header-anchor" href="#配置github源代码"><span>配置Github源代码</span></a></h2><ul><li><p>配置SSH凭据</p><ul><li>生成SSH密钥</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">4096</span> <span class="token parameter variable">-C</span> <span class="token string">&quot;your_email@example.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>将 SSH 公钥添加到 GitHub</p><p>~/.ssh/id_rsa.pub 文件中的内容复制并粘贴到 GitHub 的 &quot;Key&quot; 文本框中，并为 SSH 密钥添加一个描述，然后点击 &quot;Add SSH key&quot;</p></li><li><p>在 Jenkins 中配置 SSH 凭据</p></li></ul></li><li><p>SSH密钥验证<br> 下一步把github的host-key保存到linux服务器上</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ssh-keyscan github.com <span class="token operator">&gt;&gt;</span> ~/.ssh/known_hosts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>host-key:github.com的公钥，在之后使用ssh连接github时搜索网站上的host key,判断ssh访问的主机是否被篡改过 <blockquote><p>那么主机B当前使用的host key保存在哪呢？在/etc/ssh/ssh_host*文件中，这些文件是服务端(此处即主机B)的sshd服务程序启动时重建的。以rsa算法为例，则保存在/etc/ssh/ssh_host_rsa_key和/etc/ssh/ssh_host_rsa_key.pub中，其中公钥文件/etc/ssh/ssh_host_rsa_key.pub中保存的就是host key。</p></blockquote></li></ul></li></ul><h2 id="jenkins触发器" tabindex="-1"><a class="header-anchor" href="#jenkins触发器"><span>jenkins触发器</span></a></h2><h3 id="github-webhooks" tabindex="-1"><a class="header-anchor" href="#github-webhooks"><span>github webhooks</span></a></h3><p>当 GitHub 有代码提交时通知 Jenkins，你需要配置 GitHub 上的 Webhooks 来触发 Jenkins 的构建任务。</p><p>为此，你需要在 GitHub 仓库的设置中添加一个 Webhooks，并指定 Jenkins 服务器的 URL。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>http://your_jenkins_server/github-webhook/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="jenkins构建后步骤" tabindex="-1"><a class="header-anchor" href="#jenkins构建后步骤"><span>jenkins构建后步骤</span></a></h2><h3 id="shell" tabindex="-1"><a class="header-anchor" href="#shell"><span>Shell</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>User
<span class="token comment">#!/bin/sh</span>
<span class="token function-name function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&#39;Start the program &#39;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&#39;-------Starting-------&#39;</span>
    <span class="token function">nohup</span> <span class="token function">java</span> <span class="token parameter variable">-jar</span> /var/lib/jenkins/workspace/springboot-deploy-api/target/apprentice-1.0.0.jar  <span class="token operator">&gt;</span> /var/lib/jenkins/workspace/springboot-deploy-api/target/log.txt <span class="token operator">&amp;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&#39;启动成功&#39;</span>
<span class="token punctuation">}</span>
<span class="token function-name function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;关闭程序：&quot;</span>
    <span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span><span class="token function">grep</span> apprentice-1.0.0.jar<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">&#39;{print $2}&#39;</span><span class="token variable">\`</span></span>
    <span class="token builtin class-name">echo</span> <span class="token string">&#39;旧程序PID：&#39;</span><span class="token variable">$pid</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">&quot;<span class="token variable">$pid</span>&quot;</span> <span class="token punctuation">]</span>
    <span class="token keyword">then</span>
    <span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token variable">$pid</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;关闭成功&quot;</span>
    <span class="token keyword">fi</span>
<span class="token punctuation">}</span>

<span class="token comment">#根据输入参数，选择执行对应方法，不输入则执行使用说明</span>
<span class="token keyword">case</span> <span class="token string">&quot;<span class="token variable">$1</span>&quot;</span> <span class="token keyword">in</span>
  <span class="token string">&quot;start&quot;</span><span class="token punctuation">)</span>
    start
    <span class="token punctuation">;</span><span class="token punctuation">;</span>
  <span class="token string">&quot;stop&quot;</span><span class="token punctuation">)</span>
    stop
    <span class="token punctuation">;</span><span class="token punctuation">;</span>
  <span class="token string">&quot;restart&quot;</span><span class="token punctuation">)</span>
    stop
    start
    <span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">esac</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：在linux系统中LF是行结束符，windows系统中是CRLF<br> LF:\\n<br> CRLF:\\r\\n</p></blockquote><ul><li>start(){...}: 定义了一个函数 start，用于启动程序。该函数中包含了启动程序的逻辑。</li><li>stop(){...}: 定义了一个函数 stop，用于停止程序。该函数中包含了停止程序的逻辑。</li><li>pid=ps -ef |grep apprentice-1.0.0.jar|awk &#39;{print $2}&#39;\`\`: 通过 ps 命令和 grep 命令来查找正在运行的程序的 PID，并将其保存在 pid 变量中。</li><li>case &quot;$1&quot; in ... esac: 这是一个 case 语句，根据传入的参数来选择执行对应的方法。</li><li>如果传入参数是 start，则执行 start 函数。</li><li>如果传入参数是 stop，则执行 stop 函数。</li><li>如果传入参数是 restart，则先执行 stop 函数，然后执行 start 函数。</li></ul>`,12),l=[i];function p(o,c){return n(),a("div",null,l)}const d=s(t,[["render",p],["__file","practice.html.vue"]]),h=JSON.parse(`{"path":"/tools/genkins/practice.html","title":"genkins实践","lang":"zh-CN","frontmatter":{"title":"genkins实践","category":"开发工具","description":"配置Github源代码 配置SSH凭据 生成SSH密钥 将 SSH 公钥添加到 GitHub ~/.ssh/id_rsa.pub 文件中的内容复制并粘贴到 GitHub 的 \\"Key\\" 文本框中，并为 SSH 密钥添加一个描述，然后点击 \\"Add SSH key\\" 在 Jenkins 中配置 SSH 凭据 SSH密钥验证 下一步把github的host...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/learning/tools/genkins/practice.html"}],["meta",{"property":"og:site_name","content":"Mua'dib Guide "}],["meta",{"property":"og:title","content":"genkins实践"}],["meta",{"property":"og:description","content":"配置Github源代码 配置SSH凭据 生成SSH密钥 将 SSH 公钥添加到 GitHub ~/.ssh/id_rsa.pub 文件中的内容复制并粘贴到 GitHub 的 \\"Key\\" 文本框中，并为 SSH 密钥添加一个描述，然后点击 \\"Add SSH key\\" 在 Jenkins 中配置 SSH 凭据 SSH密钥验证 下一步把github的host..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-02T15:48:11.000Z"}],["meta",{"property":"article:author","content":"Guide"}],["meta",{"property":"article:modified_time","content":"2024-09-02T15:48:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"genkins实践\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-02T15:48:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Guide\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"配置Github源代码","slug":"配置github源代码","link":"#配置github源代码","children":[]},{"level":2,"title":"jenkins触发器","slug":"jenkins触发器","link":"#jenkins触发器","children":[{"level":3,"title":"github webhooks","slug":"github-webhooks","link":"#github-webhooks","children":[]}]},{"level":2,"title":"jenkins构建后步骤","slug":"jenkins构建后步骤","link":"#jenkins构建后步骤","children":[{"level":3,"title":"Shell","slug":"shell","link":"#shell","children":[]}]}],"git":{"createdTime":1725292091000,"updatedTime":1725292091000,"contributors":[{"name":"tonygong","email":"280880907@163.com","commits":1}]},"readingTime":{"minutes":1.99,"words":598},"filePathRelative":"tools/genkins/practice.md","localizedDate":"2024年9月2日","excerpt":"<h2>配置Github源代码</h2>\\n<ul>\\n<li>\\n<p>配置SSH凭据</p>\\n<ul>\\n<li>生成SSH密钥</li>\\n</ul>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code>ssh-keygen <span class=\\"token parameter variable\\">-t</span> rsa <span class=\\"token parameter variable\\">-b</span> <span class=\\"token number\\">4096</span> <span class=\\"token parameter variable\\">-C</span> <span class=\\"token string\\">\\"your_email@example.com\\"</span>\\n</code></pre></div><ul>\\n<li>\\n<p>将 SSH 公钥添加到 GitHub</p>\\n<p>~/.ssh/id_rsa.pub 文件中的内容复制并粘贴到 GitHub 的 \\"Key\\" 文本框中，并为 SSH 密钥添加一个描述，然后点击 \\"Add SSH key\\"</p>\\n</li>\\n<li>\\n<p>在 Jenkins 中配置 SSH 凭据</p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>SSH密钥验证<br>\\n下一步把github的host-key保存到linux服务器上</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code>ssh-keyscan github.com <span class=\\"token operator\\">&gt;&gt;</span> ~/.ssh/known_hosts\\n</code></pre></div><ul>\\n<li>host-key:github.com的公钥，在之后使用ssh连接github时搜索网站上的host key,判断ssh访问的主机是否被篡改过\\n<blockquote>\\n<p>那么主机B当前使用的host key保存在哪呢？在/etc/ssh/ssh_host*文件中，这些文件是服务端(此处即主机B)的sshd服务程序启动时重建的。以rsa算法为例，则保存在/etc/ssh/ssh_host_rsa_key和/etc/ssh/ssh_host_rsa_key.pub中，其中公钥文件/etc/ssh/ssh_host_rsa_key.pub中保存的就是host key。</p>\\n</blockquote>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{d as comp,h as data};
