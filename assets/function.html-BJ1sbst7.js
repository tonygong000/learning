import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-BlHhf7HR.js";const e={},p=t(`<h2 id="函数知识点" tabindex="-1"><a class="header-anchor" href="#函数知识点"><span>函数知识点</span></a></h2><ol><li>函数返回时一般是值传递，将函数内的变量进行复制然后传递。（类和基本类型变量都可以值传递）</li><li><span class="custom-highlight">T t()</span>这样写是新建栈对象 <blockquote><p>只在作用域内生效<br> 可以在函数中使用，函数返回栈对象时，会进行值传递（也就是通过拷贝构造函数创造出对象）<br><strong>new</strong>是新建堆对象</p></blockquote></li><li>成员函数后加const——防止成员函数修改成员数据</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
class temp
<span class="token punctuation">{</span>
public<span class="token operator">:</span>
    <span class="token function">temp</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">setNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
private<span class="token operator">:</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
temp<span class="token operator">::</span><span class="token function">temp</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    this<span class="token operator">-&gt;</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> temp<span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">{</span>
    age<span class="token operator">+=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// #Error...error C2166: l-value specifies const object #</span>
    <span class="token keyword">return</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    temp <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;age= &quot;</span> <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>c++函数<strong>不允许函数嵌套</strong>，允许<span class="custom-highlight">函数内调用</span></li></ol><h2 id="lambda表达式" tabindex="-1"><a class="header-anchor" href="#lambda表达式"><span>lambda表达式</span></a></h2><blockquote><p>可以用lambda表达式代替函数嵌套的作用</p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">auto</span> check<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token operator">-&gt;</span>bool<span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token comment">/* []是指参数捕获，捕获表达式外参数
1. [&amp;]选择表达式外所有参数，进行引用传递，在表达式中不能改变原有的参数
2. [&amp;x]引用捕获指定参数
3. [=]捕获所有参数进行值传递，能改变原有的参数
4. [x]值捕获指定参数
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),o=[p];function c(l,i){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","function.html.vue"]]),d=JSON.parse(`{"path":"/c__/function.html","title":"函数","lang":"zh-CN","frontmatter":{"title":"函数","description":"函数知识点 函数返回时一般是值传递，将函数内的变量进行复制然后传递。（类和基本类型变量都可以值传递） T t()这样写是新建栈对象 只在作用域内生效 可以在函数中使用，函数返回栈对象时，会进行值传递（也就是通过拷贝构造函数创造出对象） new是新建堆对象 成员函数后加const——防止成员函数修改成员数据 c++函数不允许函数嵌套，允许函数内调用 la...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/learning/c__/function.html"}],["meta",{"property":"og:site_name","content":"Mua'dib Guide "}],["meta",{"property":"og:title","content":"函数"}],["meta",{"property":"og:description","content":"函数知识点 函数返回时一般是值传递，将函数内的变量进行复制然后传递。（类和基本类型变量都可以值传递） T t()这样写是新建栈对象 只在作用域内生效 可以在函数中使用，函数返回栈对象时，会进行值传递（也就是通过拷贝构造函数创造出对象） new是新建堆对象 成员函数后加const——防止成员函数修改成员数据 c++函数不允许函数嵌套，允许函数内调用 la..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-02T15:48:11.000Z"}],["meta",{"property":"article:author","content":"Guide"}],["meta",{"property":"article:modified_time","content":"2024-09-02T15:48:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-02T15:48:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Guide\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"函数知识点","slug":"函数知识点","link":"#函数知识点","children":[]},{"level":2,"title":"lambda表达式","slug":"lambda表达式","link":"#lambda表达式","children":[]}],"git":{"createdTime":1725292091000,"updatedTime":1725292091000,"contributors":[{"name":"tonygong","email":"280880907@163.com","commits":1}]},"readingTime":{"minutes":1.09,"words":328},"filePathRelative":"c++/function.md","localizedDate":"2024年9月2日","excerpt":"<h2>函数知识点</h2>\\n<ol>\\n<li>函数返回时一般是值传递，将函数内的变量进行复制然后传递。（类和基本类型变量都可以值传递）</li>\\n<li><span class=\\"custom-highlight\\">T t()</span>这样写是新建栈对象\\n<blockquote>\\n<p>只在作用域内生效<br>\\n可以在函数中使用，函数返回栈对象时，会进行值传递（也就是通过拷贝构造函数创造出对象）<br>\\n<strong>new</strong>是新建堆对象</p>\\n</blockquote>\\n</li>\\n<li>成员函数后加const——防止成员函数修改成员数据</li>\\n</ol>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\nusing namespace std<span class=\\"token punctuation\\">;</span>\\nclass temp\\n<span class=\\"token punctuation\\">{</span>\\npublic<span class=\\"token operator\\">:</span>\\n    <span class=\\"token function\\">temp</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> age<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">getAge</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">setNum</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> num<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nprivate<span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">int</span> age<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\ntemp<span class=\\"token operator\\">::</span><span class=\\"token function\\">temp</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> age<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    this<span class=\\"token operator\\">-&gt;</span>age <span class=\\"token operator\\">=</span> age<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">int</span> temp<span class=\\"token operator\\">::</span><span class=\\"token function\\">getAge</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span>\\n<span class=\\"token punctuation\\">{</span>\\n    age<span class=\\"token operator\\">+=</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// #Error...error C2166: l-value specifies const object #</span>\\n    <span class=\\"token keyword\\">return</span> age<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    temp <span class=\\"token function\\">a</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">22</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"age= \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> a<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getAge</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}`);export{k as comp,d as data};
