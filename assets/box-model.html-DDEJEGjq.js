import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as s,e as i}from"./app-BlHhf7HR.js";const l={},t=i(`<h2 id="区块盒子和行内盒子" tabindex="-1"><a class="header-anchor" href="#区块盒子和行内盒子"><span>区块盒子和行内盒子</span></a></h2><p>在 CSS 中，我们有几种类型的盒子，一般分为<strong>区块盒子</strong>（block boxes）和<strong>行内盒子</strong>（inline boxes）。类型指的是盒子在页面流中的行为方式以及与页面上其他盒子的关系。</p><p>盒子有<strong>内部显示</strong>（inner display type）和<strong>外部显示</strong>（outer display type）两种类型。</p><h2 id="外部显示类型" tabindex="-1"><a class="header-anchor" href="#外部显示类型"><span>外部显示类型</span></a></h2><ul><li><p>一个拥有 <strong>block</strong> 外部显示类型的盒子会表现出以下行为：</p><ul><li>display:block</li><li>盒子会产生换行。</li><li>width 和 height 属性可以发挥作用。</li><li>内边距、外边距和边框会将其他元素从当前盒子周围“推开”。</li><li>如果未指定 width，方框将沿行向扩展，以填充其容器中的可用空间。在大多数情况下，盒子会变得与其容器一样宽，占据可用空间的 100%。</li></ul></li><li><p>一个拥有 <strong>inline</strong> 外部显示类型的盒子会表现出以下行为：</p><ul><li>display: inline</li><li>盒子不会产生换行。</li><li>width 和 height 属性将不起作用。</li><li>垂直方向的内边距、外边距以及边框会被应用但是不会把其他处于 inline 状态的盒子推开。</li><li>水平方向的内边距、外边距以及边框会被应用且会把其他处于 inline 状态的盒子推开。</li></ul></li></ul><h2 id="内部显示类型" tabindex="-1"><a class="header-anchor" href="#内部显示类型"><span>内部显示类型</span></a></h2><p>例如，可以通过设置 display: flex; 来更改内部显示类型。该元素仍将使用外部显示类型 block 但内部显示类型将变为 flex。该方框的任何直接子代都将成为弹性（flex）项，并按照弹性盒子规范执行。</p><blockquote><p>同时设置外部和内部显示类型：display:block-flex</p></blockquote><h2 id="盒模型的各个部分" tabindex="-1"><a class="header-anchor" href="#盒模型的各个部分"><span>盒模型的各个部分</span></a></h2><h3 id="css标准盒模型" tabindex="-1"><a class="header-anchor" href="#css标准盒模型"><span>CSS标准盒模型</span></a></h3><ul><li>内容盒子：显示内容的区域；使用 inline-size 和 block-size 或 width 和 height 等属性确定其大小。</li><li>内边距盒子：填充位于内容周围的空白处；使用 padding 和相关属性确定其大小。</li><li>边框盒子：边框盒子包住内容和任何填充；使用 border 和相关属性确定其大小。</li><li>外边距盒子：外边距是最外层，其包裹内容、内边距和边框，作为该盒子与其他元素之间的空白；使用 margin 和相关属性确定其大小。</li></ul><h3 id="css替代盒模型" tabindex="-1"><a class="header-anchor" href="#css替代盒模型"><span>CSS替代盒模型</span></a></h3><p><strong>width=内容盒width+padding+border</strong></p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 350px<span class="token punctuation">;</span>
  <span class="token property">inline-size</span><span class="token punctuation">:</span> 350px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
  <span class="token property">block-size</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 5px solid black<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="外边距" tabindex="-1"><a class="header-anchor" href="#外边距"><span>外边距</span></a></h2><ul><li>margin-top</li><li>margin-right</li><li>margin-bottom</li><li>margin-left</li></ul><h3 id="外边距折叠" tabindex="-1"><a class="header-anchor" href="#外边距折叠"><span>外边距折叠</span></a></h3><ul><li>两个正外边距将合并为一个外边距。其大小等于最大的单个外边距。</li><li>两个负外边距会折叠，并使用最小（离零最远）的值。</li><li>如果其中一个外边距为负值，其值将从总值中减去。</li></ul>`,18),a=[t];function o(p,r){return e(),s("div",null,a)}const u=n(l,[["render",o],["__file","box-model.html.vue"]]),h=JSON.parse(`{"path":"/web/css/box-model.html","title":"盒模型","lang":"zh-CN","frontmatter":{"title":"盒模型","category":"web","description":"区块盒子和行内盒子 在 CSS 中，我们有几种类型的盒子，一般分为区块盒子（block boxes）和行内盒子（inline boxes）。类型指的是盒子在页面流中的行为方式以及与页面上其他盒子的关系。 盒子有内部显示（inner display type）和外部显示（outer display type）两种类型。 外部显示类型 一个拥有 block...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/learning/web/css/box-model.html"}],["meta",{"property":"og:site_name","content":"Mua'dib Guide "}],["meta",{"property":"og:title","content":"盒模型"}],["meta",{"property":"og:description","content":"区块盒子和行内盒子 在 CSS 中，我们有几种类型的盒子，一般分为区块盒子（block boxes）和行内盒子（inline boxes）。类型指的是盒子在页面流中的行为方式以及与页面上其他盒子的关系。 盒子有内部显示（inner display type）和外部显示（outer display type）两种类型。 外部显示类型 一个拥有 block..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-02T15:48:11.000Z"}],["meta",{"property":"article:author","content":"Guide"}],["meta",{"property":"article:modified_time","content":"2024-09-02T15:48:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"盒模型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-02T15:48:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Guide\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"区块盒子和行内盒子","slug":"区块盒子和行内盒子","link":"#区块盒子和行内盒子","children":[]},{"level":2,"title":"外部显示类型","slug":"外部显示类型","link":"#外部显示类型","children":[]},{"level":2,"title":"内部显示类型","slug":"内部显示类型","link":"#内部显示类型","children":[]},{"level":2,"title":"盒模型的各个部分","slug":"盒模型的各个部分","link":"#盒模型的各个部分","children":[{"level":3,"title":"CSS标准盒模型","slug":"css标准盒模型","link":"#css标准盒模型","children":[]},{"level":3,"title":"CSS替代盒模型","slug":"css替代盒模型","link":"#css替代盒模型","children":[]}]},{"level":2,"title":"外边距","slug":"外边距","link":"#外边距","children":[{"level":3,"title":"外边距折叠","slug":"外边距折叠","link":"#外边距折叠","children":[]}]}],"git":{"createdTime":1725292091000,"updatedTime":1725292091000,"contributors":[{"name":"tonygong","email":"280880907@163.com","commits":1}]},"readingTime":{"minutes":2.36,"words":707},"filePathRelative":"web/css/box-model.md","localizedDate":"2024年9月2日","excerpt":"<h2>区块盒子和行内盒子</h2>\\n<p>在 CSS 中，我们有几种类型的盒子，一般分为<strong>区块盒子</strong>（block boxes）和<strong>行内盒子</strong>（inline boxes）。类型指的是盒子在页面流中的行为方式以及与页面上其他盒子的关系。</p>\\n<p>盒子有<strong>内部显示</strong>（inner display type）和<strong>外部显示</strong>（outer display type）两种类型。</p>\\n<h2>外部显示类型</h2>\\n<ul>\\n<li>\\n<p>一个拥有 <strong>block</strong> 外部显示类型的盒子会表现出以下行为：</p>\\n<ul>\\n<li>display:block</li>\\n<li>盒子会产生换行。</li>\\n<li>width 和 height 属性可以发挥作用。</li>\\n<li>内边距、外边距和边框会将其他元素从当前盒子周围“推开”。</li>\\n<li>如果未指定 width，方框将沿行向扩展，以填充其容器中的可用空间。在大多数情况下，盒子会变得与其容器一样宽，占据可用空间的 100%。</li>\\n</ul>\\n</li>\\n<li>\\n<p>一个拥有 <strong>inline</strong> 外部显示类型的盒子会表现出以下行为：</p>\\n<ul>\\n<li>display: inline</li>\\n<li>盒子不会产生换行。</li>\\n<li>width 和 height 属性将不起作用。</li>\\n<li>垂直方向的内边距、外边距以及边框会被应用但是不会把其他处于 inline 状态的盒子推开。</li>\\n<li>水平方向的内边距、外边距以及边框会被应用且会把其他处于 inline 状态的盒子推开。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{u as comp,h as data};
