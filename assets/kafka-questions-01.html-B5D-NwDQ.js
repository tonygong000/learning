import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as i,c,a,b as n,d as e,e as t}from"./app-C4hTQQaE.js";const l={},r=t('<h2 id="kafka-基础" tabindex="-1"><a class="header-anchor" href="#kafka-基础"><span>Kafka 基础</span></a></h2><h3 id="kafka-是什么-主要应用场景有哪些" tabindex="-1"><a class="header-anchor" href="#kafka-是什么-主要应用场景有哪些"><span>Kafka 是什么？主要应用场景有哪些？</span></a></h3><p>Kafka 是一个分布式流式处理平台。这到底是什么意思呢？</p><p>流平台具有三个关键功能：</p><ol><li><strong>消息队列</strong>：发布和订阅消息流，这个功能类似于消息队列，这也是 Kafka 也被归类为消息队列的原因。</li><li><strong>容错的持久方式存储记录消息流</strong>：Kafka 会把消息持久化到磁盘，有效避免了消息丢失的风险。</li><li><strong>流式处理平台：</strong> 在消息发布的时候进行处理，Kafka 提供了一个完整的流式处理类库。</li></ol><p>Kafka 主要有两大应用场景：</p><ol><li><strong>消息队列</strong>：建立实时流数据管道，以可靠地在系统或应用程序之间获取数据。</li><li><strong>数据处理：</strong> 构建实时的流数据处理程序来转换或处理数据流。</li></ol><h3 id="和其他消息队列相比-kafka-的优势在哪里" tabindex="-1"><a class="header-anchor" href="#和其他消息队列相比-kafka-的优势在哪里"><span>和其他消息队列相比,Kafka 的优势在哪里？</span></a></h3><p>我们现在经常提到 Kafka 的时候就已经默认它是一个非常优秀的消息队列了，我们也会经常拿它跟 RocketMQ、RabbitMQ 对比。我觉得 Kafka 相比其他消息队列主要的优势如下：</p><ol><li><strong>极致的性能</strong>：基于 Scala 和 Java 语言开发，设计中大量使用了批量处理和异步的思想，最高可以每秒处理千万级别的消息。</li><li><strong>生态系统兼容性无可匹敌</strong>：Kafka 与周边生态系统的兼容性是最好的没有之一，尤其在大数据和流计算领域。</li></ol><p>实际上在早期的时候 Kafka 并不是一个合格的消息队列，早期的 Kafka 在消息队列领域就像是一个衣衫褴褛的孩子一样，功能不完备并且有一些小问题比如丢失消息、不保证消息可靠性等等。当然，这也和 LinkedIn 最早开发 Kafka 用于处理海量的日志有很大关系，哈哈哈，人家本来最开始就不是为了作为消息队列滴，谁知道后面误打误撞在消息队列领域占据了一席之地。</p><p>随着后续的发展，这些短板都被 Kafka 逐步修复完善。所以，<strong>Kafka 作为消息队列不可靠这个说法已经过时！</strong></p><h3 id="队列模型了解吗-kafka-的消息模型知道吗" tabindex="-1"><a class="header-anchor" href="#队列模型了解吗-kafka-的消息模型知道吗"><span>队列模型了解吗？Kafka 的消息模型知道吗？</span></a></h3>',13),u={href:"https://github.com/Snailclimb/JavaGuide",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/Snailclimb/JavaGuide#%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E4%B8%AD%E9%97%B4%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"},k=t('<h4 id="队列模型-早期的消息模型" tabindex="-1"><a class="header-anchor" href="#队列模型-早期的消息模型"><span>队列模型：早期的消息模型</span></a></h4><figure><img src="https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/队列模型23.png" alt="队列模型" tabindex="0"><figcaption>队列模型</figcaption></figure><p><strong>使用队列（Queue）作为消息通信载体，满足生产者与消费者模式，一条消息只能被一个消费者使用，未被消费的消息在队列中保留直到被消费或超时。</strong> 比如：我们生产者发送 100 条消息的话，两个消费者来消费一般情况下两个消费者会按照消息发送的顺序各自消费一半（也就是你一个我一个的消费。）</p><p><strong>队列模型存在的问题：</strong></p><p>假如我们存在这样一种情况：我们需要将生产者产生的消息分发给多个消费者，并且每个消费者都能接收到完整的消息内容。</p><p>这种情况，队列模型就不好解决了。很多比较杠精的人就说：我们可以为每个消费者创建一个单独的队列，让生产者发送多份。这是一种非常愚蠢的做法，浪费资源不说，还违背了使用消息队列的目的。</p><h4 id="发布-订阅模型-kafka-消息模型" tabindex="-1"><a class="header-anchor" href="#发布-订阅模型-kafka-消息模型"><span>发布-订阅模型:Kafka 消息模型</span></a></h4><p>发布-订阅模型主要是为了解决队列模型存在的问题。</p><figure><img src="https://oss.javaguide.cn/java-guide-blog/发布订阅模型.png" alt="发布订阅模型" tabindex="0"><figcaption>发布订阅模型</figcaption></figure><p>发布订阅模型（Pub-Sub） 使用<strong>主题（Topic）</strong> 作为消息通信载体，类似于<strong>广播模式</strong>；发布者发布一条消息，该消息通过主题传递给所有的订阅者，<strong>在一条消息广播之后才订阅的用户则是收不到该条消息的</strong>。</p><p><strong>在发布 - 订阅模型中，如果只有一个订阅者，那它和队列模型就基本是一样的了。所以说，发布 - 订阅模型在功能层面上是可以兼容队列模型的。</strong></p><p><strong>Kafka 采用的就是发布 - 订阅模型。</strong></p><blockquote><p><strong>RocketMQ 的消息模型和 Kafka 基本是完全一样的。唯一的区别是 Kafka 中没有队列这个概念，与之对应的是 Partition（分区）。</strong></p></blockquote><h2 id="kafka-核心概念" tabindex="-1"><a class="header-anchor" href="#kafka-核心概念"><span>Kafka 核心概念</span></a></h2><h3 id="什么是-producer、consumer、broker、topic、partition" tabindex="-1"><a class="header-anchor" href="#什么是-producer、consumer、broker、topic、partition"><span>什么是 Producer、Consumer、Broker、Topic、Partition？</span></a></h3><p>Kafka 将生产者发布的消息发送到 <strong>Topic（主题）</strong> 中，需要这些消息的消费者可以订阅这些 <strong>Topic（主题）</strong>，如下图所示：</p><figure><img src="https://oss.javaguide.cn/github/javaguide/high-performance/message-queue20210507200944439.png" alt="" tabindex="0"><figcaption></figcaption></figure><p>上面这张图也为我们引出了，Kafka 比较重要的几个概念：</p><ol><li><strong>Producer（生产者）</strong> : 产生消息的一方。</li><li><strong>Consumer（消费者）</strong> : 消费消息的一方。</li><li><strong>Broker（代理）</strong> : 可以看作是一个独立的 Kafka 实例。多个 Kafka Broker 组成一个 Kafka Cluster。</li></ol><p>同时，你一定也注意到每个 Broker 中又包含了 Topic 以及 Partition 这两个重要的概念：</p><ul><li><strong>Topic（主题）</strong> : Producer 将消息发送到特定的主题，Consumer 通过订阅特定的 Topic(主题) 来消费消息。</li><li><strong>Partition（分区）</strong> : Partition 属于 Topic 的一部分。一个 Topic 可以有多个 Partition ，并且同一 Topic 下的 Partition 可以分布在不同的 Broker 上，这也就表明一个 Topic 可以横跨多个 Broker 。这正如我上面所画的图一样。</li></ul><blockquote><p>划重点：<strong>Kafka 中的 Partition（分区） 实际上可以对应成为消息队列中的队列。这样是不是更好理解一点？</strong></p></blockquote><h3 id="kafka-的多副本机制了解吗-带来了什么好处" tabindex="-1"><a class="header-anchor" href="#kafka-的多副本机制了解吗-带来了什么好处"><span>Kafka 的多副本机制了解吗？带来了什么好处？</span></a></h3><p>还有一点我觉得比较重要的是 Kafka 为分区（Partition）引入了多副本（Replica）机制。分区（Partition）中的多个副本之间会有一个叫做 leader 的家伙，其他副本称为 follower。我们发送的消息会被发送到 leader 副本，然后 follower 副本才能从 leader 副本中拉取消息进行同步。</p><blockquote><p>生产者和消费者只与 leader 副本交互。你可以理解为其他副本只是 leader 副本的拷贝，它们的存在只是为了保证消息存储的安全性。当 leader 副本发生故障时会从 follower 中选举出一个 leader,但是 follower 中如果有和 leader 同步程度达不到要求的参加不了 leader 的竞选。</p></blockquote><p><strong>Kafka 的多分区（Partition）以及多副本（Replica）机制有什么好处呢？</strong></p><ol><li>Kafka 通过给特定 Topic 指定多个 Partition, 而各个 Partition 可以分布在不同的 Broker 上, 这样便能提供比较好的并发能力（负载均衡）。</li><li>Partition 可以指定对应的 Replica 数, 这也极大地提高了消息存储的安全性, 提高了容灾能力，不过也相应的增加了所需要的存储空间。</li></ol><h2 id="zookeeper-和-kafka" tabindex="-1"><a class="header-anchor" href="#zookeeper-和-kafka"><span>Zookeeper 和 Kafka</span></a></h2><h3 id="zookeeper-在-kafka-中的作用是什么" tabindex="-1"><a class="header-anchor" href="#zookeeper-在-kafka-中的作用是什么"><span>Zookeeper 在 Kafka 中的作用是什么？</span></a></h3>',29),f={href:"https://www.jianshu.com/p/a036405f989c",target:"_blank",rel:"noopener noreferrer"},g=t('<p>下图就是我的本地 Zookeeper ，它成功和我本地的 Kafka 关联上（以下文件夹结构借助 idea 插件 Zookeeper tool 实现）。</p><img src="https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/zookeeper-kafka.jpg" style="zoom:50%;"><p>ZooKeeper 主要为 Kafka 提供元数据的管理的功能。</p><p>从图中我们可以看出，Zookeeper 主要为 Kafka 做了下面这些事情：</p><ol><li><strong>Broker 注册</strong>：在 Zookeeper 上会有一个专门<strong>用来进行 Broker 服务器列表记录</strong>的节点。每个 Broker 在启动时，都会到 Zookeeper 上进行注册，即到 <code>/brokers/ids</code> 下创建属于自己的节点。每个 Broker 就会将自己的 IP 地址和端口等信息记录到该节点中去</li><li><strong>Topic 注册</strong>：在 Kafka 中，同一个<strong>Topic 的消息会被分成多个分区</strong>并将其分布在多个 Broker 上，<strong>这些分区信息及与 Broker 的对应关系</strong>也都是由 Zookeeper 在维护。比如我创建了一个名字为 my-topic 的主题并且它有两个分区，对应到 zookeeper 中会创建这些文件夹：<code>/brokers/topics/my-topic/Partitions/0</code>、<code>/brokers/topics/my-topic/Partitions/1</code></li><li><strong>负载均衡</strong>：上面也说过了 Kafka 通过给特定 Topic 指定多个 Partition, 而各个 Partition 可以分布在不同的 Broker 上, 这样便能提供比较好的并发能力。 对于同一个 Topic 的不同 Partition，Kafka 会尽力将这些 Partition 分布到不同的 Broker 服务器上。当生产者产生消息后也会尽量投递到不同 Broker 的 Partition 里面。当 Consumer 消费的时候，Zookeeper 可以根据当前的 Partition 数量以及 Consumer 数量来实现动态负载均衡。</li><li>……</li></ol><h3 id="使用-kafka-能否不引入-zookeeper" tabindex="-1"><a class="header-anchor" href="#使用-kafka-能否不引入-zookeeper"><span>使用 Kafka 能否不引入 Zookeeper?</span></a></h3><p>在 Kafka 2.8 之前，Kafka 最被大家诟病的就是其重度依赖于 Zookeeper。在 Kafka 2.8 之后，引入了基于 Raft 协议的 KRaft 模式，不再依赖 Zookeeper，大大简化了 Kafka 的架构，让你可以以一种轻量级的方式来使用 Kafka。</p><p>不过，要提示一下：<strong>如果要使用 KRaft 模式的话，建议选择较高版本的 Kafka，因为这个功能还在持续完善优化中。Kafka 3.3.1 版本是第一个将 KRaft（Kafka Raft）共识协议标记为生产就绪的版本。</strong></p>',8),v={href:"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/kafka3.3.1-kraft-",target:"_blank",rel:"noopener noreferrer"},m=t('<h2 id="kafka-消费顺序、消息丢失和重复消费" tabindex="-1"><a class="header-anchor" href="#kafka-消费顺序、消息丢失和重复消费"><span>Kafka 消费顺序、消息丢失和重复消费</span></a></h2><h3 id="kafka-如何保证消息的消费顺序" tabindex="-1"><a class="header-anchor" href="#kafka-如何保证消息的消费顺序"><span>Kafka 如何保证消息的消费顺序？</span></a></h3><p>我们在使用消息队列的过程中经常有业务场景需要严格保证消息的消费顺序，比如我们同时发了 2 个消息，这 2 个消息对应的操作分别对应的数据库操作是：</p><ol><li>更改用户会员等级。</li><li>根据会员等级计算订单价格。</li></ol><p>假如这两条消息的消费顺序不一样造成的最终结果就会截然不同。</p><p>我们知道 Kafka 中 Partition(分区)是真正保存消息的地方，我们发送的消息都被放在了这里。而我们的 Partition(分区) 又存在于 Topic(主题) 这个概念中，并且我们可以给特定 Topic 指定多个 Partition。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/KafkaTopicPartionsLayout.png" alt="" tabindex="0"><figcaption></figcaption></figure><p>每次添加消息到 Partition(分区) 的时候都会采用尾加法，如上图所示。 <strong>Kafka 只能为我们保证 Partition(分区) 中的消息有序。</strong></p><blockquote><p>消息在被追加到 Partition(分区)的时候都会分配一个特定的偏移量（offset）。Kafka 通过偏移量（offset）来保证消息在分区内的顺序性。</p></blockquote><p>所以，我们就有一种很简单的保证消息消费顺序的方法：<strong>1 个 Topic 只对应一个 Partition</strong>。这样当然可以解决问题，但是破坏了 Kafka 的设计初衷。</p><p>Kafka 中发送 1 条消息的时候，可以指定 topic, partition, key,data（数据） 4 个参数。如果你发送消息的时候指定了 Partition 的话，所有消息都会被发送到指定的 Partition。并且，同一个 key 的消息可以保证只发送到同一个 partition，这个我们可以采用表/对象的 id 来作为 key 。</p><p>总结一下，对于如何保证 Kafka 中消息消费的顺序，有了下面两种方法：</p><ol><li>1 个 Topic 只对应一个 Partition。</li><li>（推荐）发送消息的时候指定 key/Partition。</li></ol><p>当然不仅仅只有上面两种方法，上面两种方法是我觉得比较好理解的，</p><h3 id="kafka-如何保证消息不丢失" tabindex="-1"><a class="header-anchor" href="#kafka-如何保证消息不丢失"><span>Kafka 如何保证消息不丢失？</span></a></h3><h4 id="生产者丢失消息的情况" tabindex="-1"><a class="header-anchor" href="#生产者丢失消息的情况"><span>生产者丢失消息的情况</span></a></h4><p>生产者(Producer) 调用<code>send</code>方法发送消息之后，消息可能因为网络问题并没有发送过去。</p><p>所以，我们不能默认在调用<code>send</code>方法发送消息之后消息发送成功了。为了确定消息是发送成功，我们要判断消息发送的结果。但是要注意的是 Kafka 生产者(Producer) 使用 <code>send</code> 方法发送消息实际上是异步的操作，我们可以通过 <code>get()</code>方法获取调用结果，但是这样也让它变为了同步操作，示例代码如下：</p>',18),h={href:"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247486269&idx=2&sn=ec00417ad641dd8c3d145d74cafa09ce&chksm=cea244f6f9d5cde0c8eb233fcc4cf82e11acd06446719a7af55230649863a3ddd95f78d111de&token=1633957262&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},b=t(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">SendResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> sendResult <span class="token operator">=</span> kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>sendResult<span class="token punctuation">.</span><span class="token function">getRecordMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;生产者成功发送消息到&quot;</span> <span class="token operator">+</span> sendResult<span class="token punctuation">.</span><span class="token function">getProducerRecord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;-&gt; &quot;</span> <span class="token operator">+</span> sendRe
              sult<span class="token punctuation">.</span><span class="token function">getProducerRecord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是一般不推荐这么做！可以采用为其添加回调函数的形式，示例代码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>        <span class="token class-name">ListenableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SendResult</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>
        future<span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span>result <span class="token operator">-&gt;</span> logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;生产者成功发送消息到topic:{} partition:{}的消息&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getRecordMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getRecordMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                ex <span class="token operator">-&gt;</span> logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;生产者发送消失败，原因：{}&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果消息发送失败的话，我们检查失败的原因之后重新发送即可！</p><p>另外，这里推荐为 Producer 的<code>retries</code>（重试次数）设置一个比较合理的值，一般是 3 ，但是为了保证消息不丢失的话一般会设置比较大一点。设置完成之后，当出现网络问题之后能够自动重试消息发送，避免消息丢失。另外，建议还要设置重试间隔，因为间隔太小的话重试的效果就不明显了，网络波动一次你 3 次一下子就重试完了。</p><h4 id="消费者丢失消息的情况" tabindex="-1"><a class="header-anchor" href="#消费者丢失消息的情况"><span>消费者丢失消息的情况</span></a></h4><p>我们知道消息在被追加到 Partition(分区)的时候都会分配一个特定的偏移量（offset）。偏移量（offset)表示 Consumer 当前消费到的 Partition(分区)的所在的位置。Kafka 通过偏移量（offset）可以保证消息在分区内的顺序性。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/kafka-offset.jpg" alt="kafka offset" tabindex="0"><figcaption>kafka offset</figcaption></figure><p>当消费者拉取到了分区的某个消息之后，消费者会自动提交了 offset。自动提交的话会有一个问题，试想一下，当消费者刚拿到这个消息准备进行真正消费的时候，突然挂掉了，消息实际上并没有被消费，但是 offset 却被自动提交了。</p><p><strong>解决办法也比较粗暴，我们手动关闭自动提交 offset，每次在真正消费完消息之后再自己手动提交 offset 。</strong> 但是，细心的朋友一定会发现，这样会带来消息被重新消费的问题。比如你刚刚消费完消息之后，还没提交 offset，结果自己挂掉了，那么这个消息理论上就会被消费两次。</p><h4 id="kafka-弄丢了消息" tabindex="-1"><a class="header-anchor" href="#kafka-弄丢了消息"><span>Kafka 弄丢了消息</span></a></h4><p>我们知道 Kafka 为分区（Partition）引入了多副本（Replica）机制。分区（Partition）中的多个副本之间会有一个叫做 leader 的家伙，其他副本称为 follower。我们发送的消息会被发送到 leader 副本，然后 follower 副本才能从 leader 副本中拉取消息进行同步。生产者和消费者只与 leader 副本交互。你可以理解为其他副本只是 leader 副本的拷贝，它们的存在只是为了保证消息存储的安全性。</p><p><strong>试想一种情况：假如 leader 副本所在的 broker 突然挂掉，那么就要从 follower 副本重新选出一个 leader ，但是 leader 的数据还有一些没有被 follower 副本的同步的话，就会造成消息丢失。</strong></p><p><strong>设置 acks = all</strong></p><p>解决办法就是我们设置 <strong>acks = all</strong>。acks 是 Kafka 生产者(Producer) 很重要的一个参数。</p><p>acks 的默认值即为 1，代表我们的消息被 leader 副本接收之后就算被成功发送。当我们配置 <strong>acks = all</strong> 表示只有所有 ISR 列表的副本全部收到消息时，生产者才会接收到来自服务器的响应. 这种模式是最高级别的，也是最安全的，可以确保不止一个 Broker 接收到了消息. 该模式的延迟会很高.</p><p><strong>设置 replication.factor &gt;= 3</strong></p><p>为了保证 leader 副本能有 follower 副本能同步消息，我们一般会为 topic 设置 <strong>replication.factor &gt;= 3</strong>。这样就可以保证每个 分区(partition) 至少有 3 个副本。虽然造成了数据冗余，但是带来了数据的安全性。</p><p><strong>设置 min.insync.replicas &gt; 1</strong></p><p>一般情况下我们还需要设置 <strong>min.insync.replicas&gt; 1</strong> ，这样配置代表消息至少要被写入到 2 个副本才算是被成功发送。<strong>min.insync.replicas</strong> 的默认值为 1 ，在实际生产中应尽量避免默认值 1。</p><p>但是，为了保证整个 Kafka 服务的高可用性，你需要确保 <strong>replication.factor &gt; min.insync.replicas</strong> 。为什么呢？设想一下假如两者相等的话，只要是有一个副本挂掉，整个分区就无法正常工作了。这明显违反高可用性！一般推荐设置成 <strong>replication.factor = min.insync.replicas + 1</strong>。</p><p><strong>设置 unclean.leader.election.enable = false</strong></p><blockquote><p><strong>Kafka 0.11.0.0 版本开始 unclean.leader.election.enable 参数的默认值由原来的 true 改为 false</strong></p></blockquote><p>我们最开始也说了我们发送的消息会被发送到 leader 副本，然后 follower 副本才能从 leader 副本中拉取消息进行同步。多个 follower 副本之间的消息同步情况不一样，当我们配置了 <strong>unclean.leader.election.enable = false</strong> 的话，当 leader 副本发生故障时就不会从 follower 副本中和 leader 同步程度达不到要求的副本中选择出 leader ，这样降低了消息丢失的可能性。</p><h3 id="kafka-如何保证消息不重复消费" tabindex="-1"><a class="header-anchor" href="#kafka-如何保证消息不重复消费"><span>Kafka 如何保证消息不重复消费？</span></a></h3><p><strong>kafka 出现消息重复消费的原因：</strong></p><ul><li>服务端侧已经消费的数据没有成功提交 offset（根本原因）。</li><li>Kafka 侧 由于服务端处理业务时间长或者网络链接等等原因让 Kafka 认为服务假死，触发了分区 rebalance。</li></ul><p><strong>解决方案：</strong></p><ul><li>消费消息服务做幂等校验，比如 Redis 的 set、MySQL 的主键等天然的幂等功能。这种方法最有效。</li><li>将 <strong><code>enable.auto.commit</code></strong> 参数设置为 false，关闭自动提交，开发者在代码中手动提交 offset。那么这里会有个问题：<strong>什么时候提交 offset 合适？</strong><ul><li>处理完消息再提交：依旧有消息重复消费的风险，和自动提交一样</li><li>拉取到消息即提交：会有消息丢失的风险。允许消息延时的场景，一般会采用这种方式。然后，通过定时任务在业务不繁忙（比如凌晨）的时候做数据兜底。</li></ul></li></ul><h2 id="kafka-重试机制" tabindex="-1"><a class="header-anchor" href="#kafka-重试机制"><span>Kafka 重试机制</span></a></h2><p>在 Kafka 如何保证消息不丢失这里，我们提到了 Kafka 的重试机制。由于这部分内容较为重要，我们这里再来详细介绍一下。</p>`,31),K={href:"https://mvnrepository.com/artifact/org.springframework.kafka/spring-kafka/2.9.3",target:"_blank",rel:"noopener noreferrer"},x=t(`<h3 id="消费失败会怎么样" tabindex="-1"><a class="header-anchor" href="#消费失败会怎么样"><span>消费失败会怎么样？</span></a></h3><p>在消费过程中，当其中一个消息消费异常时，会不会卡住后续队列消息的消费？这样业务岂不是卡住了？</p><p>生产者代码：</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code> for (int i = 0; i &lt; 10; i++) {
   kafkaTemplate.send(KafkaConst.TEST_TOPIC, String.valueOf(i))
 }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>消费者消代码：</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>   @KafkaListener(topics = {KafkaConst.TEST_TOPIC},groupId = &quot;apple&quot;)
   private void customer(String message) throws InterruptedException {
       log.info(&quot;kafka customer:{}&quot;,message);
       Integer n = Integer.parseInt(message);
       if (n%5==0){
           throw new  RuntimeException();
       }
   }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在默认配置下，当消费异常会进行重试，重试多次后会跳过当前消息，继续进行后续消息的消费，不会一直卡在当前消息。下面是一段消费的日志，可以看出当 <code>test-0@95</code> 重试多次后会被跳过。</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>2023-08-10 12:03:32.918 DEBUG 9700 --- [ntainer#0-0-C-1] o.s.kafka.listener.DefaultErrorHandler   : Skipping seek of: test-0@95
2023-08-10 12:03:32.918 TRACE 9700 --- [ntainer#0-0-C-1] o.s.kafka.listener.DefaultErrorHandler   : Seeking: test-0 to: 96
2023-08-10 12:03:32.918  INFO 9700 --- [ntainer#0-0-C-1] o.a.k.clients.consumer.KafkaConsumer     : [Consumer clientId=consumer-apple-1, groupId=apple] Seeking to offset 96 for partition test-0

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，即使某个消息消费异常，Kafka 消费者仍然能够继续消费后续的消息，不会一直卡在当前消息，保证了业务的正常进行。</p><h3 id="默认会重试多少次" tabindex="-1"><a class="header-anchor" href="#默认会重试多少次"><span>默认会重试多少次？</span></a></h3><p>默认配置下，消费异常会进行重试，重试次数是多少, 重试是否有时间间隔？</p><p>看源码 <code>FailedRecordTracker</code> 类有个 <code>recovered</code> 函数，返回 Boolean 值判断是否要进行重试，下面是这个函数中判断是否重试的逻辑：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">recovered</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span> <span class="token operator">&lt;</span><span class="token generics"><span class="token punctuation">&lt;</span> <span class="token operator">?</span> <span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token punctuation">&gt;</span></span> record<span class="token punctuation">,</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">,</span>
	    <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">MessageListenerContainer</span> container<span class="token punctuation">,</span>
	    <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Consumer</span> <span class="token operator">&lt;</span><span class="token generics"><span class="token punctuation">&lt;</span> <span class="token operator">?</span> <span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>

	    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>noRetries<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">// 不支持重试</span>
	        <span class="token function">attemptRecovery</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>
	        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	    <span class="token punctuation">}</span>
     <span class="token comment">// 取已经失败的消费记录集合</span>
	    <span class="token class-name">Map</span> <span class="token generics"><span class="token punctuation">&lt;</span> <span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> <span class="token class-name">FailedRecord</span> <span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>failures<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	        <span class="token keyword">this</span><span class="token punctuation">.</span>failures<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span> <span class="token generics"><span class="token punctuation">&lt;</span> <span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	        map <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>failures<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	    <span class="token punctuation">}</span>
     <span class="token comment">//  获取消费记录所在的Topic和Partition</span>
	    <span class="token class-name">TopicPartition</span> topicPartition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TopicPartition</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	    <span class="token class-name">FailedRecord</span> failedRecord <span class="token operator">=</span> <span class="token function">getFailedRecordInstance</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> map<span class="token punctuation">,</span> topicPartition<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">// 通知注册的重试监听器，消息投递失败</span>
	    <span class="token keyword">this</span><span class="token punctuation">.</span>retryListeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>rl <span class="token operator">-</span> <span class="token operator">&gt;</span>
	        rl<span class="token punctuation">.</span><span class="token function">failedDelivery</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> failedRecord<span class="token punctuation">.</span><span class="token function">getDeliveryAttempts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	    <span class="token comment">// 获取下一次重试的时间间隔</span>
    <span class="token keyword">long</span> nextBackOff <span class="token operator">=</span> failedRecord<span class="token punctuation">.</span><span class="token function">getBackOffExecution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextBackOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextBackOff <span class="token operator">!=</span> <span class="token class-name">BackOffExecution</span><span class="token punctuation">.</span><span class="token constant">STOP</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	        <span class="token keyword">this</span><span class="token punctuation">.</span>backOffHandler<span class="token punctuation">.</span><span class="token function">onNextBackOff</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> nextBackOff<span class="token punctuation">)</span><span class="token punctuation">;</span>
	        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
	        <span class="token function">attemptRecovery</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> topicPartition<span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>
	        map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>topicPartition<span class="token punctuation">)</span><span class="token punctuation">;</span>
	        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	            <span class="token keyword">this</span><span class="token punctuation">.</span>failures<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	        <span class="token punctuation">}</span>
	        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	    <span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中， <code>BackOffExecution.STOP</code> 的值为 -1。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BackOffExecution</span> <span class="token punctuation">{</span>

	<span class="token keyword">long</span> <span class="token constant">STOP</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">long</span> <span class="token function">nextBackOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>nextBackOff</code> 的值调用 <code>BackOff</code> 类的 <code>nextBackOff()</code> 函数。如果当前执行次数大于最大执行次数则返回 <code>STOP</code>，既超过这个最大执行次数后才会停止重试。</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>public long nextBackOff() {
  this.currentAttempts++;
  if (this.currentAttempts &lt;= getMaxAttempts()) {
    return getInterval();
  }
  else {
    return STOP;
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么这个 <code>getMaxAttempts</code> 的值又是多少呢？回到最开始，当执行出错会进入 <code>DefaultErrorHandler</code> 。<code>DefaultErrorHandler</code> 默认的构造函数是：</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>public DefaultErrorHandler() {
  this(null, SeekUtils.DEFAULT_BACK_OFF);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SeekUtils.DEFAULT_BACK_OFF</code> 定义的是:</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>public static final int DEFAULT_MAX_FAILURES = 10;

public static final FixedBackOff DEFAULT_BACK_OFF = new FixedBackOff(0, DEFAULT_MAX_FAILURES - 1);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>DEFAULT_MAX_FAILURES</code> 的值是 10，<code>currentAttempts</code> 从 0 到 9，所以总共会执行 10 次，每次重试的时间间隔为 0。</p><p>最后，简单总结一下：Kafka 消费者在默认配置下会进行最多 10 次 的重试，每次重试的时间间隔为 0，即立即进行重试。如果在 10 次重试后仍然无法成功消费消息，则不再进行重试，消息将被视为消费失败。</p><h3 id="如何自定义重试次数以及时间间隔" tabindex="-1"><a class="header-anchor" href="#如何自定义重试次数以及时间间隔"><span>如何自定义重试次数以及时间间隔?</span></a></h3><p>从上面的代码可以知道，默认错误处理器的重试次数以及时间间隔是由 <code>FixedBackOff</code> 控制的，<code>FixedBackOff</code> 是 <code>DefaultErrorHandler</code> 初始化时默认的。所以自定义重试次数以及时间间隔，只需要在 <code>DefaultErrorHandler</code> 初始化的时候传入自定义的 <code>FixedBackOff</code> 即可。重新实现一个 <code>KafkaListenerContainerFactory</code> ，调用 <code>setCommonErrorHandler</code> 设置新的自定义的错误处理器就可以实现。</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>@Bean
public KafkaListenerContainerFactory kafkaListenerContainerFactory(ConsumerFactory&lt;String, String&gt; consumerFactory) {
    ConcurrentKafkaListenerContainerFactory factory = new ConcurrentKafkaListenerContainerFactory();
    // 自定义重试时间间隔以及次数
    FixedBackOff fixedBackOff = new FixedBackOff(1000, 5);
    factory.setCommonErrorHandler(new DefaultErrorHandler(fixedBackOff));
    factory.setConsumerFactory(consumerFactory);
    return factory;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何在重试失败后进行告警" tabindex="-1"><a class="header-anchor" href="#如何在重试失败后进行告警"><span>如何在重试失败后进行告警?</span></a></h3><p>自定义重试失败后逻辑，需要手动实现，以下是一个简单的例子，重写 <code>DefaultErrorHandler</code> 的 <code>handleRemaining</code> 函数，加上自定义的告警等操作。</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>@Slf4j
public class DelErrorHandler extends DefaultErrorHandler {

    public DelErrorHandler(FixedBackOff backOff) {
        super(null,backOff);
    }

    @Override
    public void handleRemaining(Exception thrownException, List&lt;ConsumerRecord&lt;?, ?&gt;&gt; records, Consumer&lt;?, ?&gt; consumer, MessageListenerContainer container) {
        super.handleRemaining(thrownException, records, consumer, container);
        log.info(&quot;重试多次失败&quot;);
        // 自定义操作
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>DefaultErrorHandler</code> 只是默认的一个错误处理器，Spring Kafka 还提供了 <code>CommonErrorHandler</code> 接口。手动实现 <code>CommonErrorHandler</code> 就可以实现更多的自定义操作，有很高的灵活性。例如根据不同的错误类型，实现不同的重试逻辑以及业务逻辑等。</p><h3 id="重试失败后的数据如何再次处理" tabindex="-1"><a class="header-anchor" href="#重试失败后的数据如何再次处理"><span>重试失败后的数据如何再次处理?</span></a></h3><p>当达到最大重试次数后，数据会直接被跳过，继续向后进行。当代码修复后，如何重新消费这些重试失败的数据呢？</p><p><strong>死信队列（Dead Letter Queue，简称 DLQ）</strong> 是消息中间件中的一种特殊队列。它主要用于处理无法被消费者正确处理的消息，通常是因为消息格式错误、处理失败、消费超时等情况导致的消息被&quot;丢弃&quot;或&quot;死亡&quot;的情况。当消息进入队列后，消费者会尝试处理它。如果处理失败，或者超过一定的重试次数仍无法被成功处理，消息可以发送到死信队列中，而不是被永久性地丢弃。在死信队列中，可以进一步分析、处理这些无法正常消费的消息，以便定位问题、修复错误，并采取适当的措施。</p><p><code>@RetryableTopic</code> 是 Spring Kafka 中的一个注解,它用于配置某个 Topic 支持消息重试，更推荐使用这个注解来完成重试。</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>// 重试 5 次，重试间隔 100 毫秒,最大间隔 1 秒
@RetryableTopic(
        attempts = &quot;5&quot;,
        backoff = @Backoff(delay = 100, maxDelay = 1000)
)
@KafkaListener(topics = {KafkaConst.TEST_TOPIC}, groupId = &quot;apple&quot;)
private void customer(String message) {
    log.info(&quot;kafka customer:{}&quot;, message);
    Integer n = Integer.parseInt(message);
    if (n % 5 == 0) {
        throw new RuntimeException();
    }
    System.out.println(n);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当达到最大重试次数后，如果仍然无法成功处理消息，消息会被发送到对应的死信队列中。对于死信队列的处理，既可以用 <code>@DltHandler</code> 处理，也可以使用 <code>@KafkaListener</code> 重新消费。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,37),y={href:"https://kafka.apache.org/documentation/",target:"_blank",rel:"noopener noreferrer"},E=a("li",null,"极客时间—《Kafka 核心技术与实战》第 11 节：无消息丢失配置怎么实现？",-1),_=a("figure",null,[a("img",{src:"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png",alt:"JavaGuide 官方公众号",tabindex:"0"}),a("figcaption",null,"JavaGuide 官方公众号")],-1);function P(w,B){const s=p("ExternalLinkIcon");return i(),c("div",null,[r,a("blockquote",null,[a("p",null,[n("题外话：早期的 JMS 和 AMQP 属于消息服务领域权威组织所做的相关的标准，我在 "),a("a",u,[n("JavaGuide"),e(s)]),n("的 "),a("a",d,[n("《消息队列其实很简单》"),e(s)]),n("这篇文章中介绍过。但是，这些标准的进化跟不上消息队列的演进速度，这些标准实际上已经属于废弃状态。所以，可能存在的情况是：不同的消息队列都有自己的一套消息模型。")])]),k,a("blockquote",null,[a("p",null,[n("要想搞懂 zookeeper 在 Kafka 中的作用 一定要自己搭建一个 Kafka 环境然后自己进 zookeeper 去看一下有哪些文件夹和 Kafka 有关，每个节点又保存了什么信息。 一定不要光看不实践，这样学来的也终会忘记！这部分内容参考和借鉴了这篇文章："),a("a",f,[n("https://www.jianshu.com/p/a036405f989c"),e(s)]),n(" 。")])]),g,a("p",null,[n("![]("),a("a",v,[n("https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/kafka3.3.1-kraft-"),e(s)]),n(" production-ready.png)")]),m,a("blockquote",null,[a("p",null,[a("strong",null,[n("详细代码见我的这篇文章："),a("a",h,[n("Kafka 系列第三篇！10 分钟学会如何在 Spring Boot 程序中使用 Kafka 作为消息队列?"),e(s)])])])]),b,a("p",null,[n("网上关于 Spring Kafka 的默认重试机制文章很多，但大多都是过时的，和实际运行结果完全不一样。以下是根据 "),a("a",K,[n("spring-kafka-2.9.3"),e(s)]),n(" 源码重新梳理一下。")]),x,a("ul",null,[a("li",null,[n("Kafka 官方文档："),a("a",y,[n("https://kafka.apache.org/documentation/"),e(s)])]),E]),_])}const q=o(l,[["render",P],["__file","kafka-questions-01.html.vue"]]),R=JSON.parse(`{"path":"/high-performance/message-queue/kafka-questions-01.html","title":"Kafka常见问题总结","lang":"zh-CN","frontmatter":{"title":"Kafka常见问题总结","category":"高性能","tag":["消息队列"],"gitInclude":["../../snippets/article-footer.snippet.md"],"description":"Kafka 基础 Kafka 是什么？主要应用场景有哪些？ Kafka 是一个分布式流式处理平台。这到底是什么意思呢？ 流平台具有三个关键功能： 消息队列：发布和订阅消息流，这个功能类似于消息队列，这也是 Kafka 也被归类为消息队列的原因。 容错的持久方式存储记录消息流：Kafka 会把消息持久化到磁盘，有效避免了消息丢失的风险。 流式处理平台： ...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/learning/high-performance/message-queue/kafka-questions-01.html"}],["meta",{"property":"og:site_name","content":"Mua'dib Guide "}],["meta",{"property":"og:title","content":"Kafka常见问题总结"}],["meta",{"property":"og:description","content":"Kafka 基础 Kafka 是什么？主要应用场景有哪些？ Kafka 是一个分布式流式处理平台。这到底是什么意思呢？ 流平台具有三个关键功能： 消息队列：发布和订阅消息流，这个功能类似于消息队列，这也是 Kafka 也被归类为消息队列的原因。 容错的持久方式存储记录消息流：Kafka 会把消息持久化到磁盘，有效避免了消息丢失的风险。 流式处理平台： ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/%E9%98%9F%E5%88%97%E6%A8%A1%E5%9E%8B23.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-31T05:10:55.000Z"}],["meta",{"property":"article:author","content":"Guide"}],["meta",{"property":"article:tag","content":"消息队列"}],["meta",{"property":"article:modified_time","content":"2024-08-31T05:10:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Kafka常见问题总结\\",\\"image\\":[\\"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/%E9%98%9F%E5%88%97%E6%A8%A1%E5%9E%8B23.png\\",\\"https://oss.javaguide.cn/java-guide-blog/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%9E%8B.png\\",\\"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue20210507200944439.png\\",\\"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/KafkaTopicPartionsLayout.png\\",\\"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/kafka-offset.jpg\\"],\\"dateModified\\":\\"2024-08-31T05:10:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Guide\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"Kafka 基础","slug":"kafka-基础","link":"#kafka-基础","children":[{"level":3,"title":"Kafka 是什么？主要应用场景有哪些？","slug":"kafka-是什么-主要应用场景有哪些","link":"#kafka-是什么-主要应用场景有哪些","children":[]},{"level":3,"title":"和其他消息队列相比,Kafka 的优势在哪里？","slug":"和其他消息队列相比-kafka-的优势在哪里","link":"#和其他消息队列相比-kafka-的优势在哪里","children":[]},{"level":3,"title":"队列模型了解吗？Kafka 的消息模型知道吗？","slug":"队列模型了解吗-kafka-的消息模型知道吗","link":"#队列模型了解吗-kafka-的消息模型知道吗","children":[]}]},{"level":2,"title":"Kafka 核心概念","slug":"kafka-核心概念","link":"#kafka-核心概念","children":[{"level":3,"title":"什么是 Producer、Consumer、Broker、Topic、Partition？","slug":"什么是-producer、consumer、broker、topic、partition","link":"#什么是-producer、consumer、broker、topic、partition","children":[]},{"level":3,"title":"Kafka 的多副本机制了解吗？带来了什么好处？","slug":"kafka-的多副本机制了解吗-带来了什么好处","link":"#kafka-的多副本机制了解吗-带来了什么好处","children":[]}]},{"level":2,"title":"Zookeeper 和 Kafka","slug":"zookeeper-和-kafka","link":"#zookeeper-和-kafka","children":[{"level":3,"title":"Zookeeper 在 Kafka 中的作用是什么？","slug":"zookeeper-在-kafka-中的作用是什么","link":"#zookeeper-在-kafka-中的作用是什么","children":[]},{"level":3,"title":"使用 Kafka 能否不引入 Zookeeper?","slug":"使用-kafka-能否不引入-zookeeper","link":"#使用-kafka-能否不引入-zookeeper","children":[]}]},{"level":2,"title":"Kafka 消费顺序、消息丢失和重复消费","slug":"kafka-消费顺序、消息丢失和重复消费","link":"#kafka-消费顺序、消息丢失和重复消费","children":[{"level":3,"title":"Kafka 如何保证消息的消费顺序？","slug":"kafka-如何保证消息的消费顺序","link":"#kafka-如何保证消息的消费顺序","children":[]},{"level":3,"title":"Kafka 如何保证消息不丢失？","slug":"kafka-如何保证消息不丢失","link":"#kafka-如何保证消息不丢失","children":[]},{"level":3,"title":"Kafka 如何保证消息不重复消费？","slug":"kafka-如何保证消息不重复消费","link":"#kafka-如何保证消息不重复消费","children":[]}]},{"level":2,"title":"Kafka 重试机制","slug":"kafka-重试机制","link":"#kafka-重试机制","children":[{"level":3,"title":"消费失败会怎么样？","slug":"消费失败会怎么样","link":"#消费失败会怎么样","children":[]},{"level":3,"title":"默认会重试多少次？","slug":"默认会重试多少次","link":"#默认会重试多少次","children":[]},{"level":3,"title":"如何自定义重试次数以及时间间隔?","slug":"如何自定义重试次数以及时间间隔","link":"#如何自定义重试次数以及时间间隔","children":[]},{"level":3,"title":"如何在重试失败后进行告警?","slug":"如何在重试失败后进行告警","link":"#如何在重试失败后进行告警","children":[]},{"level":3,"title":"重试失败后的数据如何再次处理?","slug":"重试失败后的数据如何再次处理","link":"#重试失败后的数据如何再次处理","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1725081055000,"updatedTime":1725081055000,"contributors":[{"name":"tonygong","email":"280880907@163.com","commits":1}]},"readingTime":{"minutes":21.64,"words":6492},"filePathRelative":"high-performance/message-queue/kafka-questions-01.md","localizedDate":"2024年8月31日","excerpt":"<h2>Kafka 基础</h2>\\n<h3>Kafka 是什么？主要应用场景有哪些？</h3>\\n<p>Kafka 是一个分布式流式处理平台。这到底是什么意思呢？</p>\\n<p>流平台具有三个关键功能：</p>\\n<ol>\\n<li><strong>消息队列</strong>：发布和订阅消息流，这个功能类似于消息队列，这也是 Kafka 也被归类为消息队列的原因。</li>\\n<li><strong>容错的持久方式存储记录消息流</strong>：Kafka 会把消息持久化到磁盘，有效避免了消息丢失的风险。</li>\\n<li><strong>流式处理平台：</strong> 在消息发布的时候进行处理，Kafka 提供了一个完整的流式处理类库。</li>\\n</ol>","autoDesc":true}`);export{q as comp,R as data};
