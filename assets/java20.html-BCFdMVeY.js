import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as i,c as u,a as n,b as s,d as a,w as c,e}from"./app-BlHhf7HR.js";const r={},k=n("p",null,"JDK 20 于 2023 年 3 月 21 日发布，非长期支持版本。",-1),d=n("p",null,"根据开发计划，下一个 LTS 版本就是将于 2023 年 9 月发布的 JDK 21。",-1),v=n("figure",null,[n("img",{src:"https://oss.javaguide.cn/github/javaguide/java/new-features/640.png",alt:"",tabindex:"0"}),n("figcaption")],-1),m=n("p",null,"JDK 20 只有 7 个新特性：",-1),h={href:"https://openjdk.org/jeps/429",target:"_blank",rel:"noopener noreferrer"},g={href:"https://openjdk.org/jeps/432",target:"_blank",rel:"noopener noreferrer"},b={href:"https://openjdk.org/jeps/433",target:"_blank",rel:"noopener noreferrer"},f={href:"https://openjdk.org/jeps/434",target:"_blank",rel:"noopener noreferrer"},j={href:"https://openjdk.org/jeps/436",target:"_blank",rel:"noopener noreferrer"},_={href:"https://openjdk.org/jeps/437",target:"_blank",rel:"noopener noreferrer"},w={href:"https://openjdk.org/jeps/438",target:"_blank",rel:"noopener noreferrer"},y=e(`<h2 id="jep-429-作用域值-第一次孵化" tabindex="-1"><a class="header-anchor" href="#jep-429-作用域值-第一次孵化"><span>JEP 429：作用域值（第一次孵化）</span></a></h2><p>作用域值（Scoped Values）它可以在线程内和线程间共享不可变的数据，优于线程局部变量，尤其是在使用大量虚拟线程时。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">ScopedValue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">V</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScopedValue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// In some method</span>
<span class="token class-name">ScopedValue</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>
           <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token class-name">V</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> call methods <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// In a method called directly or indirectly from the lambda expression</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token class-name">V</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作用域值允许在大型程序中的组件之间安全有效地共享数据，而无需求助于方法参数。</p>`,4),J={href:"https://www.happycoders.eu/java/scoped-values/",target:"_blank",rel:"noopener noreferrer"},S=e(`<h2 id="jep-432-记录模式-第二次预览" tabindex="-1"><a class="header-anchor" href="#jep-432-记录模式-第二次预览"><span>JEP 432：记录模式（第二次预览）</span></a></h2><p>记录模式（Record Patterns） 可对 record 的值进行解构，也就是更方便地从记录类（Record Class）中提取数据。并且，还可以嵌套记录模式和类型模式结合使用，以实现强大的、声明性的和可组合的数据导航和处理形式。</p><p>记录模式不能单独使用，而是要与 instanceof 或 switch 模式匹配一同使用。</p><p>先以 instanceof 为例简单演示一下。</p><p>简单定义一个记录类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">record</span> <span class="token class-name">Shape</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">,</span> <span class="token keyword">long</span> unit<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>没有记录模式之前：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Shape</span> circle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shape</span><span class="token punctuation">(</span><span class="token string">&quot;Circle&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>circle <span class="token keyword">instanceof</span> <span class="token class-name">Shape</span> shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Area of &quot;</span> <span class="token operator">+</span> shape<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; is : &quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>shape<span class="token punctuation">.</span><span class="token function">unit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了记录模式之后：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Shape</span> circle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shape</span><span class="token punctuation">(</span><span class="token string">&quot;Circle&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>circle <span class="token keyword">instanceof</span> <span class="token class-name">Shape</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">,</span> <span class="token keyword">long</span> unit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Area of &quot;</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token string">&quot; is : &quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>unit<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再看看记录模式与 switch 的配合使用。</p><p>定义一些类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">record</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token keyword">record</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token keyword">double</span> side<span class="token punctuation">)</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token keyword">record</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token keyword">double</span> length<span class="token punctuation">,</span> <span class="token keyword">double</span> width<span class="token punctuation">)</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没有记录模式之前：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Shape</span> shape <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token class-name">Circle</span> c<span class="token operator">:</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;The shape is Circle with area: &quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> c<span class="token punctuation">.</span><span class="token function">radius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> c<span class="token punctuation">.</span><span class="token function">radius</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token keyword">case</span> <span class="token class-name">Square</span> s<span class="token operator">:</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;The shape is Square with area: &quot;</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">side</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> s<span class="token punctuation">.</span><span class="token function">side</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token keyword">case</span> <span class="token class-name">Rectangle</span> r<span class="token operator">:</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;The shape is Rectangle with area: + &quot;</span> <span class="token operator">+</span> r<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> r<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown Shape&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了记录模式之后：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Shape</span> shape <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">switch</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">case</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span><span class="token operator">:</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;The shape is Circle with area: &quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>

  <span class="token keyword">case</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token keyword">double</span> side<span class="token punctuation">)</span><span class="token operator">:</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;The shape is Square with area: &quot;</span> <span class="token operator">+</span> side <span class="token operator">*</span> side<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>

  <span class="token keyword">case</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token keyword">double</span> length<span class="token punctuation">,</span> <span class="token keyword">double</span> width<span class="token punctuation">)</span><span class="token operator">:</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;The shape is Rectangle with area: + &quot;</span> <span class="token operator">+</span> length <span class="token operator">*</span> width<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>

  <span class="token keyword">default</span><span class="token operator">:</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown Shape&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>记录模式可以避免不必要的转换，使得代码更建简洁易读。而且，用了记录模式后不必再担心 <code>null</code> 或者 <code>NullPointerException</code>，代码更安全可靠。</p>`,18),P={href:"https://openjdk.org/jeps/405",target:"_blank",rel:"noopener noreferrer"},q={href:"https://openjdk.org/jeps/432",target:"_blank",rel:"noopener noreferrer"},E=n("ul",null,[n("li",null,"添加对通用记录模式类型参数推断的支持，"),n("li",null,[s("添加对记录模式的支持以出现在增强语句的标题中"),n("code",null,"for")]),n("li",null,"删除对命名记录模式的支持。")],-1),T=n("strong",null,"注意",-1),x=e(`<h2 id="jep-433-switch-模式匹配-第四次预览" tabindex="-1"><a class="header-anchor" href="#jep-433-switch-模式匹配-第四次预览"><span>JEP 433：switch 模式匹配（第四次预览）</span></a></h2><p>正如 <code>instanceof</code> 一样， <code>switch</code> 也紧跟着增加了类型匹配自动转换功能。</p><p><code>instanceof</code> 代码示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Old code</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> use s <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token comment">// New code</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> use s <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>switch</code> 代码示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Old code</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">formatter</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> formatted <span class="token operator">=</span> <span class="token string">&quot;unknown&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        formatted <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;int %d&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Long</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        formatted <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;long %d&quot;</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Double</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        formatted <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;double %f&quot;</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        formatted <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;String %s&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> formatted<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// New code</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">formatterPatternSwitch</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token class-name">Integer</span> i <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;int %d&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Long</span> l    <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;long %d&quot;</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Double</span> d  <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;double %f&quot;</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">String</span> s  <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;String %s&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span>        <span class="token operator">-&gt;</span> o<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>switch</code> 模式匹配分别在 Java17、Java18、Java19 中进行了预览，Java20 是第四次预览了。每一次的预览基本都会有一些小改进，这里就不细提了。</p><h2 id="jep-434-外部函数和内存-api-第二次预览" tabindex="-1"><a class="header-anchor" href="#jep-434-外部函数和内存-api-第二次预览"><span>JEP 434: 外部函数和内存 API（第二次预览）</span></a></h2><p>Java 程序可以通过该 API 与 Java 运行时之外的代码和数据进行互操作。通过高效地调用外部函数（即 JVM 之外的代码）和安全地访问外部内存（即不受 JVM 管理的内存），该 API 使 Java 程序能够调用本机库并处理本机数据，而不会像 JNI 那样危险和脆弱。</p>`,9),V={href:"https://openjdk.java.net/jeps/412",target:"_blank",rel:"noopener noreferrer"},I={href:"https://openjdk.org/jeps/419",target:"_blank",rel:"noopener noreferrer"},A={href:"https://openjdk.org/jeps/424",target:"_blank",rel:"noopener noreferrer"},D={href:"https://openjdk.org/jeps/434",target:"_blank",rel:"noopener noreferrer"},C=e("<ul><li><code>MemorySegment</code> 和 <code>MemoryAddress</code> 抽象的统一</li><li>增强的 <code>MemoryLayout</code> 层次结构</li><li><code>MemorySession</code>拆分为<code>Arena</code>和<code>SegmentScope</code>，以促进跨维护边界的段共享。</li></ul>",1),M=n("h2",{id:"jep-436-虚拟线程-第二次预览",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jep-436-虚拟线程-第二次预览"},[n("span",null,"JEP 436: 虚拟线程（第二次预览）")])],-1),K=n("p",null,"虚拟线程（Virtual Thread）是 JDK 而不是 OS 实现的轻量级线程(Lightweight Process，LWP），由 JVM 调度。许多虚拟线程共享同一个操作系统线程，虚拟线程的数量可以远大于操作系统线程的数量。",-1),R=n("p",null,[s("在引入虚拟线程之前，"),n("code",null,"java.lang.Thread"),s(" 包已经支持所谓的平台线程，也就是没有虚拟线程之前，我们一直使用的线程。JVM 调度程序通过平台线程（载体线程）来管理虚拟线程，一个平台线程可以在不同的时间执行不同的虚拟线程（多个虚拟线程挂载在一个平台线程上），当虚拟线程被阻塞或等待时，平台线程可以切换到执行另一个虚拟线程。")],-1),L={href:"https://medium.com/javarevisited/how-to-use-java-19-virtual-threads-c16a32bad5f7",target:"_blank",rel:"noopener noreferrer"},N=n("figure",null,[n("img",{src:"https://oss.javaguide.cn/github/javaguide/java/new-features/virtual-threads-platform-threads-kernel-threads-relationship.png",alt:"虚拟线程、平台线程和系统内核线程的关系",tabindex:"0"}),n("figcaption",null,"虚拟线程、平台线程和系统内核线程的关系")],-1),F={href:"https://www.zhihu.com/question/23096638/answer/29617153",target:"_blank",rel:"noopener noreferrer"},G=n("p",null,"相比较于平台线程来说，虚拟线程是廉价且轻量级的，使用完后立即被销毁，因此它们不需要被重用或池化，每个任务可以有自己专属的虚拟线程来运行。虚拟线程暂停和恢复来实现线程之间的切换，避免了上下文切换的额外耗费，兼顾了多线程的优点，简化了高并发程序的复杂，可以有效减少编写、维护和观察高吞吐量并发应用程序的工作量。",-1),O=n("p",null,"虚拟线程在其他多线程语言中已经被证实是十分有用的，比如 Go 中的 Goroutine、Erlang 中的进程。",-1),z={href:"https://www.zhihu.com/question/536743167",target:"_blank",rel:"noopener noreferrer"},B=n("p",null,"Java 虚拟线程的详细解读和原理可以看下面这几篇文章：",-1),U={href:"https://javaguide.cn/java/concurrent/virtual-thread.html",target:"_blank",rel:"noopener noreferrer"},H={href:"https://mp.weixin.qq.com/s/yyApBXxpXxVwttr01Hld6Q",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://www.cnblogs.com/throwable/p/16758997.html",target:"_blank",rel:"noopener noreferrer"},W={href:"https://openjdk.org/jeps/425",target:"_blank",rel:"noopener noreferrer"},X=e(`<p>最后，我们来看一下四种创建虚拟线程的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 1、通过 Thread.ofVirtual() 创建</span>
<span class="token class-name">Runnable</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// your code here</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">ofVirtual</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
                      <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2、通过 Thread.startVirtualThread() 、创建</span>
<span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">startVirtualThread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// your code here</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3、通过 Executors.newVirtualThreadPerTaskExecutor() 创建</span>
<span class="token keyword">var</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newVirtualThreadPerTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// your code here</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">CustomThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;CustomThread run&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//4、通过 ThreadFactory 创建</span>
<span class="token class-name">CustomThread</span> customThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取线程工厂类</span>
<span class="token class-name">ThreadFactory</span> factory <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">ofVirtual</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建虚拟线程</span>
<span class="token class-name">Thread</span> thread <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newThread</span><span class="token punctuation">(</span>customThread<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 启动线程</span>
thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上述列举的 4 种创建虚拟线程的方式可以看出，官方为了降低虚拟线程的门槛，尽力复用原有的 <code>Thread</code> 线程类，这样可以平滑的过渡到虚拟线程的使用。</p><h2 id="jep-437-结构化并发-第二次孵化" tabindex="-1"><a class="header-anchor" href="#jep-437-结构化并发-第二次孵化"><span>JEP 437: 结构化并发(第二次孵化)</span></a></h2><p>Java 19 引入了结构化并发，一种多线程编程方法，目的是为了通过结构化并发 API 来简化多线程编程，并不是为了取代<code>java.util.concurrent</code>，目前处于孵化器阶段。</p><p>结构化并发将不同线程中运行的多个任务视为单个工作单元，从而简化错误处理、提高可靠性并增强可观察性。也就是说，结构化并发保留了单线程代码的可读性、可维护性和可观察性。</p>`,6),Q={href:"https://download.java.net/java/early_access/loom/docs/api/jdk.incubator.concurrent/jdk/incubator/concurrent/StructuredTaskScope.html",target:"_blank",rel:"noopener noreferrer"},Y=n("code",null,"StructuredTaskScope",-1),$=n("code",null,"StructuredTaskScope",-1),nn=e(`<p><code>StructuredTaskScope</code> 的基本用法如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StructuredTaskScope</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用fork方法派生线程来执行子任务</span>
        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future1 <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span>task1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span>task2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 等待线程完成</span>
        scope<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 结果的处理可能包括处理或重新抛出异常</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> process results<span class="token operator">/</span>exceptions <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span> <span class="token comment">// close</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结构化并发非常适合虚拟线程，虚拟线程是 JDK 实现的轻量级线程。许多虚拟线程共享同一个操作系统线程，从而允许非常多的虚拟线程。</p>`,3),sn=n("code",null,"StructuredTaskScope",-1),an={href:"https://openjdk.org/jeps/429",target:"_blank",rel:"noopener noreferrer"},tn=n("h2",{id:"jep-432-向量-api-第五次孵化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jep-432-向量-api-第五次孵化"},[n("span",null,"JEP 432：向量 API（第五次孵化）")])],-1),en=n("p",null,"向量计算由对向量的一系列操作组成。向量 API 用来表达向量计算，该计算可以在运行时可靠地编译为支持的 CPU 架构上的最佳向量指令，从而实现优于等效标量计算的性能。",-1),pn=n("p",null,"向量 API 的目标是为用户提供简洁易用且与平台无关的表达范围广泛的向量计算。",-1),on={href:"https://openjdk.java.net/jeps/338",target:"_blank",rel:"noopener noreferrer"},cn={href:"http://openjdk.java.net/jeps/11",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://openjdk.java.net/jeps/414",target:"_blank",rel:"noopener noreferrer"},un={href:"https://openjdk.java.net/jeps/417",target:"_blank",rel:"noopener noreferrer"},rn={href:"https://openjdk.java.net/jeps/426",target:"_blank",rel:"noopener noreferrer"},kn={href:"https://openjdk.org/jeps/438",target:"_blank",rel:"noopener noreferrer"},dn=n("figure",null,[n("img",{src:"https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png",alt:"JavaGuide 官方公众号",tabindex:"0"}),n("figcaption",null,"JavaGuide 官方公众号")],-1);function vn(mn,hn){const t=o("ExternalLinkIcon"),p=o("RouteLink");return i(),u("div",null,[k,d,v,m,n("ul",null,[n("li",null,[n("a",h,[s("JEP 429：Scoped Values（作用域值）"),a(t)]),s("（第一次孵化）")]),n("li",null,[n("a",g,[s("JEP 432：Record Patterns（记录模式）"),a(t)]),s("（第二次预览）")]),n("li",null,[n("a",b,[s("JEP 433：switch 模式匹配"),a(t)]),s("（第四次预览）")]),n("li",null,[n("a",f,[s("JEP 434: Foreign Function & Memory API（外部函数和内存 API）"),a(t)]),s("（第二次预览）")]),n("li",null,[n("a",j,[s("JEP 436: Virtual Threads（虚拟线程）"),a(t)]),s("（第二次预览）")]),n("li",null,[n("a",_,[s("JEP 437:Structured Concurrency（结构化并发）"),a(t)]),s("(第二次孵化)")]),n("li",null,[n("a",w,[s("JEP 432:向量 API（"),a(t)]),s("第五次孵化）")])]),y,n("p",null,[s("关于作用域值的详细介绍，推荐阅读"),n("a",J,[s("作用域值常见问题解答"),a(t)]),s("这篇文章。")]),S,n("p",null,[s("记录模式在 Java 19 进行了第一次预览， 由 "),n("a",P,[s("JEP 405"),a(t)]),s(" 提出。JDK 20 中是第二次预览，由 "),n("a",q,[s("JEP 432"),a(t)]),s(" 提出。这次的改进包括：")]),E,n("p",null,[T,s("：不要把记录模式和 "),a(p,{to:"/java/new-features/java16.html"},{default:c(()=>[s("JDK16")]),_:1}),s(" 正式引入的记录类搞混了。")]),x,n("p",null,[s("外部函数和内存 API 在 Java 17 中进行了第一轮孵化，由 "),n("a",V,[s("JEP 412"),a(t)]),s(" 提出。Java 18 中进行了第二次孵化，由"),n("a",I,[s("JEP 419"),a(t)]),s(" 提出。Java 19 中是第一次预览，由 "),n("a",A,[s("JEP 424"),a(t)]),s(" 提出。")]),n("p",null,[s("JDK 20 中是第二次预览，由 "),n("a",D,[s("JEP 434"),a(t)]),s(" 提出，这次的改进包括：")]),C,n("p",null,[s("在 "),a(p,{to:"/java/new-features/java19.html"},{default:c(()=>[s("Java 19 新特性概览")]),_:1}),s(" 中，我有详细介绍到外部函数和内存 API，这里就不再做额外的介绍了。")]),M,K,R,n("p",null,[s("虚拟线程、平台线程和系统内核线程的关系图如下所示（图源："),n("a",L,[s("How to Use Java 19 Virtual Threads"),a(t)]),s("）：")]),N,n("p",null,[s("关于平台线程和系统内核线程的对应关系多提一点：在 Windows 和 Linux 等主流操作系统中，Java 线程采用的是一对一的线程模型，也就是一个平台线程对应一个系统内核线程。Solaris 系统是一个特例，HotSpot VM 在 Solaris 上支持多对多和一对一。具体可以参考 R 大的回答: "),n("a",F,[s("JVM 中的线程模型是用户级的么？"),a(t)]),s("。")]),G,O,n("p",null,[s("知乎有一个关于 Java 19 虚拟线程的讨论，感兴趣的可以去看看："),n("a",z,[s("https://www.zhihu.com/question/536743167"),a(t)]),s(" 。")]),B,n("ul",null,[n("li",null,[n("a",U,[s("虚拟线程极简入门"),a(t)])]),n("li",null,[n("a",H,[s("Java19 正式 GA！看虚拟线程如何大幅提高系统吞吐量"),a(t)])]),n("li",null,[n("a",Z,[s("虚拟线程 - VirtualThread 源码透视"),a(t)])])]),n("p",null,[s("虚拟线程在 Java 19 中进行了第一次预览，由"),n("a",W,[s("JEP 425"),a(t)]),s("提出。JDK 20 中是第二次预览，做了一些细微变化，这里就不细提了。")]),X,n("p",null,[s("结构化并发的基本 API 是"),n("a",Q,[Y,a(t)]),s("。"),$,s(" 支持将任务拆分为多个并发子任务，在它们自己的线程中执行，并且子任务必须在主任务继续之前完成。")]),nn,n("p",null,[s("JDK 20 中对结构化并发唯一变化是更新为支持在任务范围内创建的线程"),sn,s("继承范围值 这简化了跨线程共享不可变数据，详见"),n("a",an,[s("JEP 429"),a(t)]),s("。")]),tn,en,pn,n("p",null,[s("向量（Vector） API 最初由 "),n("a",on,[s("JEP 338"),a(t)]),s(" 提出，并作为"),n("a",cn,[s("孵化 API"),a(t)]),s("集成到 Java 16 中。第二轮孵化由 "),n("a",ln,[s("JEP 414"),a(t)]),s(" 提出并集成到 Java 17 中，第三轮孵化由 "),n("a",un,[s("JEP 417"),a(t)]),s(" 提出并集成到 Java 18 中，第四轮由 "),n("a",rn,[s("JEP 426"),a(t)]),s(" 提出并集成到了 Java 19 中。")]),n("p",null,[s("Java20 的这次孵化基本没有改变向量 API ，只是进行了一些错误修复和性能增强，详见 "),n("a",kn,[s("JEP 438"),a(t)]),s("。")]),dn])}const fn=l(r,[["render",vn],["__file","java20.html.vue"]]),jn=JSON.parse(`{"path":"/java/new-features/java20.html","title":"Java 20 新特性概览","lang":"zh-CN","frontmatter":{"title":"Java 20 新特性概览","category":"Java","tag":["Java新特性"],"gitInclude":["../../snippets/article-footer.snippet.md"],"description":"JDK 20 于 2023 年 3 月 21 日发布，非长期支持版本。 根据开发计划，下一个 LTS 版本就是将于 2023 年 9 月发布的 JDK 21。 JDK 20 只有 7 个新特性： JEP 429：Scoped Values（作用域值）（第一次孵化） JEP 432：Record Patterns（记录模式）（第二次预览） JEP 433...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/learning/java/new-features/java20.html"}],["meta",{"property":"og:site_name","content":"Mua'dib Guide "}],["meta",{"property":"og:title","content":"Java 20 新特性概览"}],["meta",{"property":"og:description","content":"JDK 20 于 2023 年 3 月 21 日发布，非长期支持版本。 根据开发计划，下一个 LTS 版本就是将于 2023 年 9 月发布的 JDK 21。 JDK 20 只有 7 个新特性： JEP 429：Scoped Values（作用域值）（第一次孵化） JEP 432：Record Patterns（记录模式）（第二次预览） JEP 433..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://oss.javaguide.cn/github/javaguide/java/new-features/640.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-02T15:48:11.000Z"}],["meta",{"property":"article:author","content":"Guide"}],["meta",{"property":"article:tag","content":"Java新特性"}],["meta",{"property":"article:modified_time","content":"2024-09-02T15:48:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 20 新特性概览\\",\\"image\\":[\\"https://oss.javaguide.cn/github/javaguide/java/new-features/640.png\\",\\"https://oss.javaguide.cn/github/javaguide/java/new-features/virtual-threads-platform-threads-kernel-threads-relationship.png\\"],\\"dateModified\\":\\"2024-09-02T15:48:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Guide\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"JEP 429：作用域值（第一次孵化）","slug":"jep-429-作用域值-第一次孵化","link":"#jep-429-作用域值-第一次孵化","children":[]},{"level":2,"title":"JEP 432：记录模式（第二次预览）","slug":"jep-432-记录模式-第二次预览","link":"#jep-432-记录模式-第二次预览","children":[]},{"level":2,"title":"JEP 433：switch 模式匹配（第四次预览）","slug":"jep-433-switch-模式匹配-第四次预览","link":"#jep-433-switch-模式匹配-第四次预览","children":[]},{"level":2,"title":"JEP 434: 外部函数和内存 API（第二次预览）","slug":"jep-434-外部函数和内存-api-第二次预览","link":"#jep-434-外部函数和内存-api-第二次预览","children":[]},{"level":2,"title":"JEP 436: 虚拟线程（第二次预览）","slug":"jep-436-虚拟线程-第二次预览","link":"#jep-436-虚拟线程-第二次预览","children":[]},{"level":2,"title":"JEP 437: 结构化并发(第二次孵化)","slug":"jep-437-结构化并发-第二次孵化","link":"#jep-437-结构化并发-第二次孵化","children":[]},{"level":2,"title":"JEP 432：向量 API（第五次孵化）","slug":"jep-432-向量-api-第五次孵化","link":"#jep-432-向量-api-第五次孵化","children":[]}],"git":{"createdTime":1725292091000,"updatedTime":1725292091000,"contributors":[{"name":"tonygong","email":"280880907@163.com","commits":1}]},"readingTime":{"minutes":9.61,"words":2883},"filePathRelative":"java/new-features/java20.md","localizedDate":"2024年9月2日","excerpt":"<p>JDK 20 于 2023 年 3 月 21 日发布，非长期支持版本。</p>\\n<p>根据开发计划，下一个 LTS 版本就是将于 2023 年 9 月发布的 JDK 21。</p>\\n<figure><img src=\\"https://oss.javaguide.cn/github/javaguide/java/new-features/640.png\\" alt=\\"\\" tabindex=\\"0\\"><figcaption></figcaption></figure>\\n<p>JDK 20 只有 7 个新特性：</p>\\n<ul>\\n<li><a href=\\"https://openjdk.org/jeps/429\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JEP 429：Scoped Values（作用域值）</a>（第一次孵化）</li>\\n<li><a href=\\"https://openjdk.org/jeps/432\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JEP 432：Record Patterns（记录模式）</a>（第二次预览）</li>\\n<li><a href=\\"https://openjdk.org/jeps/433\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JEP 433：switch 模式匹配</a>（第四次预览）</li>\\n<li><a href=\\"https://openjdk.org/jeps/434\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JEP 434: Foreign Function &amp; Memory API（外部函数和内存 API）</a>（第二次预览）</li>\\n<li><a href=\\"https://openjdk.org/jeps/436\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JEP 436: Virtual Threads（虚拟线程）</a>（第二次预览）</li>\\n<li><a href=\\"https://openjdk.org/jeps/437\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JEP 437:Structured Concurrency（结构化并发）</a>(第二次孵化)</li>\\n<li><a href=\\"https://openjdk.org/jeps/438\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JEP 432:向量 API（</a>第五次孵化）</li>\\n</ul>","autoDesc":true}`);export{fn as comp,jn as data};
