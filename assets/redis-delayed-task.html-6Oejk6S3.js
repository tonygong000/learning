import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,o as a,c as o,a as s,b as e,d as r,e as i}from"./app-C4hTQQaE.js";const p={},l=i('<p>基于 Redis 实现延时任务的功能无非就下面两种方案：</p><ol><li>Redis 过期事件监听</li><li>Redisson 内置的延时队列</li></ol><p>面试的时候，你可以先说自己考虑了这两种方案，但最后发现 Redis 过期事件监听这种方案存在很多问题，因此你最终选择了 Redisson 内置的 DelayedQueue 这种方案。</p><p>这个时候面试官可能会追问你一些相关的问题，我们后面会提到，提前准备就好了。</p><p>另外，除了下面介绍到的这些问题之外，Redis 相关的常见问题建议你都复习一遍，不排除面试官会顺带问你一些 Redis 的其他问题。</p><h3 id="redis-过期事件监听实现延时任务功能的原理" tabindex="-1"><a class="header-anchor" href="#redis-过期事件监听实现延时任务功能的原理"><span>Redis 过期事件监听实现延时任务功能的原理？</span></a></h3><p>Redis 2.0 引入了发布订阅 (pub/sub) 功能。在 pub/sub 中，引入了一个叫做 <strong>channel（频道）</strong> 的概念，有点类似于消息队列中的 <strong>topic（主题）</strong>。</p><p>pub/sub 涉及发布者（publisher）和订阅者（subscriber，也叫消费者）两个角色：</p><ul><li>发布者通过 <code>PUBLISH</code> 投递消息给指定 channel。</li><li>订阅者通过<code>SUBSCRIBE</code>订阅它关心的 channel。并且，订阅者可以订阅一个或者多个 channel。</li></ul><figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/redis-pub-sub.png" alt="Redis 发布订阅 (pub/sub) 功能" tabindex="0"><figcaption>Redis 发布订阅 (pub/sub) 功能</figcaption></figure><p>在 pub/sub 模式下，生产者需要指定消息发送到哪个 channel 中，而消费者则订阅对应的 channel 以获取消息。</p><p>Redis 中有很多默认的 channel，这些 channel 是由 Redis 本身向它们发送消息的，而不是我们自己编写的代码。其中，<code>__keyevent@0__:expired</code> 就是一个默认的 channel，负责监听 key 的过期事件。也就是说，当一个 key 过期之后，Redis 会发布一个 key 过期的事件到<code>__keyevent@&lt;db&gt;__:expired</code>这个 channel 中。</p><p>我们只需要监听这个 channel，就可以拿到过期的 key 的消息，进而实现了延时任务功能。</p><p>这个功能被 Redis 官方称为 <strong>keyspace notifications</strong> ，作用是实时监控实时监控 Redis 键和值的变化。</p><h3 id="redis-过期事件监听实现延时任务功能有什么缺陷" tabindex="-1"><a class="header-anchor" href="#redis-过期事件监听实现延时任务功能有什么缺陷"><span>Redis 过期事件监听实现延时任务功能有什么缺陷？</span></a></h3><p><strong>1、时效性差</strong></p>',16),c={href:"https://redis.io/docs/manual/keyspace-notifications/#timing-of-expired-events",target:"_blank",rel:"noopener noreferrer"},u=i('<figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/redis-timing-of-expired-events.png" alt="Redis 过期事件" tabindex="0"><figcaption>Redis 过期事件</figcaption></figure><p>这段话的核心是：过期事件消息是在 Redis 服务器删除 key 时发布的，而不是一个 key 过期之后就会就会直接发布。</p><p>我们知道常用的过期数据的删除策略就两个：</p><ol><li><strong>惰性删除</strong>：只会在取出 key 的时候才对数据进行过期检查。这样对 CPU 最友好，但是可能会造成太多过期 key 没有被删除。</li><li><strong>定期删除</strong>：每隔一段时间抽取一批 key 执行删除过期 key 操作。并且，Redis 底层会通过限制删除操作执行的时长和频率来减少删除操作对 CPU 时间的影响。</li></ol><p>定期删除对内存更加友好，惰性删除对 CPU 更加友好。两者各有千秋，所以 Redis 采用的是 <strong>定期删除+惰性/懒汉式删除</strong> 。</p><p>因此，就会存在我设置了 key 的过期时间，但到了指定时间 key 还未被删除，进而没有发布过期事件的情况。</p><p><strong>2、丢消息</strong></p><p>Redis 的 pub/sub 模式中的消息并不支持持久化，这与消息队列不同。在 Redis 的 pub/sub 模式中，发布者将消息发送给指定的频道，订阅者监听相应的频道以接收消息。当没有订阅者时，消息会被直接丢弃，在 Redis 中不会存储该消息。</p><p><strong>3、多服务实例下消息重复消费</strong></p><p>Redis 的 pub/sub 模式目前只有广播模式，这意味着当生产者向特定频道发布一条消息时，所有订阅相关频道的消费者都能够收到该消息。</p><p>这个时候，我们需要注意多个服务实例重复处理消息的问题，这会增加代码开发量和维护难度。</p><h3 id="redisson-延迟队列原理是什么-有什么优势" tabindex="-1"><a class="header-anchor" href="#redisson-延迟队列原理是什么-有什么优势"><span>Redisson 延迟队列原理是什么？有什么优势？</span></a></h3><p>Redisson 是一个开源的 Java 语言 Redis 客户端，提供了很多开箱即用的功能，比如多种分布式锁的实现、延时队列。</p><p>我们可以借助 Redisson 内置的延时队列 RDelayedQueue 来实现延时任务功能。</p><p>Redisson 的延迟队列 RDelayedQueue 是基于 Redis 的 SortedSet 来实现的。SortedSet 是一个有序集合，其中的每个元素都可以设置一个分数，代表该元素的权重。Redisson 利用这一特性，将需要延迟执行的任务插入到 SortedSet 中，并给它们设置相应的过期时间作为分数。</p><p>Redisson 使用 <code>zrangebyscore</code> 命令扫描 SortedSet 中过期的元素，然后将这些过期元素从 SortedSet 中移除，并将它们加入到就绪消息列表中。就绪消息列表是一个阻塞队列，有消息进入就会被监听到。这样做可以避免对整个 SortedSet 进行轮询，提高了执行效率。</p><p>相比于 Redis 过期事件监听实现延时任务功能，这种方式具备下面这些优势：</p><ol><li><strong>减少了丢消息的可能</strong>：DelayedQueue 中的消息会被持久化，即使 Redis 宕机了，根据持久化机制，也只可能丢失一点消息，影响不大。当然了，你也可以使用扫描数据库的方法作为补偿机制。</li><li><strong>消息不存在重复消费问题</strong>：每个客户端都是从同一个目标队列中获取任务的，不存在重复消费的问题。</li></ol><p>跟 Redisson 内置的延时队列相比，消息队列可以通过保障消息消费的可靠性、控制消息生产者和消费者的数量等手段来实现更高的吞吐量和更强的可靠性，实际项目中首选使用消息队列的延时消息这种方案。</p>',19);function g(R,h){const t=n("ExternalLinkIcon");return a(),o("div",null,[l,s("p",null,[e("官方文档的一段介绍解释了时效性差的原因，地址："),s("a",c,[e("https://redis.io/docs/manual/keyspace-notifications/#timing-of-expired-events"),r(t)]),e(" 。")]),u])}const y=d(p,[["render",g],["__file","redis-delayed-task.html.vue"]]),_=JSON.parse(`{"path":"/database/redis/redis-delayed-task.html","title":"如何基于Redis实现延时任务","lang":"zh-CN","frontmatter":{"title":"如何基于Redis实现延时任务","category":"数据库","tag":["Redis"],"description":"基于 Redis 实现延时任务的功能无非就下面两种方案： Redis 过期事件监听 Redisson 内置的延时队列 面试的时候，你可以先说自己考虑了这两种方案，但最后发现 Redis 过期事件监听这种方案存在很多问题，因此你最终选择了 Redisson 内置的 DelayedQueue 这种方案。 这个时候面试官可能会追问你一些相关的问题，我们后面会...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/learning/database/redis/redis-delayed-task.html"}],["meta",{"property":"og:site_name","content":"Mua'dib Guide "}],["meta",{"property":"og:title","content":"如何基于Redis实现延时任务"}],["meta",{"property":"og:description","content":"基于 Redis 实现延时任务的功能无非就下面两种方案： Redis 过期事件监听 Redisson 内置的延时队列 面试的时候，你可以先说自己考虑了这两种方案，但最后发现 Redis 过期事件监听这种方案存在很多问题，因此你最终选择了 Redisson 内置的 DelayedQueue 这种方案。 这个时候面试官可能会追问你一些相关的问题，我们后面会..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://oss.javaguide.cn/github/javaguide/database/redis/redis-pub-sub.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-31T05:10:55.000Z"}],["meta",{"property":"article:author","content":"Guide"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:modified_time","content":"2024-08-31T05:10:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何基于Redis实现延时任务\\",\\"image\\":[\\"https://oss.javaguide.cn/github/javaguide/database/redis/redis-pub-sub.png\\",\\"https://oss.javaguide.cn/github/javaguide/database/redis/redis-timing-of-expired-events.png\\"],\\"dateModified\\":\\"2024-08-31T05:10:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Guide\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":3,"title":"Redis 过期事件监听实现延时任务功能的原理？","slug":"redis-过期事件监听实现延时任务功能的原理","link":"#redis-过期事件监听实现延时任务功能的原理","children":[]},{"level":3,"title":"Redis 过期事件监听实现延时任务功能有什么缺陷？","slug":"redis-过期事件监听实现延时任务功能有什么缺陷","link":"#redis-过期事件监听实现延时任务功能有什么缺陷","children":[]},{"level":3,"title":"Redisson 延迟队列原理是什么？有什么优势？","slug":"redisson-延迟队列原理是什么-有什么优势","link":"#redisson-延迟队列原理是什么-有什么优势","children":[]}],"git":{"createdTime":1725081055000,"updatedTime":1725081055000,"contributors":[{"name":"tonygong","email":"280880907@163.com","commits":1}]},"readingTime":{"minutes":5.1,"words":1530},"filePathRelative":"database/redis/redis-delayed-task.md","localizedDate":"2024年8月31日","excerpt":"<p>基于 Redis 实现延时任务的功能无非就下面两种方案：</p>\\n<ol>\\n<li>Redis 过期事件监听</li>\\n<li>Redisson 内置的延时队列</li>\\n</ol>\\n<p>面试的时候，你可以先说自己考虑了这两种方案，但最后发现 Redis 过期事件监听这种方案存在很多问题，因此你最终选择了 Redisson 内置的 DelayedQueue 这种方案。</p>\\n<p>这个时候面试官可能会追问你一些相关的问题，我们后面会提到，提前准备就好了。</p>\\n<p>另外，除了下面介绍到的这些问题之外，Redis 相关的常见问题建议你都复习一遍，不排除面试官会顺带问你一些 Redis 的其他问题。</p>","autoDesc":true}`);export{y as comp,_ as data};
